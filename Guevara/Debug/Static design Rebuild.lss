
Static design Rebuild.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000178  00800060  000022b0  00002344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007f  008001d8  008001d8  000024bc  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  000024bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00004610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ca6  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100b  00000000  00000000  00007516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  00008521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ccc  00000000  00000000  000099c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5e  00000000  00000000  0000a68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002806  00000000  00000000  0000b3ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_1>
       8:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_2>
       c:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_3>
      10:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_4>
      14:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_5>
      18:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_6>
      1c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__vector_7>
      20:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_8>
      24:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <__vector_9>
      28:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_10>
      2c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_11>
      30:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_12>
      34:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_13>
      38:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_14>
      3c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_15>
      40:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_16>
      44:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__vector_17>
      48:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__vector_18>
      4c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_19>
      50:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <main>
      8a:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_SM_Init>:
//extern uint16_t Distance;
static uint16_t Distance;
ERROR_STATUS Car_SM_Init(void)
{
uint8_t ret=E_OK;
Steering_Init();
      92:	0e 94 67 00 	call	0xce	; 0xce <Steering_Init>
Us_Init();
      96:	0e 94 b6 03 	call	0x76c	; 0x76c <Us_Init>
return ret;
}
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	08 95       	ret

0000009e <Car_SM_Update>:


ERROR_STATUS Car_SM_Update(void)
{uint8_t ret=E_OK;
Us_Trigger();
      9e:	0e 94 bf 03 	call	0x77e	; 0x77e <Us_Trigger>
Us_GetDistance(&Distance);
      a2:	88 ed       	ldi	r24, 0xD8	; 216
      a4:	91 e0       	ldi	r25, 0x01	; 1
      a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Us_GetDistance>

if(Distance <= 30)
      aa:	80 91 d8 01 	lds	r24, 0x01D8
      ae:	90 91 d9 01 	lds	r25, 0x01D9
      b2:	8f 31       	cpi	r24, 0x1F	; 31
      b4:	91 05       	cpc	r25, r1
      b6:	28 f4       	brcc	.+10     	; 0xc2 <Car_SM_Update+0x24>
{
	
	Steering_SteerCar(CAR_RIGHT,50);
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	62 e3       	ldi	r22, 0x32	; 50
      bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <Steering_SteerCar>
      c0:	04 c0       	rjmp	.+8      	; 0xca <Car_SM_Update+0x2c>
}else
{
	Steering_SteerCar(CAR_FORWARD,50);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	62 e3       	ldi	r22, 0x32	; 50
      c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <Steering_SteerCar>
}

return ret;
}	
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	08 95       	ret

000000ce <Steering_Init>:


ERROR_STATUS Steering_Init(void)
{
	uint8_t ret=0;
	ret=Motor_Init(MOTOR_1|MOTOR_2);
      ce:	83 e0       	ldi	r24, 0x03	; 3
      d0:	0e 94 4d 02 	call	0x49a	; 0x49a <Motor_Init>
	return ret;
}
      d4:	08 95       	ret

000000d6 <Steering_SteerCar>:


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
      d6:	cf 93       	push	r28
      d8:	c6 2f       	mov	r28, r22
	uint8_t ret=0;
		switch(Steering_CarCmd)
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	a1 f0       	breq	.+40     	; 0x106 <Steering_SteerCar+0x30>
      de:	83 30       	cpi	r24, 0x03	; 3
      e0:	20 f4       	brcc	.+8      	; 0xea <Steering_SteerCar+0x14>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	09 f0       	breq	.+2      	; 0xe8 <Steering_SteerCar+0x12>
      e6:	42 c0       	rjmp	.+132    	; 0x16c <Steering_SteerCar+0x96>
      e8:	05 c0       	rjmp	.+10     	; 0xf4 <Steering_SteerCar+0x1e>
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	51 f1       	breq	.+84     	; 0x142 <Steering_SteerCar+0x6c>
      ee:	84 30       	cpi	r24, 0x04	; 4
      f0:	e9 f5       	brne	.+122    	; 0x16c <Steering_SteerCar+0x96>
      f2:	12 c0       	rjmp	.+36     	; 0x118 <Steering_SteerCar+0x42>
	{
		case CAR_FORWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2, CAR_FORWARD);
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	61 e0       	ldi	r22, 0x01	; 1
      f8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	6c 2f       	mov	r22, r28
     100:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
			break;
     104:	34 c0       	rjmp	.+104    	; 0x16e <Steering_SteerCar+0x98>
			case CAR_BACKWARD:
			ret= Motor_Direction(MOTOR_1|MOTOR_2,CAR_BACKWARD);
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	62 e0       	ldi	r22, 0x02	; 2
     10a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	6c 2f       	mov	r22, r28
     112:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
			break;
     116:	2b c0       	rjmp	.+86     	; 0x16e <Steering_SteerCar+0x98>
			case CAR_LEFT:
			ret= Motor_Direction(MOTOR_1, CAR_FORWARD);
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_BACKWARD);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	62 e0       	ldi	r22, 0x02	; 2
     124:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     128:	83 e0       	ldi	r24, 0x03	; 3
     12a:	6c 2f       	mov	r22, r28
     12c:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>

/*************************************************************/
			ret= Motor_Direction(MOTOR_1, CAR_STOP);
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_STOP);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			break;
     140:	16 c0       	rjmp	.+44     	; 0x16e <Steering_SteerCar+0x98>
			case CAR_RIGHT:
			ret= Motor_Direction(MOTOR_1, CAR_BACKWARD);
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	62 e0       	ldi	r22, 0x02	; 2
     146:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_FORWARD);
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	61 e0       	ldi	r22, 0x01	; 1
     14e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret=Motor_Start(MOTOR_1|MOTOR_2,speed);
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	6c 2f       	mov	r22, r28
     156:	0e 94 25 03 	call	0x64a	; 0x64a <Motor_Start>
		/*	timer2Start();
			timer2DelayMs(100);
*//***********************************************************/
			ret= Motor_Direction(MOTOR_1, CAR_STOP);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			ret= Motor_Direction(MOTOR_2, CAR_STOP);
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Motor_Direction>
			break;
     16a:	01 c0       	rjmp	.+2      	; 0x16e <Steering_SteerCar+0x98>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
	uint8_t ret=0;
     16c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	
return ret;
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <LCD_EN_pulse>:
 #include <stdlib.h>
extern uint8_t u8_Init_finished;
  uint8_t U8_index=0;
 void LCD_EN_pulse(void)
 {
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, HIGH);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	68 e0       	ldi	r22, 0x08	; 8
     176:	4f ef       	ldi	r20, 0xFF	; 255
     178:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
/***********************************************************/
	 SwDelay_us(1);
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 ab 03 	call	0x756	; 0x756 <SwDelay_us>
	 DIO_Write(LCD_EN_PORT, LCD_EN_PIN, LOW);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	68 e0       	ldi	r22, 0x08	; 8
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
/*************************************************************/	 
	 SwDelay_us(1);
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 ab 03 	call	0x756	; 0x756 <SwDelay_us>
 }
     19e:	08 95       	ret

000001a0 <LCD_config_pins>:

 void LCD_config_pins(void){

	 /* set LCD pins as outputs */
	DIO_init(&Dio_configurationA);
     1a0:	87 e7       	ldi	r24, 0x77	; 119
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
}
     1a8:	08 95       	ret

000001aa <LCD_send_nibble>:

 void LCD_send_nibble(uint8_t data){
     1aa:	cf 93       	push	r28
	 uint8_t mask = 1;
	 data >>= 4;
     1ac:	c8 2f       	mov	r28, r24
     1ae:	c2 95       	swap	r28
     1b0:	cf 70       	andi	r28, 0x0F	; 15
	 if(data & mask)
     1b2:	c0 ff       	sbrs	r28, 0
     1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <LCD_send_nibble+0x18>
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, HIGH);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	60 e1       	ldi	r22, 0x10	; 16
     1ba:	4f ef       	ldi	r20, 0xFF	; 255
     1bc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <LCD_send_nibble+0x22>
	 else
	 DIO_Write(LCD_D4_PORT, LCD_D4_PIN, LOW);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	60 e1       	ldi	r22, 0x10	; 16
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     1cc:	c1 ff       	sbrs	r28, 1
     1ce:	06 c0       	rjmp	.+12     	; 0x1dc <LCD_send_nibble+0x32>
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, HIGH);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	60 e2       	ldi	r22, 0x20	; 32
     1d4:	4f ef       	ldi	r20, 0xFF	; 255
     1d6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
     1da:	05 c0       	rjmp	.+10     	; 0x1e6 <LCD_send_nibble+0x3c>
	 else
	 DIO_Write(LCD_D5_PORT, LCD_D5_PIN, LOW);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	60 e2       	ldi	r22, 0x20	; 32
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     1e6:	c2 ff       	sbrs	r28, 2
     1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <LCD_send_nibble+0x4c>
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, HIGH);
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	60 e4       	ldi	r22, 0x40	; 64
     1ee:	4f ef       	ldi	r20, 0xFF	; 255
     1f0:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <LCD_send_nibble+0x56>
	 else
	 DIO_Write(LCD_D6_PORT, LCD_D6_PIN, LOW);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	60 e4       	ldi	r22, 0x40	; 64
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

	 mask *= 2;
	 if(data & mask)
     200:	c8 70       	andi	r28, 0x08	; 8
     202:	31 f0       	breq	.+12     	; 0x210 <LCD_send_nibble+0x66>
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, HIGH);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	60 e8       	ldi	r22, 0x80	; 128
     208:	4f ef       	ldi	r20, 0xFF	; 255
     20a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
     20e:	05 c0       	rjmp	.+10     	; 0x21a <LCD_send_nibble+0x70>
	 else
	 DIO_Write(LCD_D7_PORT, LCD_D7_PIN, LOW);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	60 e8       	ldi	r22, 0x80	; 128
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
 }
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <LCD_send_char>:
/***************************************************************************/
 void LCD_send_char(char data)		//Sends Char to LCD
 {
     21e:	cf 93       	push	r28
     220:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, HIGH);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	4f ef       	ldi	r20, 0xFF	; 255
     228:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
     22c:	8c 2f       	mov	r24, r28
     22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     232:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
     236:	8c 2f       	mov	r24, r28
     238:	82 95       	swap	r24
     23a:	80 7f       	andi	r24, 0xF0	; 240
     23c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     240:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>
SwDelay_ms(1);
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 95 03 	call	0x72a	; 0x72a <SwDelay_ms>
 }
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <LCD_send_command>:
 /**************************************************************************/
 void LCD_send_command(uint8_t data)	//Sends Command to LCD
 {
     254:	cf 93       	push	r28
     256:	c8 2f       	mov	r28, r24
	 DIO_Write(LCD_RS_PORT, LCD_RS_PIN, LOW);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
	 LCD_send_nibble(data); // Higher nibble first
     262:	8c 2f       	mov	r24, r28
     264:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     268:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>

	 LCD_send_nibble(data<<4);
     26c:	8c 2f       	mov	r24, r28
     26e:	82 95       	swap	r24
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_send_nibble>
	 LCD_EN_pulse();
     276:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_EN_pulse>
	 SwDelay_ms(1);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 95 03 	call	0x72a	; 0x72a <SwDelay_ms>
 }
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <LCD_init>:
 /******************************************************************************/
 void LCD_init(void)//Initializes LCD
 {
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	29 97       	sbiw	r28, 0x09	; 9
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t commands[9]={0x33,0x32,Four_bit,Cursor_on,Lcd_clear,Increment_cursor,Cursor_off,0};
     2a2:	8e 01       	movw	r16, r28
     2a4:	0f 5f       	subi	r16, 0xFF	; 255
     2a6:	1f 4f       	sbci	r17, 0xFF	; 255
     2a8:	89 e0       	ldi	r24, 0x09	; 9
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 92       	st	Z+, r1
     2ae:	8a 95       	dec	r24
     2b0:	e9 f7       	brne	.-6      	; 0x2ac <LCD_init+0x22>
     2b2:	83 e3       	ldi	r24, 0x33	; 51
     2b4:	89 83       	std	Y+1, r24	; 0x01
     2b6:	82 e3       	ldi	r24, 0x32	; 50
     2b8:	8a 83       	std	Y+2, r24	; 0x02
     2ba:	88 e2       	ldi	r24, 0x28	; 40
     2bc:	8b 83       	std	Y+3, r24	; 0x03
     2be:	8e e0       	ldi	r24, 0x0E	; 14
     2c0:	8c 83       	std	Y+4, r24	; 0x04
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	8d 83       	std	Y+5, r24	; 0x05
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	8e 83       	std	Y+6, r24	; 0x06
     2ca:	8c e0       	ldi	r24, 0x0C	; 12
     2cc:	8f 83       	std	Y+7, r24	; 0x07
	 LCD_config_pins();
     2ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_config_pins>
	 //SwDelay_ms(10);
	 LCD_send_command(Increment_cursor);
	 LCD_send_command(Cursor_off); // Cursor off
	 */

if(commands[U8_index])
     2d2:	80 91 da 01 	lds	r24, 0x01DA
     2d6:	f8 01       	movw	r30, r16
     2d8:	e8 0f       	add	r30, r24
     2da:	f1 1d       	adc	r31, r1
     2dc:	80 81       	ld	r24, Z
     2de:	88 23       	and	r24, r24
     2e0:	51 f0       	breq	.+20     	; 0x2f6 <LCD_init+0x6c>
{
		LCD_send_command(commands[U8_index]);
     2e2:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>
		U8_index++;
     2e6:	80 91 da 01 	lds	r24, 0x01DA
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	80 93 da 01 	sts	0x01DA, r24
	
	u8_Init_finished=0;	
     2f0:	10 92 fe 01 	sts	0x01FE, r1
     2f4:	03 c0       	rjmp	.+6      	; 0x2fc <LCD_init+0x72>
}else
{
	u8_Init_finished=1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	80 93 fe 01 	sts	0x01FE, r24
}
 
}
     2fc:	29 96       	adiw	r28, 0x09	; 9
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	08 95       	ret

00000312 <LCD_clear>:
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>
 }
     318:	08 95       	ret

0000031a <LCD_send_string>:

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ec 01       	movw	r28, r24
	while(*data)
     320:	88 81       	ld	r24, Y
     322:	88 23       	and	r24, r24
     324:	31 f0       	breq	.+12     	; 0x332 <LCD_send_string+0x18>
 void LCD_clear(void)				//Clears LCD
 {
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
     326:	21 96       	adiw	r28, 0x01	; 1
 {
	while(*data)
	 {
		 LCD_send_char(*data++);
     328:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_send_char>
	 LCD_send_command(Lcd_clear);
 }

 void LCD_send_string(char* data)	//Outputs string to LCD
 {
	while(*data)
     32c:	89 91       	ld	r24, Y+
     32e:	88 23       	and	r24, r24
     330:	d9 f7       	brne	.-10     	; 0x328 <LCD_send_string+0xe>
		 LCD_send_char(*data++);
	 
	 }
	 
	 
 }
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <LCD_goto_xy>:

 void LCD_goto_xy(uint8_t x, uint8_t y)	//Cursor to X Y position
 {
	 uint8_t DDRAMAddr;
	 // remap lines into proper order
	 switch(y)
     338:	62 30       	cpi	r22, 0x02	; 2
     33a:	31 f0       	breq	.+12     	; 0x348 <LCD_goto_xy+0x10>
     33c:	63 30       	cpi	r22, 0x03	; 3
     33e:	31 f0       	breq	.+12     	; 0x34c <LCD_goto_xy+0x14>
     340:	61 30       	cpi	r22, 0x01	; 1
     342:	29 f4       	brne	.+10     	; 0x34e <LCD_goto_xy+0x16>
	 {
		 case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		 case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     344:	80 5c       	subi	r24, 0xC0	; 192
     346:	03 c0       	rjmp	.+6      	; 0x34e <LCD_goto_xy+0x16>
		 case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     348:	8c 5e       	subi	r24, 0xEC	; 236
     34a:	01 c0       	rjmp	.+2      	; 0x34e <LCD_goto_xy+0x16>
		 case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     34c:	8c 5a       	subi	r24, 0xAC	; 172
		 default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	 }
	 // set data address
	 LCD_send_command(1<<LCD_DDRAM | DDRAMAddr);
     34e:	80 68       	ori	r24, 0x80	; 128
     350:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_send_command>

 }
     354:	08 95       	ret

00000356 <reverse>:
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
	 while (i < j)
     35e:	40 17       	cp	r20, r16
     360:	51 07       	cpc	r21, r17
     362:	62 07       	cpc	r22, r18
     364:	73 07       	cpc	r23, r19
     366:	c0 f4       	brcc	.+48     	; 0x398 <reverse+0x42>
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
     368:	d8 01       	movw	r26, r16
     36a:	11 96       	adiw	r26, 0x01	; 1
     36c:	a8 0f       	add	r26, r24
     36e:	b9 1f       	adc	r27, r25
     370:	fc 01       	movw	r30, r24
     372:	e4 0f       	add	r30, r20
     374:	f5 1f       	adc	r31, r21
 {
	 while (i < j)
	 swap(&buffer[i++], &buffer[j--]);
     376:	4f 5f       	subi	r20, 0xFF	; 255
     378:	5f 4f       	sbci	r21, 0xFF	; 255
     37a:	6f 4f       	sbci	r22, 0xFF	; 255
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	01 50       	subi	r16, 0x01	; 1
     380:	10 40       	sbci	r17, 0x00	; 0
     382:	20 40       	sbci	r18, 0x00	; 0
     384:	30 40       	sbci	r19, 0x00	; 0

 /*---Modification----------------------------------------------------------------------------------------------*/

 // inline function to swap two numbers
 inline void swap(char *x, char *y) {
	 char t = *x; *x = *y; *y = t;
     386:	c0 81       	ld	r28, Z
     388:	de 91       	ld	r29, -X
     38a:	d1 93       	st	Z+, r29
     38c:	cc 93       	st	X, r28
 }

 // function to reverse buffer[i..j]
 char* reverse(char *buffer, uint32_t i, uint32_t j)
 {
	 while (i < j)
     38e:	40 17       	cp	r20, r16
     390:	51 07       	cpc	r21, r17
     392:	62 07       	cpc	r22, r18
     394:	73 07       	cpc	r23, r19
     396:	78 f3       	brcs	.-34     	; 0x376 <reverse+0x20>
	 swap(&buffer[i++], &buffer[j--]);

	 return buffer;
 }
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

000003a2 <itoa_>:

 // Iterative function to implement itoa() function in C
 char* itoa_(uint32_t value, char* buffer, uint32_t base)
 {
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	6b 01       	movw	r12, r22
     3c4:	7c 01       	movw	r14, r24
     3c6:	2a 01       	movw	r4, r20
     3c8:	48 01       	movw	r8, r16
     3ca:	59 01       	movw	r10, r18
	 // invalid input
	 if (base < 2 || base > 32)
     3cc:	d9 01       	movw	r26, r18
     3ce:	c8 01       	movw	r24, r16
     3d0:	02 97       	sbiw	r24, 0x02	; 2
     3d2:	a1 09       	sbc	r26, r1
     3d4:	b1 09       	sbc	r27, r1
     3d6:	8f 31       	cpi	r24, 0x1F	; 31
     3d8:	91 05       	cpc	r25, r1
     3da:	a1 05       	cpc	r26, r1
     3dc:	b1 05       	cpc	r27, r1
     3de:	08 f0       	brcs	.+2      	; 0x3e2 <itoa_+0x40>
     3e0:	49 c0       	rjmp	.+146    	; 0x474 <itoa_+0xd2>
	 return buffer;

	 // consider absolute value of number
	 int n = abs(value);
     3e2:	96 01       	movw	r18, r12
     3e4:	dd 20       	and	r13, r13
     3e6:	1c f4       	brge	.+6      	; 0x3ee <itoa_+0x4c>
     3e8:	30 95       	com	r19
     3ea:	21 95       	neg	r18
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255

	 int i = 0;
	 while (n)
     3ee:	21 15       	cp	r18, r1
     3f0:	31 05       	cpc	r19, r1
     3f2:	39 f1       	breq	.+78     	; 0x442 <itoa_+0xa0>
     3f4:	e2 01       	movw	r28, r4
     3f6:	01 e0       	ldi	r16, 0x01	; 1
     3f8:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 int r = n % base;
     3fa:	69 01       	movw	r12, r18
     3fc:	ee 24       	eor	r14, r14
     3fe:	d7 fc       	sbrc	r13, 7
     400:	e0 94       	com	r14
     402:	fe 2c       	mov	r15, r14
     404:	c7 01       	movw	r24, r14
     406:	b6 01       	movw	r22, r12
     408:	a5 01       	movw	r20, r10
     40a:	94 01       	movw	r18, r8
     40c:	0e 94 34 11 	call	0x2268	; 0x2268 <__udivmodsi4>

		 if (r >= 10)
     410:	6a 30       	cpi	r22, 0x0A	; 10
     412:	71 05       	cpc	r23, r1
     414:	24 f0       	brlt	.+8      	; 0x41e <itoa_+0x7c>
		 buffer[i++] = 65 + (r - 10);
     416:	69 5c       	subi	r22, 0xC9	; 201
     418:	68 83       	st	Y, r22
     41a:	38 01       	movw	r6, r16
     41c:	03 c0       	rjmp	.+6      	; 0x424 <itoa_+0x82>
		 else
		 buffer[i++] = 48 + r;
     41e:	60 5d       	subi	r22, 0xD0	; 208
     420:	68 83       	st	Y, r22
     422:	38 01       	movw	r6, r16

		 n = n / base;
     424:	c7 01       	movw	r24, r14
     426:	b6 01       	movw	r22, r12
     428:	a5 01       	movw	r20, r10
     42a:	94 01       	movw	r18, r8
     42c:	0e 94 34 11 	call	0x2268	; 0x2268 <__udivmodsi4>
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	21 96       	adiw	r28, 0x01	; 1

	 // consider absolute value of number
	 int n = abs(value);

	 int i = 0;
	 while (n)
     436:	21 15       	cp	r18, r1
     438:	31 05       	cpc	r19, r1
     43a:	f9 f6       	brne	.-66     	; 0x3fa <itoa_+0x58>

		 n = n / base;
	 }

	 // if number is 0
	 if (i == 0)
     43c:	61 14       	cp	r6, r1
     43e:	71 04       	cpc	r7, r1
     440:	31 f4       	brne	.+12     	; 0x44e <itoa_+0xac>
	 buffer[i++] = '0';
     442:	80 e3       	ldi	r24, 0x30	; 48
     444:	f2 01       	movw	r30, r4
     446:	80 83       	st	Z, r24
     448:	66 24       	eor	r6, r6
     44a:	77 24       	eor	r7, r7
     44c:	63 94       	inc	r6
	 // is preceded with a minus sign (-)
	 // With any other base, value is always considered unsigned
	 if (value < 0 && base == 10)
	 buffer[i++] = '-';

	 buffer[i] = '\0'; // null terminate string
     44e:	f2 01       	movw	r30, r4
     450:	e6 0d       	add	r30, r6
     452:	f7 1d       	adc	r31, r7
     454:	10 82       	st	Z, r1

	 // reverse the string and return it
	 return reverse(buffer, 0, i - 1);
     456:	08 94       	sec
     458:	61 08       	sbc	r6, r1
     45a:	71 08       	sbc	r7, r1
     45c:	83 01       	movw	r16, r6
     45e:	22 27       	eor	r18, r18
     460:	17 fd       	sbrc	r17, 7
     462:	20 95       	com	r18
     464:	32 2f       	mov	r19, r18
     466:	c2 01       	movw	r24, r4
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	ba 01       	movw	r22, r20
     46e:	0e 94 ab 01 	call	0x356	; 0x356 <reverse>
     472:	2c 01       	movw	r4, r24
 }
     474:	84 2d       	mov	r24, r4
     476:	95 2d       	mov	r25, r5
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	bf 90       	pop	r11
     48a:	af 90       	pop	r10
     48c:	9f 90       	pop	r9
     48e:	8f 90       	pop	r8
     490:	7f 90       	pop	r7
     492:	6f 90       	pop	r6
     494:	5f 90       	pop	r5
     496:	4f 90       	pop	r4
     498:	08 95       	ret

0000049a <Motor_Init>:
#include "motor.h"
static uint8_t gsv_is_Started=0;
static uint8_t gsv_is_intialized=0;
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{uint8_t Ret=0;
    switch(Motor_Number)
     49a:	82 30       	cpi	r24, 0x02	; 2
     49c:	79 f0       	breq	.+30     	; 0x4bc <Motor_Init+0x22>
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	c9 f0       	breq	.+50     	; 0x4d4 <Motor_Init+0x3a>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	39 f5       	brne	.+78     	; 0x4f4 <Motor_Init+0x5a>
    {
        case MOTOR_1:
        /*Enable PWM Bit...output*/
        /*IN1*/
        /*IN2*/
			gsv_is_intialized=MOTOR_1;
     4a6:	80 93 db 01 	sts	0x01DB, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     4aa:	82 e8       	ldi	r24, 0x82	; 130
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Pwm_Init>
			Ret=DIO_init(&Motorone);
     4b2:	86 e6       	ldi	r24, 0x66	; 102
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>

			  break;
     4ba:	08 95       	ret

          case MOTOR_2:
				gsv_is_intialized=MOTOR_2;
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	80 93 db 01 	sts	0x01DB, r24
				Ret=Pwm_Init(&PWM_Configuration_1B);
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Pwm_Init>
				Ret=DIO_init(&Motortwo);
     4ca:	83 e6       	ldi	r24, 0x63	; 99
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
				break;
     4d2:	08 95       	ret
				/*IN1*/
				/*IN2*/
				/*ENABLE PWM BIT FOR MOTOR 2*/
				/*IN3*/
				/*IN4*/
				gsv_is_intialized=ALL_MOTOR;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 93 db 01 	sts	0x01DB, r24
			Ret=Pwm_Init(&PWM_Configuration_1A);
     4da:	82 e8       	ldi	r24, 0x82	; 130
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Pwm_Init>
			Ret=Pwm_Init(&PWM_Configuration_1B);
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <Pwm_Init>
			Ret=DIO_init(&ALL_Motor);
     4ea:	80 e6       	ldi	r24, 0x60	; 96
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
				break;
     4f2:	08 95       	ret
			   }
      default:
      Ret=E_NOK;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
return Ret;
}
     4f6:	08 95       	ret

000004f8 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;

  switch(Motor_Number)
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	79 f1       	breq	.+94     	; 0x55a <Motor_Direction+0x62>
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	09 f4       	brne	.+2      	; 0x502 <Motor_Direction+0xa>
     500:	55 c0       	rjmp	.+170    	; 0x5ac <Motor_Direction+0xb4>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	09 f0       	breq	.+2      	; 0x508 <Motor_Direction+0x10>
     506:	99 c0       	rjmp	.+306    	; 0x63a <Motor_Direction+0x142>
  {
  	case MOTOR_1:{
  	switch(Motor_Direction)
     508:	61 30       	cpi	r22, 0x01	; 1
     50a:	31 f0       	breq	.+12     	; 0x518 <Motor_Direction+0x20>
     50c:	61 30       	cpi	r22, 0x01	; 1
     50e:	d0 f0       	brcs	.+52     	; 0x544 <Motor_Direction+0x4c>
     510:	62 30       	cpi	r22, 0x02	; 2
     512:	09 f0       	breq	.+2      	; 0x516 <Motor_Direction+0x1e>
     514:	94 c0       	rjmp	.+296    	; 0x63e <Motor_Direction+0x146>
     516:	0b c0       	rjmp	.+22     	; 0x52e <Motor_Direction+0x36>
  	{
  		case MOTOR_FORWARD:
  		{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	64 e0       	ldi	r22, 0x04	; 4
     51c:	4f ef       	ldi	r20, 0xFF	; 255
     51e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  			Ret=DIO_Write (MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	68 e0       	ldi	r22, 0x08	; 8
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  			break;
     52c:	08 95       	ret
  		}
  		case MOTOR_BACKWARD:
  		{
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	68 e0       	ldi	r22, 0x08	; 8
     532:	4f ef       	ldi	r20, 0xFF	; 255
     534:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
        Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	64 e0       	ldi	r22, 0x04	; 4
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  			break;
     542:	08 95       	ret
  		}
  		case MOTOR_STOP:{Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	64 e0       	ldi	r22, 0x04	; 4
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	68 e0       	ldi	r22, 0x08	; 8
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		break;}
     558:	08 95       	ret
  	}
  		break;
  	}
  	case MOTOR_2:
  	{
  		switch(Motor_Direction)
     55a:	61 30       	cpi	r22, 0x01	; 1
     55c:	31 f0       	breq	.+12     	; 0x56a <Motor_Direction+0x72>
     55e:	61 30       	cpi	r22, 0x01	; 1
     560:	d0 f0       	brcs	.+52     	; 0x596 <Motor_Direction+0x9e>
     562:	62 30       	cpi	r22, 0x02	; 2
     564:	09 f0       	breq	.+2      	; 0x568 <Motor_Direction+0x70>
     566:	6d c0       	rjmp	.+218    	; 0x642 <Motor_Direction+0x14a>
     568:	0b c0       	rjmp	.+22     	; 0x580 <Motor_Direction+0x88>
  		{
  			case MOTOR_FORWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	60 e8       	ldi	r22, 0x80	; 128
     56e:	4f ef       	ldi	r20, 0xFF	; 255
     570:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
          Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	60 e4       	ldi	r22, 0x40	; 64
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  				break;
     57e:	08 95       	ret
  			}
  			case MOTOR_BACKWARD:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	60 e4       	ldi	r22, 0x40	; 64
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	60 e8       	ldi	r22, 0x80	; 128
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  				break;
     594:	08 95       	ret
  			}
  			case MOTOR_STOP:
  			{
  				Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	60 e4       	ldi	r22, 0x40	; 64
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  				Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	60 e8       	ldi	r22, 0x80	; 128
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  				break;
     5aa:	08 95       	ret

  		break;
  	}
  	case ALL_MOTOR:
  	{
  switch(Motor_Direction)
     5ac:	61 30       	cpi	r22, 0x01	; 1
     5ae:	31 f0       	breq	.+12     	; 0x5bc <Motor_Direction+0xc4>
     5b0:	61 30       	cpi	r22, 0x01	; 1
     5b2:	70 f1       	brcs	.+92     	; 0x610 <Motor_Direction+0x118>
     5b4:	62 30       	cpi	r22, 0x02	; 2
     5b6:	09 f0       	breq	.+2      	; 0x5ba <Motor_Direction+0xc2>
     5b8:	46 c0       	rjmp	.+140    	; 0x646 <Motor_Direction+0x14e>
     5ba:	15 c0       	rjmp	.+42     	; 0x5e6 <Motor_Direction+0xee>
  {
  	case MOTOR_FORWARD:
  	{
  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,HIGH);
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	4f ef       	ldi	r20, 0xFF	; 255
     5c2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	68 e0       	ldi	r22, 0x08	; 8
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  	Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	60 e4       	ldi	r22, 0x40	; 64
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,HIGH);
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	60 e8       	ldi	r22, 0x80	; 128
     5de:	4f ef       	ldi	r20, 0xFF	; 255
     5e0:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  		break;
     5e4:	08 95       	ret
  	}
  	case MOTOR_BACKWARD:
  	{

  		Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	64 e0       	ldi	r22, 0x04	; 4
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
      Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,HIGH);
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	68 e0       	ldi	r22, 0x08	; 8
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,HIGH);
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	60 e4       	ldi	r22, 0x40	; 64
     5fe:	4f ef       	ldi	r20, 0xFF	; 255
     600:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  		Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	60 e8       	ldi	r22, 0x80	; 128
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  		break;	}
     60e:	08 95       	ret
  	case MOTOR_STOP:
  	{
  			Ret=DIO_Write(MOTOR_OUT_1A_GPIO,MOTOR_OUT_1A_BIT,LOW);
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	64 e0       	ldi	r22, 0x04	; 4
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2A_GPIO,MOTOR_OUT_2A_BIT,LOW);
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	60 e4       	ldi	r22, 0x40	; 64
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  			Ret=DIO_Write(MOTOR_OUT_1B_GPIO,MOTOR_OUT_1B_BIT,LOW);
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	60 e8       	ldi	r22, 0x80	; 128
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>

  		break;
     638:	08 95       	ret
    }
return Ret;
}

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{uint8_t Ret=0;
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	08 95       	ret
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	08 95       	ret
  			Ret=DIO_Write(MOTOR_OUT_2B_GPIO,MOTOR_OUT_2B_BIT,LOW);

  		break;
  	}
    default:
    Ret=E_NOK;
     646:	81 e0       	ldi	r24, 0x01	; 1



    }
return Ret;
}
     648:	08 95       	ret

0000064a <Motor_Start>:


ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
  uint8_t Ret=0;
switch (Motor_Number) {
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	69 f0       	breq	.+26     	; 0x668 <Motor_Start+0x1e>
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	a9 f0       	breq	.+42     	; 0x67c <Motor_Start+0x32>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	f1 f4       	brne	.+60     	; 0x692 <Motor_Start+0x48>
  case MOTOR_1:
  {gsv_is_Started=MOTOR_1;
     656:	80 93 dc 01 	sts	0x01DC, r24
    Ret=Pwm_Start(PWM_CH1A,Mot_Speed,30);
     65a:	2e e1       	ldi	r18, 0x1E	; 30
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
    break;
     666:	08 95       	ret
  }
  case MOTOR_2:
  {
    gsv_is_Started=MOTOR_2;
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	80 93 dc 01 	sts	0x01DC, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     66e:	2e e1       	ldi	r18, 0x1E	; 30
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
    break;
     67a:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    gsv_is_Started=MOTOR_1 | MOTOR_2;
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	80 93 dc 01 	sts	0x01DC, r24
    Ret=Pwm_Start(PWM_CH1B,Mot_Speed,30);
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	2e e1       	ldi	r18, 0x1E	; 30
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
    break;
     690:	08 95       	ret
  }
  default:
  Ret=E_NOK;
     692:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


return Ret;
}
     694:	08 95       	ret

00000696 <Motor_SpeedUpdate>:
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
  uint8_t Ret=0;

switch (Motor_Number) {
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	79 f0       	breq	.+30     	; 0x6b8 <Motor_SpeedUpdate+0x22>
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	c1 f0       	breq	.+48     	; 0x6ce <Motor_SpeedUpdate+0x38>
     69e:	81 30       	cpi	r24, 0x01	; 1
     6a0:	11 f5       	brne	.+68     	; 0x6e6 <Motor_SpeedUpdate+0x50>
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
     6a2:	80 91 db 01 	lds	r24, 0x01DB
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	01 f5       	brne	.+64     	; 0x6ea <Motor_SpeedUpdate+0x54>
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
     6aa:	2e e1       	ldi	r18, 0x1E	; 30
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
     6b6:	08 95       	ret
    else{Ret=E_NOK;}
    break;
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
     6b8:	80 91 db 01 	lds	r24, 0x01DB
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	b9 f4       	brne	.+46     	; 0x6ee <Motor_SpeedUpdate+0x58>
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
     6c0:	2e e1       	ldi	r18, 0x1E	; 30
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
     6cc:	08 95       	ret
      else{Ret=E_NOK;}
    break;
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
     6ce:	80 91 db 01 	lds	r24, 0x01DB
     6d2:	83 30       	cpi	r24, 0x03	; 3
     6d4:	71 f4       	brne	.+28     	; 0x6f2 <Motor_SpeedUpdate+0x5c>
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	2e e1       	ldi	r18, 0x1E	; 30
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
     6e4:	08 95       	ret
        else{Ret=E_NOK;}
    break;
  }
  default:
  Ret=E_NOK;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	08 95       	ret

switch (Motor_Number) {
  case MOTOR_1:
  { if(gsv_is_intialized == Motor_Number)
    Ret=Pwm_Start(PWM_CH1A,Speed,30);
    else{Ret=E_NOK;}
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	08 95       	ret
  }
  case MOTOR_2:
  {
    if(gsv_is_intialized == Motor_Number)
      Ret=Pwm_Start(PWM_CH1B,Speed,30);
      else{Ret=E_NOK;}
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	08 95       	ret
  }
  case ( MOTOR_1 | MOTOR_2 ) :
  {
    if(gsv_is_intialized == Motor_Number)
        Ret=Pwm_Start(PWM_CH1B,Speed,30);
        else{Ret=E_NOK;}
     6f2:	81 e0       	ldi	r24, 0x01	; 1
  Ret=E_NOK;
  break;
}

return Ret;
}
     6f4:	08 95       	ret

000006f6 <Motor_Stop>:

ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
	uint8_t Ret=0;
	switch(Motor_Number)
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	19 f0       	breq	.+6      	; 0x700 <Motor_Stop+0xa>
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	49 f4       	brne	.+18     	; 0x710 <Motor_Stop+0x1a>
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <Motor_Stop+0x12>
	{
		case MOTOR_1 :
		Ret=Pwm_Stop(PWM_CH1A);
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Pwm_Stop>
		break;
     706:	08 95       	ret
		case MOTOR_2:
		Ret=Pwm_Stop(PWM_CH1B);
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Pwm_Stop>
		break;
     70e:	08 95       	ret
		default:
		Ret=E_NOK;
     710:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}


	return Ret;
}
     712:	08 95       	ret

00000714 <Motor_GetStatus>:

 ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
 {
	 if(gsv_is_intialized == Motor_Number)
     714:	90 91 db 01 	lds	r25, 0x01DB
     718:	98 17       	cp	r25, r24
     71a:	21 f4       	brne	.+8      	; 0x724 <Motor_GetStatus+0x10>
		*Mot_status=1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	fb 01       	movw	r30, r22
     720:	80 83       	st	Z, r24
     722:	08 95       	ret
	 else
	 {
		*Mot_status=0;
     724:	fb 01       	movw	r30, r22
     726:	10 82       	st	Z, r1
	 }
	 
 }
     728:	08 95       	ret

0000072a <SwDelay_ms>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
     72e:	00 97       	sbiw	r24, 0x00	; 0
     730:	a1 05       	cpc	r26, r1
     732:	b1 05       	cpc	r27, r1
     734:	61 f4       	brne	.+24     	; 0x74e <SwDelay_ms+0x24>
     736:	08 95       	ret
     738:	21 50       	subi	r18, 0x01	; 1
		counter_21 = 21;
		while (counter_21)
		{
			/* every 256 branch costs 48 micro seconds */
			counter_256 = 255;
			while (counter_256)
     73a:	f1 f7       	brne	.-4      	; 0x738 <SwDelay_ms+0xe>
     73c:	31 50       	subi	r19, 0x01	; 1
	uint8_t counter_21;
	while (n)
	{
		/* every 21 repetition of the 256 branches costs almost 1 milli second as: 48 micro x 21 = 1.008 milli second*/
		counter_21 = 21;
		while (counter_21)
     73e:	11 f0       	breq	.+4      	; 0x744 <SwDelay_ms+0x1a>
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     740:	24 2f       	mov	r18, r20
     742:	fa cf       	rjmp	.-12     	; 0x738 <SwDelay_ms+0xe>
			{
				counter_256--;
			}
			counter_21--;
		}
		n--;
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	a1 09       	sbc	r26, r1
     748:	b1 09       	sbc	r27, r1
 */
void SwDelay_ms(uint32_t n)
{
	uint8_t counter_256;
	uint8_t counter_21;
	while (n)
     74a:	19 f4       	brne	.+6      	; 0x752 <SwDelay_ms+0x28>
     74c:	08 95       	ret
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the milli-seconds
 */
void SwDelay_ms(uint32_t n)
{
     74e:	55 e1       	ldi	r21, 0x15	; 21
     750:	4f ef       	ldi	r20, 0xFF	; 255
     752:	35 2f       	mov	r19, r21
     754:	f5 cf       	rjmp	.-22     	; 0x740 <SwDelay_ms+0x16>

00000756 <SwDelay_us>:
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
	while (n)
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	a1 05       	cpc	r26, r1
     75e:	b1 05       	cpc	r27, r1
     760:	21 f0       	breq	.+8      	; 0x76a <SwDelay_us+0x14>
	{
		n--;
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	a1 09       	sbc	r26, r1
     766:	b1 09       	sbc	r27, r1
 * 				don't use it with RTOSs
 * @param n: the micro-seconds
 */
void SwDelay_us(uint32_t n)
{
	while (n)
     768:	e1 f7       	brne	.-8      	; 0x762 <SwDelay_us+0xc>
     76a:	08 95       	ret

0000076c <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
Ret=DIO_init(&US_Configuration);
     76c:	89 e6       	ldi	r24, 0x69	; 105
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
     774:	8a e7       	ldi	r24, 0x7A	; 122
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 0c 08 	call	0x1018	; 0x1018 <Icu_Init>
return Ret;
}
     77c:	08 95       	ret

0000077e <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
Ret=DIO_Write(GPIOC,BIT4,HIGH);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	60 e1       	ldi	r22, 0x10	; 16
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	4f ef       	ldi	r20, 0xFF	; 255
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
/***********************************************/
Timer_Start(TIMER_CH0,10);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	6a e0       	ldi	r22, 0x0A	; 10
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <Timer_Start>
/**********************************************/
Ret=DIO_Write(GPIOC,BIT4,LOW);
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	60 e1       	ldi	r22, 0x10	; 16
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_Write>
return Ret;	
}
     7a8:	08 95       	ret

000007aa <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <Us_GetDistance+0xa>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <Us_GetDistance+0xc>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	ae 01       	movw	r20, r28
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	0e 94 3d 08 	call	0x107a	; 0x107a <Icu_ReadTime>
	*Distance=u32l_Time;
     7ca:	29 81       	ldd	r18, Y+1	; 0x01
     7cc:	3a 81       	ldd	r19, Y+2	; 0x02
     7ce:	f8 01       	movw	r30, r16
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
	return Ret;
}
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <G_interrupt_Enable>:
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     7e6:	8f b7       	in	r24, 0x3f	; 63
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	8f bf       	out	0x3f, r24	; 63
}
     7ec:	08 95       	ret

000007ee <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
CLEAR_BIT(PORTB_DIR,2);/*Input*/
     7ee:	ba 98       	cbi	0x17, 2	; 23
SET_BIT(PORTB_DATA,2);/*Pullup*/
     7f0:	c2 9a       	sbi	0x18, 2	; 24
SET_BIT(GICR,INT2);/*EXT2*/
     7f2:	8b b7       	in	r24, 0x3b	; 59
     7f4:	80 62       	ori	r24, 0x20	; 32
     7f6:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);/*Rising*/
     7f8:	84 b7       	in	r24, 0x34	; 52
     7fa:	80 64       	ori	r24, 0x40	; 64
     7fc:	84 bf       	out	0x34, r24	; 52
}
     7fe:	08 95       	ret

00000800 <EX_interrupt_enable1>:
void EX_interrupt_enable1(void)
{
	CLEAR_BIT(PORTD_DIR,3);
     800:	8b 98       	cbi	0x11, 3	; 17
	SET_BIT(PORTD_DATA,3);
     802:	93 9a       	sbi	0x12, 3	; 18
	SET_BIT(GICR,INT1);
     804:	8b b7       	in	r24, 0x3b	; 59
     806:	80 68       	ori	r24, 0x80	; 128
     808:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,2);/*Any logical change*/
     80a:	85 b7       	in	r24, 0x35	; 53
     80c:	84 60       	ori	r24, 0x04	; 4
     80e:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,3);
     810:	85 b7       	in	r24, 0x35	; 53
     812:	87 7f       	andi	r24, 0xF7	; 247
     814:	85 bf       	out	0x35, r24	; 53
	
}
     816:	08 95       	ret

00000818 <EX_interrupt_enable0>:
void EX_interrupt_enable0(void)
{
	CLEAR_BIT(PORTD_DIR,2);
     818:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(PORTD_DATA,2);
     81a:	92 9a       	sbi	0x12, 2	; 18
	SET_BIT(GICR,INT0);
     81c:	8b b7       	in	r24, 0x3b	; 59
     81e:	80 64       	ori	r24, 0x40	; 64
     820:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,0);/*Any logical change*/
     822:	85 b7       	in	r24, 0x35	; 53
     824:	81 60       	ori	r24, 0x01	; 1
     826:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,1);
     828:	85 b7       	in	r24, 0x35	; 53
     82a:	8d 7f       	andi	r24, 0xFD	; 253
     82c:	85 bf       	out	0x35, r24	; 53
	
}
     82e:	08 95       	ret

00000830 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     830:	8f b7       	in	r24, 0x3f	; 63
     832:	8f 77       	andi	r24, 0x7F	; 127
     834:	8f bf       	out	0x3f, r24	; 63
}
     836:	08 95       	ret

00000838 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
  INT0_external_interrupt();
     85a:	e0 91 1b 02 	lds	r30, 0x021B
     85e:	f0 91 1c 02 	lds	r31, 0x021C
     862:	09 95       	icall
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
  INT1_external_interrupt();
     8a8:	e0 91 23 02 	lds	r30, 0x0223
     8ac:	f0 91 24 02 	lds	r31, 0x0224
     8b0:	09 95       	icall
}
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
  INT2_external_interrupt();
     8f6:	e0 91 13 02 	lds	r30, 0x0213
     8fa:	f0 91 14 02 	lds	r31, 0x0214
     8fe:	09 95       	icall
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
TIMER2COMP();
     944:	e0 91 29 02 	lds	r30, 0x0229
     948:	f0 91 2a 02 	lds	r31, 0x022A
     94c:	09 95       	icall
}
     94e:	ff 91       	pop	r31
     950:	ef 91       	pop	r30
     952:	bf 91       	pop	r27
     954:	af 91       	pop	r26
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	7f 91       	pop	r23
     95c:	6f 91       	pop	r22
     95e:	5f 91       	pop	r21
     960:	4f 91       	pop	r20
     962:	3f 91       	pop	r19
     964:	2f 91       	pop	r18
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
  TIMER2OVF();
     992:	e0 91 09 02 	lds	r30, 0x0209
     996:	f0 91 0a 02 	lds	r31, 0x020A
     99a:	09 95       	icall
}
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	0f 90       	pop	r0
     9ba:	1f 90       	pop	r1
     9bc:	18 95       	reti

000009be <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	ef 93       	push	r30
     9de:	ff 93       	push	r31
  TIMER1CAPT();
     9e0:	e0 91 25 02 	lds	r30, 0x0225
     9e4:	f0 91 26 02 	lds	r31, 0x0226
     9e8:	09 95       	icall
}
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     a0c:	1f 92       	push	r1
     a0e:	0f 92       	push	r0
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	0f 92       	push	r0
     a14:	11 24       	eor	r1, r1
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
TIMER1COMPA();
     a2e:	e0 91 0f 02 	lds	r30, 0x020F
     a32:	f0 91 10 02 	lds	r31, 0x0210
     a36:	09 95       	icall
}
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
  TIMER1COMPB();
     a7c:	e0 91 0d 02 	lds	r30, 0x020D
     a80:	f0 91 0e 02 	lds	r31, 0x020E
     a84:	09 95       	icall
}
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	0f 90       	pop	r0
     aa4:	1f 90       	pop	r1
     aa6:	18 95       	reti

00000aa8 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
  TIMER1OVF();
     aca:	e0 91 27 02 	lds	r30, 0x0227
     ace:	f0 91 28 02 	lds	r31, 0x0228
     ad2:	09 95       	icall
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	2f 93       	push	r18
     b02:	3f 93       	push	r19
     b04:	4f 93       	push	r20
     b06:	5f 93       	push	r21
     b08:	6f 93       	push	r22
     b0a:	7f 93       	push	r23
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31

  TIMER0COMP();
     b18:	e0 91 1f 02 	lds	r30, 0x021F
     b1c:	f0 91 20 02 	lds	r31, 0x0220
     b20:	09 95       	icall
}
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	bf 91       	pop	r27
     b28:	af 91       	pop	r26
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	7f 91       	pop	r23
     b30:	6f 91       	pop	r22
     b32:	5f 91       	pop	r21
     b34:	4f 91       	pop	r20
     b36:	3f 91       	pop	r19
     b38:	2f 91       	pop	r18
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31

  TIMER0OVF_INT();
     b66:	e0 91 6c 00 	lds	r30, 0x006C
     b6a:	f0 91 6d 00 	lds	r31, 0x006D
     b6e:	09 95       	icall
}
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
  SPI_STC();
     bb4:	e0 91 11 02 	lds	r30, 0x0211
     bb8:	f0 91 12 02 	lds	r31, 0x0212
     bbc:	09 95       	icall
}
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
  USART_RXC();
     c02:	e0 91 07 02 	lds	r30, 0x0207
     c06:	f0 91 08 02 	lds	r31, 0x0208
     c0a:	09 95       	icall
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
  USART_UDRE();
     c50:	e0 91 21 02 	lds	r30, 0x0221
     c54:	f0 91 22 02 	lds	r31, 0x0222
     c58:	09 95       	icall
}
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
  USART_TXC();
     c9e:	e0 91 1d 02 	lds	r30, 0x021D
     ca2:	f0 91 1e 02 	lds	r31, 0x021E
     ca6:	09 95       	icall
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
  ADC_INT();
     cec:	e0 91 17 02 	lds	r30, 0x0217
     cf0:	f0 91 18 02 	lds	r31, 0x0218
     cf4:	09 95       	icall
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
  EE_RDY();
     d3a:	e0 91 19 02 	lds	r30, 0x0219
     d3e:	f0 91 1a 02 	lds	r31, 0x021A
     d42:	09 95       	icall
}
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     d66:	1f 92       	push	r1
     d68:	0f 92       	push	r0
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	0f 92       	push	r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f 93       	push	r18
     d72:	3f 93       	push	r19
     d74:	4f 93       	push	r20
     d76:	5f 93       	push	r21
     d78:	6f 93       	push	r22
     d7a:	7f 93       	push	r23
     d7c:	8f 93       	push	r24
     d7e:	9f 93       	push	r25
     d80:	af 93       	push	r26
     d82:	bf 93       	push	r27
     d84:	ef 93       	push	r30
     d86:	ff 93       	push	r31
  ANA_COMP();
     d88:	e0 91 15 02 	lds	r30, 0x0215
     d8c:	f0 91 16 02 	lds	r31, 0x0216
     d90:	09 95       	icall
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
  TWI_I2C();
     dd6:	e0 91 05 02 	lds	r30, 0x0205
     dda:	f0 91 06 02 	lds	r31, 0x0206
     dde:	09 95       	icall
}
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
  SPM_RDY();
     e24:	e0 91 0b 02 	lds	r30, 0x020B
     e28:	f0 91 0c 02 	lds	r31, 0x020C
     e2c:	09 95       	icall
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <DIO_init>:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
     e50:	fc 01       	movw	r30, r24
	uint8_t RET=0;
	if (DIO_info== NULL)
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_init+0x8>
     e56:	50 c0       	rjmp	.+160    	; 0xef8 <DIO_init+0xa8>
	{
		RET=NULL_PTR+DIO_MODULE;
		
	}else{
		switch(DIO_info->dir)
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	88 23       	and	r24, r24
     e5c:	21 f0       	breq	.+8      	; 0xe66 <DIO_init+0x16>
     e5e:	8f 3f       	cpi	r24, 0xFF	; 255
     e60:	09 f0       	breq	.+2      	; 0xe64 <DIO_init+0x14>
     e62:	4c c0       	rjmp	.+152    	; 0xefc <DIO_init+0xac>
     e64:	27 c0       	rjmp	.+78     	; 0xeb4 <DIO_init+0x64>
			{	
		case INPUT:
		     	switch(DIO_info ->GPIO)
     e66:	80 81       	ld	r24, Z
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	79 f0       	breq	.+30     	; 0xe8a <DIO_init+0x3a>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	30 f0       	brcs	.+12     	; 0xe7c <DIO_init+0x2c>
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 f0       	breq	.+36     	; 0xe98 <DIO_init+0x48>
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	09 f0       	breq	.+2      	; 0xe7a <DIO_init+0x2a>
     e78:	43 c0       	rjmp	.+134    	; 0xf00 <DIO_init+0xb0>
     e7a:	15 c0       	rjmp	.+42     	; 0xea6 <DIO_init+0x56>
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
     e7c:	9a b3       	in	r25, 0x1a	; 26
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	80 95       	com	r24
     e82:	89 23       	and	r24, r25
     e84:	8a bb       	out	0x1a, r24	; 26
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     e86:	80 e0       	ldi	r24, 0x00	; 0
		case INPUT:
		     	switch(DIO_info ->GPIO)
		 		{
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
     e88:	08 95       	ret
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
     e8a:	97 b3       	in	r25, 0x17	; 23
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	80 95       	com	r24
     e90:	89 23       	and	r24, r25
     e92:	87 bb       	out	0x17, r24	; 23
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     e94:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOA:
					PORTA_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
     e96:	08 95       	ret
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
     e98:	94 b3       	in	r25, 0x14	; 20
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	80 95       	com	r24
     e9e:	89 23       	and	r24, r25
     ea0:	84 bb       	out	0x14, r24	; 20
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOB:
					PORTB_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
     ea4:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
     ea6:	91 b3       	in	r25, 0x11	; 17
     ea8:	81 81       	ldd	r24, Z+1	; 0x01
     eaa:	80 95       	com	r24
     eac:	89 23       	and	r24, r25
     eae:	81 bb       	out	0x11, r24	; 17
					break;
					RET=E_OK;
				}
				RET=E_OK;
     eb0:	80 e0       	ldi	r24, 0x00	; 0
					case GPIOC:
					PORTC_DIR &=(~(DIO_info->pins))	;
					break;
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
     eb2:	08 95       	ret
				}
				RET=E_OK;
				break;

		case OUTPUT:
			  switch(DIO_info ->GPIO)
     eb4:	80 81       	ld	r24, Z
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	69 f0       	breq	.+26     	; 0xed4 <DIO_init+0x84>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	28 f0       	brcs	.+10     	; 0xec8 <DIO_init+0x78>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	79 f0       	breq	.+30     	; 0xee0 <DIO_init+0x90>
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	f9 f4       	brne	.+62     	; 0xf04 <DIO_init+0xb4>
     ec6:	12 c0       	rjmp	.+36     	; 0xeec <DIO_init+0x9c>
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
     ec8:	9a b3       	in	r25, 0x1a	; 26
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	89 2b       	or	r24, r25
     ece:	8a bb       	out	0x1a, r24	; 26
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
		case OUTPUT:
			  switch(DIO_info ->GPIO)
			  {
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
     ed2:	08 95       	ret
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
     ed4:	97 b3       	in	r25, 0x17	; 23
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	89 2b       	or	r24, r25
     eda:	87 bb       	out	0x17, r24	; 23
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     edc:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOA:
				  PORTA_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
     ede:	08 95       	ret
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
     ee0:	94 b3       	in	r25, 0x14	; 20
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	89 2b       	or	r24, r25
     ee6:	84 bb       	out	0x14, r24	; 20
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOB:
				  PORTB_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
     eea:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
     eec:	91 b3       	in	r25, 0x11	; 17
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	89 2b       	or	r24, r25
     ef2:	81 bb       	out	0x11, r24	; 17
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
				  case GPIOC:
				  PORTC_DIR |=(DIO_info->pins)	;
				  break;
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
     ef6:	08 95       	ret
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{	
	uint8_t RET=0;
	if (DIO_info== NULL)
	{
		RET=NULL_PTR+DIO_MODULE;
     ef8:	86 e1       	ldi	r24, 0x16	; 22
     efa:	08 95       	ret
			  }
			  RET=E_OK;
			  break;

			default:
			RET=E_NOK;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	08 95       	ret
					case GPIOD:
					PORTD_DIR &=(~(DIO_info->pins))	;
					break;
					RET=E_OK;
				}
				RET=E_OK;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	08 95       	ret
				  case GPIOD:
				  PORTD_DIR |=(DIO_info->pins)	;
				  break;
				  RET=E_OK;
			  }
			  RET=E_OK;
     f04:	80 e0       	ldi	r24, 0x00	; 0
			RET=E_NOK;
	}
	
}	
return RET;
}
     f06:	08 95       	ret

00000f08 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=0;
switch(value){
     f08:	44 23       	and	r20, r20
     f0a:	21 f0       	breq	.+8      	; 0xf14 <DIO_Write+0xc>
     f0c:	4f 3f       	cpi	r20, 0xFF	; 255
     f0e:	09 f0       	breq	.+2      	; 0xf12 <DIO_Write+0xa>
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <DIO_Write+0x88>
     f12:	21 c0       	rjmp	.+66     	; 0xf56 <DIO_Write+0x4e>
case LOW:
{
switch (GPIO)
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	69 f0       	breq	.+26     	; 0xf32 <DIO_Write+0x2a>
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	28 f0       	brcs	.+10     	; 0xf26 <DIO_Write+0x1e>
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	79 f0       	breq	.+30     	; 0xf3e <DIO_Write+0x36>
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	c1 f5       	brne	.+112    	; 0xf94 <DIO_Write+0x8c>
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <DIO_Write+0x42>
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
     f26:	8b b3       	in	r24, 0x1b	; 27
     f28:	60 95       	com	r22
     f2a:	68 23       	and	r22, r24
     f2c:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     f2e:	80 e0       	ldi	r24, 0x00	; 0
{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA &= ~(pins);   // 0b01111111
Ret=E_OK;
	break;
     f30:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(pins);
     f32:	88 b3       	in	r24, 0x18	; 24
     f34:	60 95       	com	r22
     f36:	68 23       	and	r22, r24
     f38:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA &= ~(pins);
Ret=E_OK;
	break;
     f3c:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(pins);
     f3e:	85 b3       	in	r24, 0x15	; 21
     f40:	60 95       	com	r22
     f42:	68 23       	and	r22, r24
     f44:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     f46:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA &= ~(pins);
Ret=E_OK;
	break;
     f48:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(pins);
     f4a:	82 b3       	in	r24, 0x12	; 18
     f4c:	60 95       	com	r22
     f4e:	68 23       	and	r22, r24
     f50:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     f52:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA &= ~(pins);
	Ret=E_OK;
	break;
     f54:	08 95       	ret
	}
Ret=E_OK;
break;
}
case HIGH:{
switch (GPIO)
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	61 f0       	breq	.+24     	; 0xf72 <DIO_Write+0x6a>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	28 f0       	brcs	.+10     	; 0xf68 <DIO_Write+0x60>
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	69 f0       	breq	.+26     	; 0xf7c <DIO_Write+0x74>
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	c9 f4       	brne	.+50     	; 0xf98 <DIO_Write+0x90>
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <DIO_Write+0x7e>
{	case GPIOA:
	PORTA_DATA |=(pins);
     f68:	8b b3       	in	r24, 0x1b	; 27
     f6a:	68 2b       	or	r22, r24
     f6c:	6b bb       	out	0x1b, r22	; 27
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
case HIGH:{
switch (GPIO)
{	case GPIOA:
	PORTA_DATA |=(pins);
Ret=E_OK;
	break;
     f70:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(pins);
     f72:	88 b3       	in	r24, 0x18	; 24
     f74:	68 2b       	or	r22, r24
     f76:	68 bb       	out	0x18, r22	; 24
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     f78:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOB:
	PORTB_DATA |=(pins);
Ret=E_OK;
	break;
     f7a:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(pins);
     f7c:	85 b3       	in	r24, 0x15	; 21
     f7e:	68 2b       	or	r22, r24
     f80:	65 bb       	out	0x15, r22	; 21
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     f82:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOC:
	PORTC_DATA |=(pins);
Ret=E_OK;
	break;
     f84:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(pins);
     f86:	82 b3       	in	r24, 0x12	; 18
     f88:	68 2b       	or	r22, r24
     f8a:	62 bb       	out	0x12, r22	; 18
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
Ret=E_OK;
	break;
	case GPIOD:
	PORTD_DATA |=(pins);
Ret=E_OK;
	break;
     f8e:	08 95       	ret
}
Ret=E_OK;
break;
}
default:
Ret=E_NOK;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
	}
Ret=E_OK;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret
	break;
	default:
	Ret=E_NOK;
	break;
}
Ret=E_OK;
     f98:	80 e0       	ldi	r24, 0x00	; 0
default:
Ret=E_NOK;
break;
}
return Ret;
}
     f9a:	08 95       	ret

00000f9c <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     f9c:	fa 01       	movw	r30, r20

switch (GPIO)
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	59 f0       	breq	.+22     	; 0xfb8 <DIO_Read+0x1c>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	28 f0       	brcs	.+10     	; 0xfb0 <DIO_Read+0x14>
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	59 f0       	breq	.+22     	; 0xfc0 <DIO_Read+0x24>
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	81 f4       	brne	.+32     	; 0xfce <DIO_Read+0x32>
     fae:	0c c0       	rjmp	.+24     	; 0xfc8 <DIO_Read+0x2c>
{	case GPIOA:
	*data=(PORTA_PIN & pins);
     fb0:	89 b3       	in	r24, 0x19	; 25
     fb2:	68 23       	and	r22, r24
     fb4:	60 83       	st	Z, r22
	break;
     fb6:	0b c0       	rjmp	.+22     	; 0xfce <DIO_Read+0x32>
	case GPIOB:
	*data=(PORTB_PIN & pins);
     fb8:	86 b3       	in	r24, 0x16	; 22
     fba:	68 23       	and	r22, r24
     fbc:	60 83       	st	Z, r22
	break;
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <DIO_Read+0x32>
	case GPIOC:
	*data=(PORTC_PIN & pins);
     fc0:	83 b3       	in	r24, 0x13	; 19
     fc2:	68 23       	and	r22, r24
     fc4:	60 83       	st	Z, r22
	break;
     fc6:	03 c0       	rjmp	.+6      	; 0xfce <DIO_Read+0x32>
	case GPIOD:
	*data=(PORTD_PIN & pins);
     fc8:	80 b3       	in	r24, 0x10	; 16
     fca:	68 23       	and	r22, r24
     fcc:	60 83       	st	Z, r22
	break;
}
if(*data > 0)
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <DIO_Read+0x3c>
{
	*data = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 83       	st	Z, r24
}


}
     fd8:	08 95       	ret

00000fda <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
uint8_t ret=0;
	switch (GPIO)
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	61 f0       	breq	.+24     	; 0xff6 <DIO_Toggle+0x1c>
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	28 f0       	brcs	.+10     	; 0xfec <DIO_Toggle+0x12>
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	69 f0       	breq	.+26     	; 0x1000 <DIO_Toggle+0x26>
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	a9 f4       	brne	.+42     	; 0x1014 <DIO_Toggle+0x3a>
     fea:	0f c0       	rjmp	.+30     	; 0x100a <DIO_Toggle+0x30>
	{	case GPIOA:
		PORTA_DATA ^=(pins);
     fec:	8b b3       	in	r24, 0x1b	; 27
     fee:	68 27       	eor	r22, r24
     ff0:	6b bb       	out	0x1b, r22	; 27
		ret=E_OK;
     ff2:	80 e0       	ldi	r24, 0x00	; 0
		break;
     ff4:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^=(pins);
     ff6:	88 b3       	in	r24, 0x18	; 24
     ff8:	68 27       	eor	r22, r24
     ffa:	68 bb       	out	0x18, r22	; 24
ret=E_OK;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
		break;
     ffe:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^=(pins);
    1000:	85 b3       	in	r24, 0x15	; 21
    1002:	68 27       	eor	r22, r24
    1004:	65 bb       	out	0x15, r22	; 21
ret=E_OK;
    1006:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1008:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^=(pins);
    100a:	82 b3       	in	r24, 0x12	; 18
    100c:	68 27       	eor	r22, r24
    100e:	62 bb       	out	0x12, r22	; 18
ret=E_OK;
    1010:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1012:	08 95       	ret
		default:
		ret=E_NOK;
    1014:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

return ret;
}
    1016:	08 95       	ret

00001018 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
	uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
    101e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
    1022:	88 81       	ld	r24, Y
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	41 f0       	breq	.+16     	; 0x1038 <Icu_Init+0x20>
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	18 f0       	brcs	.+6      	; 0x1032 <Icu_Init+0x1a>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	49 f4       	brne	.+18     	; 0x1042 <Icu_Init+0x2a>
    1030:	06 c0       	rjmp	.+12     	; 0x103e <Icu_Init+0x26>
{
case ICU_CH0:
EX_interrupt_enable0();
    1032:	0e 94 0c 04 	call	0x818	; 0x818 <EX_interrupt_enable0>
break;
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <Icu_Init+0x2a>
case ICU_CH1:
EX_interrupt_enable1();
    1038:	0e 94 00 04 	call	0x800	; 0x800 <EX_interrupt_enable1>
break;
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <Icu_Init+0x2a>
case ICU_CH2:
EX_interrupt_enable2();
    103e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <EX_interrupt_enable2>
break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	51 f0       	breq	.+20     	; 0x105c <Icu_Init+0x44>
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	18 f0       	brcs	.+6      	; 0x1052 <Icu_Init+0x3a>
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	89 f4       	brne	.+34     	; 0x1072 <Icu_Init+0x5a>
    1050:	0c c0       	rjmp	.+24     	; 0x106a <Icu_Init+0x52>
{
	case ICU_TIMER_CH0:
		//Enable Timer0
		TCCR0=0x05;
    1052:	85 e0       	ldi	r24, 0x05	; 5
    1054:	83 bf       	out	0x33, r24	; 51
		TIMSK=0x01;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 bf       	out	0x39, r24	; 57
		break;
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <Icu_Init+0x5a>
	case ICU_TIMER_CH1:
		TCCR1=0x0005;
    105c:	85 e0       	ldi	r24, 0x05	; 5
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9f bd       	out	0x2f, r25	; 47
    1062:	8e bd       	out	0x2e, r24	; 46
		TIMSK=0x04;
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	89 bf       	out	0x39, r24	; 57
		break;
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <Icu_Init+0x5a>
	case ICU_TIMER_CH2:
		TCCR2=0x07;
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	85 bd       	out	0x25, r24	; 37
		TIMSK=0x04;
    106e:	84 e0       	ldi	r24, 0x04	; 4
    1070:	89 bf       	out	0x39, r24	; 57
		break;
}

return Ret;
}
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	49 f0       	breq	.+18     	; 0x1094 <Icu_ReadTime+0x1a>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	18 f0       	brcs	.+6      	; 0x108c <Icu_ReadTime+0x12>
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	71 f4       	brne	.+28     	; 0x10a6 <Icu_ReadTime+0x2c>
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <Icu_ReadTime+0x26>
{
	case ICU_TIMER_CH0:
	TCCR0|=0x03;
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	83 60       	ori	r24, 0x03	; 3
    1090:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
	break;
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH1:
	TCCR1|=0x0005;
    1094:	8e b5       	in	r24, 0x2e	; 46
    1096:	9f b5       	in	r25, 0x2f	; 47
    1098:	85 60       	ori	r24, 0x05	; 5
    109a:	9f bd       	out	0x2f, r25	; 47
    109c:	8e bd       	out	0x2e, r24	; 46
	Ret=E_OK;	
	break;
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <Icu_ReadTime+0x2c>
	case ICU_TIMER_CH2:
	TCCR2|=0x07;
    10a0:	85 b5       	in	r24, 0x25	; 37
    10a2:	87 60       	ori	r24, 0x07	; 7
    10a4:	85 bd       	out	0x25, r24	; 37
	default:
	Ret=E_NOK;
	break;
}  

switch(Icu_EdgeToEdge)
    10a6:	61 30       	cpi	r22, 0x01	; 1
    10a8:	01 f1       	breq	.+64     	; 0x10ea <Icu_ReadTime+0x70>
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	18 f0       	brcs	.+6      	; 0x10b4 <Icu_ReadTime+0x3a>
    10ae:	62 30       	cpi	r22, 0x02	; 2
    10b0:	d1 f5       	brne	.+116    	; 0x1126 <Icu_ReadTime+0xac>
    10b2:	2a c0       	rjmp	.+84     	; 0x1108 <Icu_ReadTime+0x8e>
{
	case ICU_RISE_TO_RISE:
	*Icu_Time=Timer_High+Timer_Low;
    10b4:	80 91 e1 01 	lds	r24, 0x01E1
    10b8:	90 91 e2 01 	lds	r25, 0x01E2
    10bc:	a0 91 e3 01 	lds	r26, 0x01E3
    10c0:	b0 91 e4 01 	lds	r27, 0x01E4
    10c4:	00 91 dd 01 	lds	r16, 0x01DD
    10c8:	10 91 de 01 	lds	r17, 0x01DE
    10cc:	20 91 df 01 	lds	r18, 0x01DF
    10d0:	30 91 e0 01 	lds	r19, 0x01E0
    10d4:	80 0f       	add	r24, r16
    10d6:	91 1f       	adc	r25, r17
    10d8:	a2 1f       	adc	r26, r18
    10da:	b3 1f       	adc	r27, r19
    10dc:	fa 01       	movw	r30, r20
    10de:	80 83       	st	Z, r24
    10e0:	91 83       	std	Z+1, r25	; 0x01
    10e2:	a2 83       	std	Z+2, r26	; 0x02
    10e4:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
	break;
    10e8:	1f c0       	rjmp	.+62     	; 0x1128 <Icu_ReadTime+0xae>
	case ICU_RISE_TO_FALL:
	*Icu_Time=Timer_High;
    10ea:	80 91 e1 01 	lds	r24, 0x01E1
    10ee:	90 91 e2 01 	lds	r25, 0x01E2
    10f2:	a0 91 e3 01 	lds	r26, 0x01E3
    10f6:	b0 91 e4 01 	lds	r27, 0x01E4
    10fa:	fa 01       	movw	r30, r20
    10fc:	80 83       	st	Z, r24
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	a2 83       	std	Z+2, r26	; 0x02
    1102:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    1104:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <Icu_ReadTime+0xae>
	case ICU_FALE_TO_RISE:
	*Icu_Time=Timer_Low;
    1108:	80 91 dd 01 	lds	r24, 0x01DD
    110c:	90 91 de 01 	lds	r25, 0x01DE
    1110:	a0 91 df 01 	lds	r26, 0x01DF
    1114:	b0 91 e0 01 	lds	r27, 0x01E0
    1118:	fa 01       	movw	r30, r20
    111a:	80 83       	st	Z, r24
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	a2 83       	std	Z+2, r26	; 0x02
    1120:	b3 83       	std	Z+3, r27	; 0x03
	Ret=E_OK;
    1122:	80 e0       	ldi	r24, 0x00	; 0
	break;
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <Icu_ReadTime+0xae>
	
	default:
	Ret=E_NOK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <EXTI>:
void EXTI(void)
{	u32_sgv_TimerVal=(uint32_t)TCNT0+((uint32_t)u8_ovf_happend*255);
    112e:	cf 93       	push	r28
    1130:	c2 b7       	in	r28, 0x32	; 50
    1132:	60 91 ed 01 	lds	r22, 0x01ED
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2f ef       	ldi	r18, 0xFF	; 255
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 15 11 	call	0x222a	; 0x222a <__mulsi3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8c 0f       	add	r24, r28
    114e:	91 1d       	adc	r25, r1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
    1154:	80 93 ee 01 	sts	0x01EE, r24
    1158:	90 93 ef 01 	sts	0x01EF, r25
    115c:	a0 93 f0 01 	sts	0x01F0, r26
    1160:	b0 93 f1 01 	sts	0x01F1, r27
	u8_ovf_happend=0;
    1164:	10 92 ed 01 	sts	0x01ED, r1
		if(READBIT(MCUCSR,6))
    1168:	84 b7       	in	r24, 0x34	; 52
    116a:	82 95       	swap	r24
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	83 70       	andi	r24, 0x03	; 3
    1172:	80 ff       	sbrs	r24, 0
    1174:	30 c0       	rjmp	.+96     	; 0x11d6 <EXTI+0xa8>
		{
		u32_Time_rising_edge=u32_sgv_TimerVal;
    1176:	80 91 ee 01 	lds	r24, 0x01EE
    117a:	90 91 ef 01 	lds	r25, 0x01EF
    117e:	a0 91 f0 01 	lds	r26, 0x01F0
    1182:	b0 91 f1 01 	lds	r27, 0x01F1
    1186:	80 93 e9 01 	sts	0x01E9, r24
    118a:	90 93 ea 01 	sts	0x01EA, r25
    118e:	a0 93 eb 01 	sts	0x01EB, r26
    1192:	b0 93 ec 01 	sts	0x01EC, r27
		Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
    1196:	80 91 e9 01 	lds	r24, 0x01E9
    119a:	90 91 ea 01 	lds	r25, 0x01EA
    119e:	a0 91 eb 01 	lds	r26, 0x01EB
    11a2:	b0 91 ec 01 	lds	r27, 0x01EC
    11a6:	40 91 e5 01 	lds	r20, 0x01E5
    11aa:	50 91 e6 01 	lds	r21, 0x01E6
    11ae:	60 91 e7 01 	lds	r22, 0x01E7
    11b2:	70 91 e8 01 	lds	r23, 0x01E8
    11b6:	84 1b       	sub	r24, r20
    11b8:	95 0b       	sbc	r25, r21
    11ba:	a6 0b       	sbc	r26, r22
    11bc:	b7 0b       	sbc	r27, r23
    11be:	80 93 dd 01 	sts	0x01DD, r24
    11c2:	90 93 de 01 	sts	0x01DE, r25
    11c6:	a0 93 df 01 	sts	0x01DF, r26
    11ca:	b0 93 e0 01 	sts	0x01E0, r27
		/*****************************************/	
		CLEAR_BIT(MCUCSR,6);   /*Make it falling*/
    11ce:	84 b7       	in	r24, 0x34	; 52
    11d0:	8f 7b       	andi	r24, 0xBF	; 191
    11d2:	84 bf       	out	0x34, r24	; 52
    11d4:	2f c0       	rjmp	.+94     	; 0x1234 <EXTI+0x106>
		/***************************************/
		}else{
			u32_Time_faling_edge=u32_sgv_TimerVal;
    11d6:	80 91 ee 01 	lds	r24, 0x01EE
    11da:	90 91 ef 01 	lds	r25, 0x01EF
    11de:	a0 91 f0 01 	lds	r26, 0x01F0
    11e2:	b0 91 f1 01 	lds	r27, 0x01F1
    11e6:	80 93 e5 01 	sts	0x01E5, r24
    11ea:	90 93 e6 01 	sts	0x01E6, r25
    11ee:	a0 93 e7 01 	sts	0x01E7, r26
    11f2:	b0 93 e8 01 	sts	0x01E8, r27
			Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
    11f6:	80 91 e5 01 	lds	r24, 0x01E5
    11fa:	90 91 e6 01 	lds	r25, 0x01E6
    11fe:	a0 91 e7 01 	lds	r26, 0x01E7
    1202:	b0 91 e8 01 	lds	r27, 0x01E8
    1206:	40 91 e9 01 	lds	r20, 0x01E9
    120a:	50 91 ea 01 	lds	r21, 0x01EA
    120e:	60 91 eb 01 	lds	r22, 0x01EB
    1212:	70 91 ec 01 	lds	r23, 0x01EC
    1216:	84 1b       	sub	r24, r20
    1218:	95 0b       	sbc	r25, r21
    121a:	a6 0b       	sbc	r26, r22
    121c:	b7 0b       	sbc	r27, r23
    121e:	80 93 e1 01 	sts	0x01E1, r24
    1222:	90 93 e2 01 	sts	0x01E2, r25
    1226:	a0 93 e3 01 	sts	0x01E3, r26
    122a:	b0 93 e4 01 	sts	0x01E4, r27
			/*********************************/	
			SET_BIT(MCUCSR,6);		/*Make it Rising*/
    122e:	84 b7       	in	r24, 0x34	; 52
    1230:	80 64       	ori	r24, 0x40	; 64
    1232:	84 bf       	out	0x34, r24	; 52
			/********************************/
			}	

//UDR=Timer_High;
}/*
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	static uint8_t u8_Button_press[3];
static uint8_t u8_S_button_status[3];
switch(en_butotn_id)
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	c1 f0       	breq	.+48     	; 0x126c <pushButtonGetStatus+0x34>
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	18 f0       	brcs	.+6      	; 0x1246 <pushButtonGetStatus+0xe>
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	d1 f5       	brne	.+116    	; 0x12b8 <pushButtonGetStatus+0x80>
    1244:	26 c0       	rjmp	.+76     	; 0x1292 <pushButtonGetStatus+0x5a>
{
case BTN_0:
{DIO_Read(BTN_0_GPIO,BTN_0_BIT,&(u8_Button_press[0]));
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	60 e1       	ldi	r22, 0x10	; 16
    124a:	42 ef       	ldi	r20, 0xF2	; 242
    124c:	51 e0       	ldi	r21, 0x01	; 1
    124e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_Read>
if( u8_Button_press[0]== Pressed)
    1252:	80 91 f2 01 	lds	r24, 0x01F2
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	81 f5       	brne	.+96     	; 0x12ba <pushButtonGetStatus+0x82>
{ 
	(u8_S_button_status[0])++;
    125a:	90 91 f5 01 	lds	r25, 0x01F5
    125e:	9f 5f       	subi	r25, 0xFF	; 255
    1260:	90 93 f5 01 	sts	0x01F5, r25
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    1264:	93 33       	cpi	r25, 0x33	; 51
    1266:	70 f5       	brcc	.+92     	; 0x12c4 <pushButtonGetStatus+0x8c>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_1:
{DIO_Read(BTN_1_GPIO,BTN_1_BIT,&(u8_Button_press[1]));
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	64 e0       	ldi	r22, 0x04	; 4
    1270:	43 ef       	ldi	r20, 0xF3	; 243
    1272:	51 e0       	ldi	r21, 0x01	; 1
    1274:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_Read>
if( u8_Button_press[1] == Pressed)
    1278:	80 91 f3 01 	lds	r24, 0x01F3
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	f9 f4       	brne	.+62     	; 0x12be <pushButtonGetStatus+0x86>
{
	(u8_S_button_status[0])++;
    1280:	90 91 f5 01 	lds	r25, 0x01F5
    1284:	9f 5f       	subi	r25, 0xFF	; 255
    1286:	90 93 f5 01 	sts	0x01F5, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    128a:	93 33       	cpi	r25, 0x33	; 51
    128c:	d8 f4       	brcc	.+54     	; 0x12c4 <pushButtonGetStatus+0x8c>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	08 95       	ret
	else {return Released;}
}else{return Released;}
break;
}
case BTN_2:
{DIO_Read(BTN_2_GPIO,BTN_2_BIT,&(u8_Button_press[2]));
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	64 e0       	ldi	r22, 0x04	; 4
    1296:	44 ef       	ldi	r20, 0xF4	; 244
    1298:	51 e0       	ldi	r21, 0x01	; 1
    129a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <DIO_Read>
if((u8_Button_press[2])== Pressed)
    129e:	80 91 f4 01 	lds	r24, 0x01F4
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	71 f4       	brne	.+28     	; 0x12c2 <pushButtonGetStatus+0x8a>
{	(u8_S_button_status[1])++;
    12a6:	90 91 f6 01 	lds	r25, 0x01F6
    12aa:	9f 5f       	subi	r25, 0xFF	; 255
    12ac:	90 93 f6 01 	sts	0x01F6, r25
	(u8_S_button_status[0])++;
	/************************************************************************/
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
	return Pressed;
    12b0:	95 31       	cpi	r25, 0x15	; 21
    12b2:	40 f4       	brcc	.+16     	; 0x12c4 <pushButtonGetStatus+0x8c>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret
    12b8:	08 95       	ret
	else {return Released;}
}else{return Released;}
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[0]) > 50)
return Pressed;
	else {return Released;}
}else{return Released;}
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret
	/*         Debouncing Using Counting Algorithm			                */
	/************************************************************************/
	if( (u8_S_button_status[1]) > 20)
	return Pressed;
else {return Released;}
}else{return Released;}
    12c2:	80 e0       	ldi	r24, 0x00	; 0


	}


}
    12c4:	08 95       	ret

000012c6 <Pwm_Init>:
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{uint8_t Ret=0;
    12c6:	fc 01       	movw	r30, r24
	switch(Pwm_Cfg->Channel)
    12c8:	80 81       	ld	r24, Z
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <Pwm_Init+0x20>
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	28 f0       	brcs	.+10     	; 0x12dc <Pwm_Init+0x16>
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <Pwm_Init+0x30>
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	d9 f4       	brne	.+54     	; 0x1310 <Pwm_Init+0x4a>
    12da:	15 c0       	rjmp	.+42     	; 0x1306 <Pwm_Init+0x40>
		{
			case PWM_CH0:
			TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
    12dc:	83 b7       	in	r24, 0x33	; 51
    12de:	88 66       	ori	r24, 0x68	; 104
    12e0:	83 bf       	out	0x33, r24	; 51
			Ret=E_OK;
    12e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
    12e4:	16 c0       	rjmp	.+44     	; 0x1312 <Pwm_Init+0x4c>

			case PWM_CH1A:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B|0x0020;
    12e6:	8e b5       	in	r24, 0x2e	; 46
    12e8:	9f b5       	in	r25, 0x2f	; 47
    12ea:	80 62       	ori	r24, 0x20	; 32
    12ec:	91 6a       	ori	r25, 0xA1	; 161
    12ee:	9f bd       	out	0x2f, r25	; 47
    12f0:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
    12f2:	80 e0       	ldi	r24, 0x00	; 0
			break;
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <Pwm_Init+0x4c>

			case PWM_CH1B:
			TCCR1 |= T1_PWM_Phase_8 | T1_OC1A_OC1B;
    12f6:	8e b5       	in	r24, 0x2e	; 46
    12f8:	9f b5       	in	r25, 0x2f	; 47
    12fa:	80 62       	ori	r24, 0x20	; 32
    12fc:	91 6a       	ori	r25, 0xA1	; 161
    12fe:	9f bd       	out	0x2f, r25	; 47
    1300:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
    1302:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <Pwm_Init+0x4c>


			case PWM_CH2:
			TCCR2 |=T2_PWM_FAST |T2_NON_INVERTING;
    1306:	85 b5       	in	r24, 0x25	; 37
    1308:	88 66       	ori	r24, 0x68	; 104
    130a:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;
    130c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <Pwm_Init+0x4c>
			default:
			Ret=E_NOK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	sgl_Prescaler=Pwm_Cfg->Prescaler;
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	90 93 f8 01 	sts	0x01F8, r25
	u32g_T1_Prescaler=en_prescal;
	OCR1A =u16_outputCompareA;
	OCR1B =u16_outputCompareB;
	TCNT1=u16_initialValue;
	*/
}
    1318:	08 95       	ret

0000131a <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	89 01       	movw	r16, r18
    1328:	9a 01       	movw	r18, r20
	float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
    132a:	0f 2e       	mov	r0, r31
    132c:	fe ea       	ldi	r31, 0xAE	; 174
    132e:	cf 2e       	mov	r12, r31
    1330:	f0 ef       	ldi	r31, 0xF0	; 240
    1332:	df 2e       	mov	r13, r31
    1334:	ff ef       	ldi	r31, 0xFF	; 255
    1336:	ef 2e       	mov	r14, r31
    1338:	ff ef       	ldi	r31, 0xFF	; 255
    133a:	ff 2e       	mov	r15, r31
    133c:	f0 2d       	mov	r31, r0
    133e:	c0 0e       	add	r12, r16
    1340:	d1 1e       	adc	r13, r17
    1342:	e2 1e       	adc	r14, r18
    1344:	f3 1e       	adc	r15, r19
    1346:	9b e3       	ldi	r25, 0x3B	; 59
    1348:	c9 16       	cp	r12, r25
    134a:	9b e6       	ldi	r25, 0x6B	; 107
    134c:	d9 06       	cpc	r13, r25
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	e9 06       	cpc	r14, r25
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	f9 06       	cpc	r15, r25
    1356:	18 f4       	brcc	.+6      	; 0x135e <Pwm_Start+0x44>
	sgl_Prescaler=PWM_PRESCALER_NO;
    1358:	10 92 f8 01 	sts	0x01F8, r1
    135c:	a2 c0       	rjmp	.+324    	; 0x14a2 <Pwm_Start+0x188>
else if(Frequncy <= 3921 && Frequncy > 980)
    135e:	0f 2e       	mov	r0, r31
    1360:	fb e2       	ldi	r31, 0x2B	; 43
    1362:	cf 2e       	mov	r12, r31
    1364:	fc ef       	ldi	r31, 0xFC	; 252
    1366:	df 2e       	mov	r13, r31
    1368:	ff ef       	ldi	r31, 0xFF	; 255
    136a:	ef 2e       	mov	r14, r31
    136c:	ff ef       	ldi	r31, 0xFF	; 255
    136e:	ff 2e       	mov	r15, r31
    1370:	f0 2d       	mov	r31, r0
    1372:	c0 0e       	add	r12, r16
    1374:	d1 1e       	adc	r13, r17
    1376:	e2 1e       	adc	r14, r18
    1378:	f3 1e       	adc	r15, r19
    137a:	9d e7       	ldi	r25, 0x7D	; 125
    137c:	c9 16       	cp	r12, r25
    137e:	9b e0       	ldi	r25, 0x0B	; 11
    1380:	d9 06       	cpc	r13, r25
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	e9 06       	cpc	r14, r25
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	f9 06       	cpc	r15, r25
    138a:	20 f4       	brcc	.+8      	; 0x1394 <Pwm_Start+0x7a>
	sgl_Prescaler=PWM_PRESCALER_8;
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	90 93 f8 01 	sts	0x01F8, r25
    1392:	a5 c0       	rjmp	.+330    	; 0x14de <Pwm_Start+0x1c4>
else if(Frequncy <= 980 && Frequncy > 490)
    1394:	0f 2e       	mov	r0, r31
    1396:	f5 e1       	ldi	r31, 0x15	; 21
    1398:	cf 2e       	mov	r12, r31
    139a:	fe ef       	ldi	r31, 0xFE	; 254
    139c:	df 2e       	mov	r13, r31
    139e:	ff ef       	ldi	r31, 0xFF	; 255
    13a0:	ef 2e       	mov	r14, r31
    13a2:	ff ef       	ldi	r31, 0xFF	; 255
    13a4:	ff 2e       	mov	r15, r31
    13a6:	f0 2d       	mov	r31, r0
    13a8:	c0 0e       	add	r12, r16
    13aa:	d1 1e       	adc	r13, r17
    13ac:	e2 1e       	adc	r14, r18
    13ae:	f3 1e       	adc	r15, r19
    13b0:	9a ee       	ldi	r25, 0xEA	; 234
    13b2:	c9 16       	cp	r12, r25
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	d9 06       	cpc	r13, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	e9 06       	cpc	r14, r25
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	f9 06       	cpc	r15, r25
    13c0:	20 f4       	brcc	.+8      	; 0x13ca <Pwm_Start+0xb0>
	sgl_Prescaler=PWM_PRESCALER_32;
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	90 93 f8 01 	sts	0x01F8, r25
    13c8:	a1 c0       	rjmp	.+322    	; 0x150c <Pwm_Start+0x1f2>
else if(Frequncy <= 490 && Frequncy > 245)
    13ca:	0f 2e       	mov	r0, r31
    13cc:	fa e0       	ldi	r31, 0x0A	; 10
    13ce:	cf 2e       	mov	r12, r31
    13d0:	ff ef       	ldi	r31, 0xFF	; 255
    13d2:	df 2e       	mov	r13, r31
    13d4:	ff ef       	ldi	r31, 0xFF	; 255
    13d6:	ef 2e       	mov	r14, r31
    13d8:	ff ef       	ldi	r31, 0xFF	; 255
    13da:	ff 2e       	mov	r15, r31
    13dc:	f0 2d       	mov	r31, r0
    13de:	c0 0e       	add	r12, r16
    13e0:	d1 1e       	adc	r13, r17
    13e2:	e2 1e       	adc	r14, r18
    13e4:	f3 1e       	adc	r15, r19
    13e6:	95 ef       	ldi	r25, 0xF5	; 245
    13e8:	c9 16       	cp	r12, r25
    13ea:	d1 04       	cpc	r13, r1
    13ec:	e1 04       	cpc	r14, r1
    13ee:	f1 04       	cpc	r15, r1
    13f0:	20 f4       	brcc	.+8      	; 0x13fa <Pwm_Start+0xe0>
	sgl_Prescaler=PWM_PRESCALER_64;
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	90 93 f8 01 	sts	0x01F8, r25
    13f8:	90 c0       	rjmp	.+288    	; 0x151a <Pwm_Start+0x200>
else if(Frequncy <= 245 && Frequncy > 122)
    13fa:	0f 2e       	mov	r0, r31
    13fc:	f5 e8       	ldi	r31, 0x85	; 133
    13fe:	cf 2e       	mov	r12, r31
    1400:	ff ef       	ldi	r31, 0xFF	; 255
    1402:	df 2e       	mov	r13, r31
    1404:	ff ef       	ldi	r31, 0xFF	; 255
    1406:	ef 2e       	mov	r14, r31
    1408:	ff ef       	ldi	r31, 0xFF	; 255
    140a:	ff 2e       	mov	r15, r31
    140c:	f0 2d       	mov	r31, r0
    140e:	c0 0e       	add	r12, r16
    1410:	d1 1e       	adc	r13, r17
    1412:	e2 1e       	adc	r14, r18
    1414:	f3 1e       	adc	r15, r19
    1416:	9b e7       	ldi	r25, 0x7B	; 123
    1418:	c9 16       	cp	r12, r25
    141a:	d1 04       	cpc	r13, r1
    141c:	e1 04       	cpc	r14, r1
    141e:	f1 04       	cpc	r15, r1
    1420:	20 f4       	brcc	.+8      	; 0x142a <Pwm_Start+0x110>
	sgl_Prescaler=PWM_PRESCALER_128;
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	90 93 f8 01 	sts	0x01F8, r25
    1428:	a5 c0       	rjmp	.+330    	; 0x1574 <Pwm_Start+0x25a>
else if(Frequncy <= 122 && Frequncy > 31)
    142a:	0f 2e       	mov	r0, r31
    142c:	f0 ee       	ldi	r31, 0xE0	; 224
    142e:	cf 2e       	mov	r12, r31
    1430:	ff ef       	ldi	r31, 0xFF	; 255
    1432:	df 2e       	mov	r13, r31
    1434:	ff ef       	ldi	r31, 0xFF	; 255
    1436:	ef 2e       	mov	r14, r31
    1438:	ff ef       	ldi	r31, 0xFF	; 255
    143a:	ff 2e       	mov	r15, r31
    143c:	f0 2d       	mov	r31, r0
    143e:	c0 0e       	add	r12, r16
    1440:	d1 1e       	adc	r13, r17
    1442:	e2 1e       	adc	r14, r18
    1444:	f3 1e       	adc	r15, r19
    1446:	9b e5       	ldi	r25, 0x5B	; 91
    1448:	c9 16       	cp	r12, r25
    144a:	d1 04       	cpc	r13, r1
    144c:	e1 04       	cpc	r14, r1
    144e:	f1 04       	cpc	r15, r1
    1450:	20 f4       	brcc	.+8      	; 0x145a <Pwm_Start+0x140>
	sgl_Prescaler=PWM_PRESCALER_256;
    1452:	95 e0       	ldi	r25, 0x05	; 5
    1454:	90 93 f8 01 	sts	0x01F8, r25
    1458:	77 c0       	rjmp	.+238    	; 0x1548 <Pwm_Start+0x22e>
else if(Frequncy <= 31 && Frequncy > 0)
    145a:	01 50       	subi	r16, 0x01	; 1
    145c:	10 40       	sbci	r17, 0x00	; 0
    145e:	20 40       	sbci	r18, 0x00	; 0
    1460:	30 40       	sbci	r19, 0x00	; 0
    1462:	0f 31       	cpi	r16, 0x1F	; 31
    1464:	11 05       	cpc	r17, r1
    1466:	21 05       	cpc	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	20 f4       	brcc	.+8      	; 0x1474 <Pwm_Start+0x15a>
	sgl_Prescaler=PWM_PRESCALER_1024;
    146c:	96 e0       	ldi	r25, 0x06	; 6
    146e:	90 93 f8 01 	sts	0x01F8, r25
    1472:	86 c0       	rjmp	.+268    	; 0x1580 <Pwm_Start+0x266>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
    1474:	90 91 f8 01 	lds	r25, 0x01F8
    1478:	93 30       	cpi	r25, 0x03	; 3
    147a:	09 f4       	brne	.+2      	; 0x147e <Pwm_Start+0x164>
    147c:	4e c0       	rjmp	.+156    	; 0x151a <Pwm_Start+0x200>
    147e:	94 30       	cpi	r25, 0x04	; 4
    1480:	30 f4       	brcc	.+12     	; 0x148e <Pwm_Start+0x174>
    1482:	91 30       	cpi	r25, 0x01	; 1
    1484:	61 f1       	breq	.+88     	; 0x14de <Pwm_Start+0x1c4>
    1486:	92 30       	cpi	r25, 0x02	; 2
    1488:	08 f0       	brcs	.+2      	; 0x148c <Pwm_Start+0x172>
    148a:	40 c0       	rjmp	.+128    	; 0x150c <Pwm_Start+0x1f2>
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <Pwm_Start+0x188>
    148e:	95 30       	cpi	r25, 0x05	; 5
    1490:	09 f4       	brne	.+2      	; 0x1494 <Pwm_Start+0x17a>
    1492:	5a c0       	rjmp	.+180    	; 0x1548 <Pwm_Start+0x22e>
    1494:	95 30       	cpi	r25, 0x05	; 5
    1496:	08 f4       	brcc	.+2      	; 0x149a <Pwm_Start+0x180>
    1498:	6d c0       	rjmp	.+218    	; 0x1574 <Pwm_Start+0x25a>
    149a:	96 30       	cpi	r25, 0x06	; 6
    149c:	09 f0       	breq	.+2      	; 0x14a0 <Pwm_Start+0x186>
    149e:	8d c0       	rjmp	.+282    	; 0x15ba <Pwm_Start+0x2a0>
    14a0:	6f c0       	rjmp	.+222    	; 0x1580 <Pwm_Start+0x266>
{
	case PWM_PRESCALER_NO:
	{
		switch(Channel)
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	61 f0       	breq	.+24     	; 0x14be <Pwm_Start+0x1a4>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	30 f0       	brcs	.+12     	; 0x14b6 <Pwm_Start+0x19c>
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	71 f0       	breq	.+28     	; 0x14ca <Pwm_Start+0x1b0>
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <Pwm_Start+0x19a>
    14b2:	83 c0       	rjmp	.+262    	; 0x15ba <Pwm_Start+0x2a0>
    14b4:	10 c0       	rjmp	.+32     	; 0x14d6 <Pwm_Start+0x1bc>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_NO_CONFIG;
    14b6:	83 b7       	in	r24, 0x33	; 51
    14b8:	81 60       	ori	r24, 0x01	; 1
    14ba:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    14bc:	88 c0       	rjmp	.+272    	; 0x15ce <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{
			TCCR1|=PWM_PRESCALER_NO_CONFIG;
    14be:	8e b5       	in	r24, 0x2e	; 46
    14c0:	9f b5       	in	r25, 0x2f	; 47
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	9f bd       	out	0x2f, r25	; 47
    14c6:	8e bd       	out	0x2e, r24	; 46
			Ret=E_OK;
			break;
    14c8:	98 c0       	rjmp	.+304    	; 0x15fa <Pwm_Start+0x2e0>
			}			
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    14ca:	8e b5       	in	r24, 0x2e	; 46
    14cc:	9f b5       	in	r25, 0x2f	; 47
    14ce:	81 60       	ori	r24, 0x01	; 1
    14d0:	9f bd       	out	0x2f, r25	; 47
    14d2:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    14d4:	ad c0       	rjmp	.+346    	; 0x1630 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_NO_CONFIG;
    14d6:	85 b5       	in	r24, 0x25	; 37
    14d8:	81 60       	ori	r24, 0x01	; 1
    14da:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    14dc:	c4 c0       	rjmp	.+392    	; 0x1666 <Pwm_Start+0x34c>
	}

	
	case PWM_PRESCALER_8:
	{
		switch(Channel)
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	18 f4       	brcc	.+6      	; 0x14e8 <Pwm_Start+0x1ce>
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	48 f4       	brcc	.+18     	; 0x14f8 <Pwm_Start+0x1de>
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <Pwm_Start+0x1d6>
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	09 f0       	breq	.+2      	; 0x14ee <Pwm_Start+0x1d4>
    14ec:	66 c0       	rjmp	.+204    	; 0x15ba <Pwm_Start+0x2a0>
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <Pwm_Start+0x1ea>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_8_CONFIG;
    14f0:	83 b7       	in	r24, 0x33	; 51
    14f2:	82 60       	ori	r24, 0x02	; 2
    14f4:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    14f6:	6b c0       	rjmp	.+214    	; 0x15ce <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_8_CONFIG;
    14f8:	2e b5       	in	r18, 0x2e	; 46
    14fa:	3f b5       	in	r19, 0x2f	; 47
    14fc:	22 60       	ori	r18, 0x02	; 2
    14fe:	3f bd       	out	0x2f, r19	; 47
    1500:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    1502:	5b c0       	rjmp	.+182    	; 0x15ba <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_8_CONFIG;
    1504:	85 b5       	in	r24, 0x25	; 37
    1506:	82 60       	ori	r24, 0x02	; 2
    1508:	85 bd       	out	0x25, r24	; 37
			Ret=E_OK;	
				break;
    150a:	ad c0       	rjmp	.+346    	; 0x1666 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_32:
	{
		switch(Channel)
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	09 f0       	breq	.+2      	; 0x1512 <Pwm_Start+0x1f8>
    1510:	54 c0       	rjmp	.+168    	; 0x15ba <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
    1512:	85 b5       	in	r24, 0x25	; 37
    1514:	83 60       	ori	r24, 0x03	; 3
    1516:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1518:	a6 c0       	rjmp	.+332    	; 0x1666 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_64:
	{
		switch(Channel)
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	18 f4       	brcc	.+6      	; 0x1524 <Pwm_Start+0x20a>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	48 f4       	brcc	.+18     	; 0x1534 <Pwm_Start+0x21a>
    1522:	04 c0       	rjmp	.+8      	; 0x152c <Pwm_Start+0x212>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	09 f0       	breq	.+2      	; 0x152a <Pwm_Start+0x210>
    1528:	48 c0       	rjmp	.+144    	; 0x15ba <Pwm_Start+0x2a0>
    152a:	0a c0       	rjmp	.+20     	; 0x1540 <Pwm_Start+0x226>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    152c:	83 b7       	in	r24, 0x33	; 51
    152e:	83 60       	ori	r24, 0x03	; 3
    1530:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1532:	4d c0       	rjmp	.+154    	; 0x15ce <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    1534:	2e b5       	in	r18, 0x2e	; 46
    1536:	3f b5       	in	r19, 0x2f	; 47
    1538:	23 60       	ori	r18, 0x03	; 3
    153a:	3f bd       	out	0x2f, r19	; 47
    153c:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    153e:	3d c0       	rjmp	.+122    	; 0x15ba <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    1540:	85 b5       	in	r24, 0x25	; 37
    1542:	84 60       	ori	r24, 0x04	; 4
    1544:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1546:	8f c0       	rjmp	.+286    	; 0x1666 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_256:
	{
		switch(Channel)
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	18 f4       	brcc	.+6      	; 0x1552 <Pwm_Start+0x238>
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	40 f4       	brcc	.+16     	; 0x1560 <Pwm_Start+0x246>
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <Pwm_Start+0x23e>
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 f5       	brne	.+100    	; 0x15ba <Pwm_Start+0x2a0>
    1556:	0a c0       	rjmp	.+20     	; 0x156c <Pwm_Start+0x252>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_64_CONFIG;
    1558:	83 b7       	in	r24, 0x33	; 51
    155a:	83 60       	ori	r24, 0x03	; 3
    155c:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    155e:	37 c0       	rjmp	.+110    	; 0x15ce <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_64_CONFIG;
    1560:	2e b5       	in	r18, 0x2e	; 46
    1562:	3f b5       	in	r19, 0x2f	; 47
    1564:	23 60       	ori	r18, 0x03	; 3
    1566:	3f bd       	out	0x2f, r19	; 47
    1568:	2e bd       	out	0x2e, r18	; 46
				Ret=E_OK;
				break;
    156a:	27 c0       	rjmp	.+78     	; 0x15ba <Pwm_Start+0x2a0>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_64_CONFIG_T2;
    156c:	85 b5       	in	r24, 0x25	; 37
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    1572:	79 c0       	rjmp	.+242    	; 0x1666 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_128:
	{
		switch(Channel)
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	09 f5       	brne	.+66     	; 0x15ba <Pwm_Start+0x2a0>
		{
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_128_CONFIG_T2;
    1578:	85 b5       	in	r24, 0x25	; 37
    157a:	85 60       	ori	r24, 0x05	; 5
    157c:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    157e:	73 c0       	rjmp	.+230    	; 0x1666 <Pwm_Start+0x34c>
		break;
	}
	
	case PWM_PRESCALER_1024:
	{
		switch(Channel)
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	59 f0       	breq	.+22     	; 0x159a <Pwm_Start+0x280>
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	28 f0       	brcs	.+10     	; 0x1592 <Pwm_Start+0x278>
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	69 f0       	breq	.+26     	; 0x15a6 <Pwm_Start+0x28c>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	a9 f4       	brne	.+42     	; 0x15ba <Pwm_Start+0x2a0>
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <Pwm_Start+0x298>
		{
			case PWM_CH0:
			{
				TCCR0|=PWM_PRESCALER_1024_CONFIG;
    1592:	83 b7       	in	r24, 0x33	; 51
    1594:	85 60       	ori	r24, 0x05	; 5
    1596:	83 bf       	out	0x33, r24	; 51
				Ret=E_OK;
				break;
    1598:	1a c0       	rjmp	.+52     	; 0x15ce <Pwm_Start+0x2b4>
			}
			case PWM_CH1A:
			{	TCCR1|=PWM_PRESCALER_NO_CONFIG;
    159a:	8e b5       	in	r24, 0x2e	; 46
    159c:	9f b5       	in	r25, 0x2f	; 47
    159e:	81 60       	ori	r24, 0x01	; 1
    15a0:	9f bd       	out	0x2f, r25	; 47
    15a2:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    15a4:	2a c0       	rjmp	.+84     	; 0x15fa <Pwm_Start+0x2e0>
			}
			case PWM_CH1B:
			{	TCCR1|=PWM_PRESCALER_1024_CONFIG;
    15a6:	8e b5       	in	r24, 0x2e	; 46
    15a8:	9f b5       	in	r25, 0x2f	; 47
    15aa:	85 60       	ori	r24, 0x05	; 5
    15ac:	9f bd       	out	0x2f, r25	; 47
    15ae:	8e bd       	out	0x2e, r24	; 46
				Ret=E_OK;
				break;
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <Pwm_Start+0x316>
			}
			case PWM_CH2:
			{TCCR2|=PWM_PRESCALER_1024_CONFIG_T2;
    15b2:	85 b5       	in	r24, 0x25	; 37
    15b4:	87 60       	ori	r24, 0x07	; 7
    15b6:	85 bd       	out	0x25, r24	; 37
				Ret=E_OK;
				break;
    15b8:	56 c0       	rjmp	.+172    	; 0x1666 <Pwm_Start+0x34c>

	
	
}

switch(Channel)
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	f1 f0       	breq	.+60     	; 0x15fa <Pwm_Start+0x2e0>
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	30 f0       	brcs	.+12     	; 0x15ce <Pwm_Start+0x2b4>
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	a9 f1       	breq	.+106    	; 0x1630 <Pwm_Start+0x316>
    15c6:	83 30       	cpi	r24, 0x03	; 3
    15c8:	09 f0       	breq	.+2      	; 0x15cc <Pwm_Start+0x2b2>
    15ca:	63 c0       	rjmp	.+198    	; 0x1692 <Pwm_Start+0x378>
    15cc:	4c c0       	rjmp	.+152    	; 0x1666 <Pwm_Start+0x34c>
		{
			case PWM_CH0:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	48 ec       	ldi	r20, 0xC8	; 200
    15de:	52 e4       	ldi	r21, 0x42	; 66
    15e0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	53 e4       	ldi	r21, 0x43	; 67
    15ec:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
    15f0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fixunssfsi>
			OCR0=pwm_time_on;
    15f4:	6c bf       	out	0x3c, r22	; 60
			Ret=E_OK;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    15f8:	4d c0       	rjmp	.+154    	; 0x1694 <Pwm_Start+0x37a>
			}			
			case PWM_CH1A:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	48 ec       	ldi	r20, 0xC8	; 200
    160a:	52 e4       	ldi	r21, 0x42	; 66
    160c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	53 e4       	ldi	r21, 0x43	; 67
    1618:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
    161c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    1624:	9b bd       	out	0x2b, r25	; 43
    1626:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    1628:	99 bd       	out	0x29, r25	; 41
    162a:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    162c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    162e:	32 c0       	rjmp	.+100    	; 0x1694 <Pwm_Start+0x37a>
			}			
			case PWM_CH1B:{
			pwm_time_on=MAX_HOLD;
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	48 ec       	ldi	r20, 0xC8	; 200
    1640:	52 e4       	ldi	r21, 0x42	; 66
    1642:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	53 e4       	ldi	r21, 0x43	; 67
    164e:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
    1652:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
			OCR1A=pwm_time_on;
    165a:	9b bd       	out	0x2b, r25	; 43
    165c:	8a bd       	out	0x2a, r24	; 42
			OCR1B=pwm_time_on;
    165e:	99 bd       	out	0x29, r25	; 41
    1660:	88 bd       	out	0x28, r24	; 40
			Ret=E_OK;
    1662:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1664:	17 c0       	rjmp	.+46     	; 0x1694 <Pwm_Start+0x37a>
			}
			case PWM_CH2:{
			pwm_time_on=MAX_HOLD;	
			dutyReal=((float)Duty/(float)FULL_SPEED);
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	48 ec       	ldi	r20, 0xC8	; 200
    1676:	52 e4       	ldi	r21, 0x42	; 66
    1678:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divsf3>
			pwm_time_on=(float)pwm_time_on*dutyReal;
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	4f e7       	ldi	r20, 0x7F	; 127
    1682:	53 e4       	ldi	r21, 0x43	; 67
    1684:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
    1688:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__fixunssfsi>
			OCR2=pwm_time_on;
    168c:	63 bd       	out	0x23, r22	; 35
			Ret=E_OK;
    168e:	80 e0       	ldi	r24, 0x00	; 0
			}			
			break;
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <Pwm_Start+0x37a>
			default:
			Ret=E_NOK;
    1692:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
sgl_is_started=1;
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	90 93 f9 01 	sts	0x01F9, r25
return Ret;
}
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	08 95       	ret

000016a8 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    16a8:	90 91 f9 01 	lds	r25, 0x01F9
    16ac:	91 30       	cpi	r25, 0x01	; 1
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <Pwm_Update+0x10>
{
	Pwm_Start( Channel,Duty,Frequncy);
    16b0:	0e 94 8d 09 	call	0x131a	; 0x131a <Pwm_Start>
Ret=E_OK;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	08 95       	ret
}else{Ret=E_NOK;}
    16b8:	81 e0       	ldi	r24, 0x01	; 1
	

return Ret;
}
    16ba:	08 95       	ret

000016bc <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	18 f4       	brcc	.+6      	; 0x16c6 <Pwm_Stop+0xa>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	48 f4       	brcc	.+18     	; 0x16d6 <Pwm_Stop+0x1a>
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <Pwm_Stop+0x10>
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	81 f4       	brne	.+32     	; 0x16ea <Pwm_Stop+0x2e>
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <Pwm_Stop+0x24>
{
	case PWM_CH0:
	TCCR0 &=TIMER_STOPT02;
    16cc:	83 b7       	in	r24, 0x33	; 51
    16ce:	88 7f       	andi	r24, 0xF8	; 248
    16d0:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
	break;
    16d4:	08 95       	ret

	case PWM_CH1A:
	case PWM_CH1B:
	TCCR0 &=TIMER_STOPT1;
    16d6:	83 b7       	in	r24, 0x33	; 51
    16d8:	88 7f       	andi	r24, 0xF8	; 248
    16da:	83 bf       	out	0x33, r24	; 51
	Ret=E_OK;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
	break;
    16de:	08 95       	ret


	case PWM_CH2:
	TCCR2 &=TIMER_STOPT02;
    16e0:	85 b5       	in	r24, 0x25	; 37
    16e2:	88 7f       	andi	r24, 0xF8	; 248
    16e4:	85 bd       	out	0x25, r24	; 37
	Ret=E_OK;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
	break;
    16e8:	08 95       	ret
	default:
	Ret=E_NOK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
	break;
}

return Ret;
}
    16ec:	08 95       	ret

000016ee <Timer_Init>:
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
prescaler_value=Timer_cfg->Timer_Prescaler;
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	80 93 fa 01 	sts	0x01FA, r24
if (Timer_cfg==NULL)
    16fc:	20 97       	sbiw	r28, 0x00	; 0
    16fe:	11 f0       	breq	.+4      	; 0x1704 <Timer_Init+0x16>
 *
 */
 static uint8_t prescaler_value=0;
 
ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg)
{uint8_t Ret=E_OK;
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <Timer_Init+0x18>
prescaler_value=Timer_cfg->Timer_Prescaler;
if (Timer_cfg==NULL)
{
	Ret=TIMER_MODULE+NULL_PTR;
    1704:	10 e2       	ldi	r17, 0x20	; 32
}
switch (Timer_cfg->Timer_CH_NO) {
    1706:	88 81       	ld	r24, Y
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	09 f4       	brne	.+2      	; 0x170e <Timer_Init+0x20>
    170c:	4c c0       	rjmp	.+152    	; 0x17a6 <Timer_Init+0xb8>
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	20 f0       	brcs	.+8      	; 0x171a <Timer_Init+0x2c>
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	09 f0       	breq	.+2      	; 0x1718 <Timer_Init+0x2a>
    1716:	d8 c0       	rjmp	.+432    	; 0x18c8 <Timer_Init+0x1da>
    1718:	93 c0       	rjmp	.+294    	; 0x1840 <Timer_Init+0x152>
/*************************************************************************/
/*                             TIMER 0                                   */
/*************************************************************************/
    case TIMER_CH0:
        {
  TCCR0 |=T0_NORMAL_MODE;
    171a:	83 b7       	in	r24, 0x33	; 51
    171c:	83 bf       	out	0x33, r24	; 51
  
          switch (Timer_cfg->Timer_Mode) {
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	b9 f0       	breq	.+46     	; 0x1752 <Timer_Init+0x64>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	18 f0       	brcs	.+6      	; 0x172e <Timer_Init+0x40>
    1728:	82 30       	cpi	r24, 0x02	; 2
    172a:	e1 f5       	brne	.+120    	; 0x17a4 <Timer_Init+0xb6>
    172c:	26 c0       	rjmp	.+76     	; 0x177a <Timer_Init+0x8c>
          case TIMER_MODE:
              {
                switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 23       	and	r24, r24
    1732:	19 f0       	breq	.+6      	; 0x173a <Timer_Init+0x4c>
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	59 f4       	brne	.+22     	; 0x174e <Timer_Init+0x60>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <Timer_Init+0x54>
				{
                    case TIMER_POLLING_MODE:
                        {/*Disable interrupts for T0 without effecting any other timer*/
                         /*without Disabling Global interrupt*/
                        TIMSK &=T0_INTERRUPT_DISABLE;
    173a:	89 b7       	in	r24, 0x39	; 57
    173c:	8c 7f       	andi	r24, 0xFC	; 252
    173e:	89 bf       	out	0x39, r24	; 57
                            break;
    1740:	32 c0       	rjmp	.+100    	; 0x17a6 <Timer_Init+0xb8>
                         }
                                  case TIMER_INTERRUPT_MODE:
                                  { /*Enable Global INTERRUPT
                                    Enable Timer0 interrupt
                                    */
                                    G_interrupt_Enable();
    1742:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                                    TIMSK |= T0_INTERRUPT_NORMAL;
    1746:	89 b7       	in	r24, 0x39	; 57
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	89 bf       	out	0x39, r24	; 57
                                    break;
    174c:	2c c0       	rjmp	.+88     	; 0x17a6 <Timer_Init+0xb8>
                                  }
                                  default :
                                  Ret+=E_NOK;
    174e:	1f 5f       	subi	r17, 0xFF	; 255
								  break;
    1750:	2a c0       	rjmp	.+84     	; 0x17a6 <Timer_Init+0xb8>
/*                             TIMER 0 As a COUNTER_RISING_MODE          */
/*************************************************************************/

                          case COUNTER_RISING_MODE:
                            {
                                  TCCR0 |=T0_COUNTER_RISING_MODE_CONFIG;
    1752:	83 b7       	in	r24, 0x33	; 51
    1754:	8d 60       	ori	r24, 0x0D	; 13
    1756:	83 bf       	out	0x33, r24	; 51
                                    switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	88 23       	and	r24, r24
    175c:	19 f0       	breq	.+6      	; 0x1764 <Timer_Init+0x76>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	59 f4       	brne	.+22     	; 0x1778 <Timer_Init+0x8a>
    1762:	04 c0       	rjmp	.+8      	; 0x176c <Timer_Init+0x7e>
                                        case TIMER_POLLING_MODE:
                                          {
            /*Disable interrupts for T0 without effecting any other timer*/
              /*without Disabling Global interrupt*/
                                            TIMSK &=T0_INTERRUPT_DISABLE;
    1764:	89 b7       	in	r24, 0x39	; 57
    1766:	8c 7f       	andi	r24, 0xFC	; 252
    1768:	89 bf       	out	0x39, r24	; 57
                                            break;
    176a:	07 c0       	rjmp	.+14     	; 0x177a <Timer_Init+0x8c>

                                          case TIMER_INTERRUPT_MODE:
                                           /*Enable Global INTERRUPT
                                              Enable Timer0 interrupt
                                              */
                                              G_interrupt_Enable();
    176c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                                              TIMSK |= T0_INTERRUPT_NORMAL;
    1770:	89 b7       	in	r24, 0x39	; 57
    1772:	81 60       	ori	r24, 0x01	; 1
    1774:	89 bf       	out	0x39, r24	; 57
                                              break;
    1776:	01 c0       	rjmp	.+2      	; 0x177a <Timer_Init+0x8c>

                                          default :
                                          Ret+=E_NOK;
    1778:	1f 5f       	subi	r17, 0xFF	; 255
/*                             TIMER 0 As a COUNTER_FALLING_MODE         */
/*************************************************************************/

                                    case COUNTER_FALLING_MODE:
                                    {
                                        TCCR0 |=T0_COUNTER_FALLING_MODE_CONFIG;
    177a:	83 b7       	in	r24, 0x33	; 51
    177c:	8c 60       	ori	r24, 0x0C	; 12
    177e:	83 bf       	out	0x33, r24	; 51
                                          switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 23       	and	r24, r24
    1784:	19 f0       	breq	.+6      	; 0x178c <Timer_Init+0x9e>
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	59 f4       	brne	.+22     	; 0x17a0 <Timer_Init+0xb2>
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <Timer_Init+0xa6>
                                              case TIMER_POLLING_MODE:
                                                {

            /*Disable interrupts for T0 without effecting any other timer*/
                /*without Disabling Global interrupt*/
                                                  TIMSK &=T0_INTERRUPT_DISABLE;
    178c:	89 b7       	in	r24, 0x39	; 57
    178e:	8c 7f       	andi	r24, 0xFC	; 252
    1790:	89 bf       	out	0x39, r24	; 57

                                                  break;
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <Timer_Init+0xb8>
                                                case TIMER_INTERRUPT_MODE:
                                                  {
                                                    /*Enable Global INTERRUPT
                                                    Enable Timer0 interrupt
                                                    */
                                                    G_interrupt_Enable();
    1794:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                                                    TIMSK |= T0_INTERRUPT_NORMAL;
    1798:	89 b7       	in	r24, 0x39	; 57
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	89 bf       	out	0x39, r24	; 57

                                                    break;
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <Timer_Init+0xb8>
                                                  }
                                                  default:
                                                  Ret+=E_NOK;
    17a0:	1f 5f       	subi	r17, 0xFF	; 255
												  break;
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <Timer_Init+0xb8>
                                                }
                                      break;
                                      }
                                      default:
                                      Ret+=E_NOK;
    17a4:	1f 5f       	subi	r17, 0xFF	; 255
/*************************************************************************/

    case TIMER_CH1:
        {

    switch (Timer_cfg->Timer_Mode)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	d1 f0       	breq	.+52     	; 0x17e0 <Timer_Init+0xf2>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	20 f0       	brcs	.+8      	; 0x17b8 <Timer_Init+0xca>
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <Timer_Init+0xc8>
    17b4:	43 c0       	rjmp	.+134    	; 0x183c <Timer_Init+0x14e>
    17b6:	2b c0       	rjmp	.+86     	; 0x180e <Timer_Init+0x120>
    {
      case TIMER_MODE:
      {
        TCCR1 = T1_NORMAL_MODE_CONFIG;
    17b8:	1f bc       	out	0x2f, r1	; 47
    17ba:	1e bc       	out	0x2e, r1	; 46
              switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	88 23       	and	r24, r24
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <Timer_Init+0xda>
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	59 f4       	brne	.+22     	; 0x17dc <Timer_Init+0xee>
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <Timer_Init+0xe2>
              case TIMER_POLLING_MODE:
                {
                  /*Disable interrupts for T1 without effecting any other timer*/
                   /*without Disabling Global interrupt*/
                  TIMSK &=T1_INTERRUPT_DISABLE;
    17c8:	89 b7       	in	r24, 0x39	; 57
    17ca:	83 7c       	andi	r24, 0xC3	; 195
    17cc:	89 bf       	out	0x39, r24	; 57

                break;
    17ce:	7c c0       	rjmp	.+248    	; 0x18c8 <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
    17d0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
    17d4:	89 b7       	in	r24, 0x39	; 57
    17d6:	84 60       	ori	r24, 0x04	; 4
    17d8:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
    17da:	76 c0       	rjmp	.+236    	; 0x18c8 <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
    17dc:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
    17de:	74 c0       	rjmp	.+232    	; 0x18c8 <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
            TCCR1|=T1_COUNTER_RISING_MODE_CONFIG;
    17e0:	8e b5       	in	r24, 0x2e	; 46
    17e2:	9f b5       	in	r25, 0x2f	; 47
    17e4:	87 60       	ori	r24, 0x07	; 7
    17e6:	9f bd       	out	0x2f, r25	; 47
    17e8:	8e bd       	out	0x2e, r24	; 46

            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	88 23       	and	r24, r24
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <Timer_Init+0x108>
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	59 f4       	brne	.+22     	; 0x180a <Timer_Init+0x11c>
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <Timer_Init+0x110>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
    17f6:	89 b7       	in	r24, 0x39	; 57
    17f8:	83 7c       	andi	r24, 0xC3	; 195
    17fa:	89 bf       	out	0x39, r24	; 57

                break;
    17fc:	65 c0       	rjmp	.+202    	; 0x18c8 <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
    17fe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
    1802:	89 b7       	in	r24, 0x39	; 57
    1804:	84 60       	ori	r24, 0x04	; 4
    1806:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */
                break;
    1808:	5f c0       	rjmp	.+190    	; 0x18c8 <Timer_Init+0x1da>
              }
              default:
              Ret+=E_NOK;
    180a:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
    180c:	5d c0       	rjmp	.+186    	; 0x18c8 <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_FALLING_MODE:
      {
            TCCR1|=T1_COUNTER_FALLING_MODE_CONFIG;
    180e:	8e b5       	in	r24, 0x2e	; 46
    1810:	9f b5       	in	r25, 0x2f	; 47
    1812:	86 60       	ori	r24, 0x06	; 6
    1814:	9f bd       	out	0x2f, r25	; 47
    1816:	8e bd       	out	0x2e, r24	; 46
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 23       	and	r24, r24
    181c:	19 f0       	breq	.+6      	; 0x1824 <Timer_Init+0x136>
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	59 f4       	brne	.+22     	; 0x1838 <Timer_Init+0x14a>
    1822:	04 c0       	rjmp	.+8      	; 0x182c <Timer_Init+0x13e>
              case TIMER_POLLING_MODE:
              {
                /*Disable interrupts for T1 without effecting any other timer*/
                 /*without Disabling Global interrupt*/
                TIMSK &=T1_INTERRUPT_DISABLE;
    1824:	89 b7       	in	r24, 0x39	; 57
    1826:	83 7c       	andi	r24, 0xC3	; 195
    1828:	89 bf       	out	0x39, r24	; 57
                break;
    182a:	4e c0       	rjmp	.+156    	; 0x18c8 <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
    182c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                TIMSK |=T1_INTERRUPT_NORMAL;
    1830:	89 b7       	in	r24, 0x39	; 57
    1832:	84 60       	ori	r24, 0x04	; 4
    1834:	89 bf       	out	0x39, r24	; 57
                /*Enable Global INTERRUPT
                Enable Timer0 interrupt
                */

                break;
    1836:	48 c0       	rjmp	.+144    	; 0x18c8 <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
    1838:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
    183a:	46 c0       	rjmp	.+140    	; 0x18c8 <Timer_Init+0x1da>
            }
      break;
      }
      default :
      Ret+=E_NOK;
    183c:	1f 5f       	subi	r17, 0xFF	; 255
    break;
    183e:	44 c0       	rjmp	.+136    	; 0x18c8 <Timer_Init+0x1da>
  /*                             TIMER 2                                   */
  /*************************************************************************/

  case TIMER_CH2:
  {
TCCR2 |=T2_NORMAL_MODE_CONFIG;
    1840:	85 b5       	in	r24, 0x25	; 37
    1842:	85 bd       	out	0x25, r24	; 37
    switch (Timer_cfg->Timer_Mode) {
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	88 23       	and	r24, r24
    1848:	19 f0       	breq	.+6      	; 0x1850 <Timer_Init+0x162>
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	e1 f5       	brne	.+120    	; 0x18c6 <Timer_Init+0x1d8>
    184e:	12 c0       	rjmp	.+36     	; 0x1874 <Timer_Init+0x186>
      case TIMER_MODE:
      {
            switch (Timer_cfg->Timer_Polling_Or_Interrupt) {
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	88 23       	and	r24, r24
    1854:	19 f0       	breq	.+6      	; 0x185c <Timer_Init+0x16e>
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	59 f4       	brne	.+22     	; 0x1870 <Timer_Init+0x182>
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <Timer_Init+0x176>
              case TIMER_POLLING_MODE:
              {
                  TIMSK &= T2_INTERRUPT_DISABLE;
    185c:	89 b7       	in	r24, 0x39	; 57
    185e:	8f 73       	andi	r24, 0x3F	; 63
    1860:	89 bf       	out	0x39, r24	; 57
                break;
    1862:	32 c0       	rjmp	.+100    	; 0x18c8 <Timer_Init+0x1da>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
    1864:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
    1868:	89 b7       	in	r24, 0x39	; 57
    186a:	80 6c       	ori	r24, 0xC0	; 192
    186c:	89 bf       	out	0x39, r24	; 57

                break;
    186e:	2c c0       	rjmp	.+88     	; 0x18c8 <Timer_Init+0x1da>
              }
              default :
              Ret+=E_NOK;
    1870:	1f 5f       	subi	r17, 0xFF	; 255
			  break;
    1872:	2a c0       	rjmp	.+84     	; 0x18c8 <Timer_Init+0x1da>
            }
        break;
      }
      case COUNTER_RISING_MODE:
      {
          ASSR |=0x08;
    1874:	82 b5       	in	r24, 0x22	; 34
    1876:	88 60       	ori	r24, 0x08	; 8
    1878:	82 bd       	out	0x22, r24	; 34
            switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	49 f0       	breq	.+18     	; 0x1892 <Timer_Init+0x1a4>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	18 f0       	brcs	.+6      	; 0x188a <Timer_Init+0x19c>
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	f9 f4       	brne	.+62     	; 0x18c6 <Timer_Init+0x1d8>
    1888:	0a c0       	rjmp	.+20     	; 0x189e <Timer_Init+0x1b0>
            {
              case TIMER_POLLING_MODE:
              {
                TIMSK &= T2_INTERRUPT_DISABLE;
    188a:	89 b7       	in	r24, 0x39	; 57
    188c:	8f 73       	andi	r24, 0x3F	; 63
    188e:	89 bf       	out	0x39, r24	; 57

                break;
    1890:	1a c0       	rjmp	.+52     	; 0x18c6 <Timer_Init+0x1d8>
              }
              case TIMER_INTERRUPT_MODE:
              {
                G_interrupt_Enable();
    1892:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                  TIMSK|=T2_INTERRUPT_NORMAL;
    1896:	89 b7       	in	r24, 0x39	; 57
    1898:	80 6c       	ori	r24, 0xC0	; 192
    189a:	89 bf       	out	0x39, r24	; 57
                break;
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <Timer_Init+0x1d8>
              }
              case COUNTER_FALLING_MODE:
              {
                  ASSR |=0x08;
    189e:	82 b5       	in	r24, 0x22	; 34
    18a0:	88 60       	ori	r24, 0x08	; 8
    18a2:	82 bd       	out	0x22, r24	; 34
                    switch (Timer_cfg->Timer_Polling_Or_Interrupt)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	88 23       	and	r24, r24
    18a8:	19 f0       	breq	.+6      	; 0x18b0 <Timer_Init+0x1c2>
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	59 f4       	brne	.+22     	; 0x18c4 <Timer_Init+0x1d6>
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <Timer_Init+0x1ca>
                    {
                      case TIMER_POLLING_MODE:
                      {
                        TIMSK &= T2_INTERRUPT_DISABLE;
    18b0:	89 b7       	in	r24, 0x39	; 57
    18b2:	8f 73       	andi	r24, 0x3F	; 63
    18b4:	89 bf       	out	0x39, r24	; 57

                        break;
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <Timer_Init+0x1d8>
                      }
                      case TIMER_INTERRUPT_MODE:
                      {
                        G_interrupt_Enable();
    18b8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
                          TIMSK|=T2_INTERRUPT_NORMAL;
    18bc:	89 b7       	in	r24, 0x39	; 57
    18be:	80 6c       	ori	r24, 0xC0	; 192
    18c0:	89 bf       	out	0x39, r24	; 57
                        break;
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <Timer_Init+0x1d8>
                      }

              default :
              Ret+=E_NOK;
    18c4:	1f 5f       	subi	r17, 0xFF	; 255
            }
        break;
            }
            }
  default:
  Ret+=E_NOK;
    18c6:	1f 5f       	subi	r17, 0xFF	; 255
}
 }

}
return Ret;
}
    18c8:	81 2f       	mov	r24, r17
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	08 95       	ret

000018d2 <Timer_Start>:
 * Description: This function strats the needed timer.
 *
 */
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
uint8_t Ret;
switch (Timer_CH_NO) {
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <Timer_Start+0x6>
    18d6:	4f c0       	rjmp	.+158    	; 0x1976 <Timer_Start+0xa4>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	20 f0       	brcs	.+8      	; 0x18e4 <Timer_Start+0x12>
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	09 f0       	breq	.+2      	; 0x18e2 <Timer_Start+0x10>
    18e0:	f3 c0       	rjmp	.+486    	; 0x1ac8 <Timer_Start+0x1f6>
    18e2:	97 c0       	rjmp	.+302    	; 0x1a12 <Timer_Start+0x140>
case TIMER_CH0:{
/***********************************************************************************************************************/
switch(prescaler_value){
    18e4:	80 91 fa 01 	lds	r24, 0x01FA
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	21 f1       	breq	.+72     	; 0x1934 <Timer_Start+0x62>
    18ec:	85 30       	cpi	r24, 0x05	; 5
    18ee:	30 f4       	brcc	.+12     	; 0x18fc <Timer_Start+0x2a>
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	51 f0       	breq	.+20     	; 0x1908 <Timer_Start+0x36>
    18f4:	82 30       	cpi	r24, 0x02	; 2
    18f6:	09 f0       	breq	.+2      	; 0x18fa <Timer_Start+0x28>
    18f8:	e9 c0       	rjmp	.+466    	; 0x1acc <Timer_Start+0x1fa>
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <Timer_Start+0x4c>
    18fc:	86 30       	cpi	r24, 0x06	; 6
    18fe:	29 f1       	breq	.+74     	; 0x194a <Timer_Start+0x78>
    1900:	87 30       	cpi	r24, 0x07	; 7
    1902:	09 f0       	breq	.+2      	; 0x1906 <Timer_Start+0x34>
    1904:	e3 c0       	rjmp	.+454    	; 0x1acc <Timer_Start+0x1fa>
    1906:	2c c0       	rjmp	.+88     	; 0x1960 <Timer_Start+0x8e>
case TIMER_PRESCALER_NO :{
if(Timer_Count < MAX0){
    1908:	6f 3f       	cpi	r22, 0xFF	; 255
    190a:	71 05       	cpc	r23, r1
    190c:	08 f0       	brcs	.+2      	; 0x1910 <Timer_Start+0x3e>
    190e:	e0 c0       	rjmp	.+448    	; 0x1ad0 <Timer_Start+0x1fe>
TCCR0 |=TIMER_PRESCALER_NO;
    1910:	83 b7       	in	r24, 0x33	; 51
    1912:	81 60       	ori	r24, 0x01	; 1
    1914:	83 bf       	out	0x33, r24	; 51
TCNT0 =	MAX0 - Timer_Count;
    1916:	60 95       	com	r22
    1918:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_8 :{
if(Timer_Count < MAX0){
    191e:	6f 3f       	cpi	r22, 0xFF	; 255
    1920:	71 05       	cpc	r23, r1
    1922:	08 f0       	brcs	.+2      	; 0x1926 <Timer_Start+0x54>
    1924:	d7 c0       	rjmp	.+430    	; 0x1ad4 <Timer_Start+0x202>
TCCR0 |=TIMER0_PRESCALER_8_CONFIG;
    1926:	83 b7       	in	r24, 0x33	; 51
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
    192c:	60 95       	com	r22
    192e:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_64 :{
if(Timer_Count < MAX0){
    1934:	6f 3f       	cpi	r22, 0xFF	; 255
    1936:	71 05       	cpc	r23, r1
    1938:	08 f0       	brcs	.+2      	; 0x193c <Timer_Start+0x6a>
    193a:	ce c0       	rjmp	.+412    	; 0x1ad8 <Timer_Start+0x206>
TCCR0 |=TIMER0_PRESCALER_64_CONFIG;
    193c:	83 b7       	in	r24, 0x33	; 51
    193e:	83 60       	ori	r24, 0x03	; 3
    1940:	83 bf       	out	0x33, r24	; 51
TCNT0 = MAX0 - Timer_Count;
    1942:	60 95       	com	r22
    1944:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_256 :{
if(Timer_Count < MAX0){
    194a:	6f 3f       	cpi	r22, 0xFF	; 255
    194c:	71 05       	cpc	r23, r1
    194e:	08 f0       	brcs	.+2      	; 0x1952 <Timer_Start+0x80>
    1950:	c5 c0       	rjmp	.+394    	; 0x1adc <Timer_Start+0x20a>
TCCR0 |=TIMER0_PRESCALER_256_CONFIG;
    1952:	83 b7       	in	r24, 0x33	; 51
    1954:	84 60       	ori	r24, 0x04	; 4
    1956:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
    1958:	60 95       	com	r22
    195a:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	08 95       	ret
Ret=E_NOK;
}
break;
}
case TIMER_PRESCALER_1024 :{
if(Timer_Count < MAX0){
    1960:	6f 3f       	cpi	r22, 0xFF	; 255
    1962:	71 05       	cpc	r23, r1
    1964:	08 f0       	brcs	.+2      	; 0x1968 <Timer_Start+0x96>
    1966:	bc c0       	rjmp	.+376    	; 0x1ae0 <Timer_Start+0x20e>
TCCR0 |=TIMER0_PRESCALER_1024_CONFIG;
    1968:	83 b7       	in	r24, 0x33	; 51
    196a:	85 60       	ori	r24, 0x05	; 5
    196c:	83 bf       	out	0x33, r24	; 51
TCNT0 =MAX0 - Timer_Count;
    196e:	60 95       	com	r22
    1970:	62 bf       	out	0x32, r22	; 50
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	08 95       	ret
break;
}
case TIMER_CH1:{

  switch(prescaler_value){
    1976:	80 91 fa 01 	lds	r24, 0x01FA
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	31 f1       	breq	.+76     	; 0x19ca <Timer_Start+0xf8>
    197e:	85 30       	cpi	r24, 0x05	; 5
    1980:	30 f4       	brcc	.+12     	; 0x198e <Timer_Start+0xbc>
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	51 f0       	breq	.+20     	; 0x199a <Timer_Start+0xc8>
    1986:	82 30       	cpi	r24, 0x02	; 2
    1988:	09 f0       	breq	.+2      	; 0x198c <Timer_Start+0xba>
    198a:	ac c0       	rjmp	.+344    	; 0x1ae4 <Timer_Start+0x212>
    198c:	12 c0       	rjmp	.+36     	; 0x19b2 <Timer_Start+0xe0>
    198e:	86 30       	cpi	r24, 0x06	; 6
    1990:	41 f1       	breq	.+80     	; 0x19e2 <Timer_Start+0x110>
    1992:	87 30       	cpi	r24, 0x07	; 7
    1994:	09 f0       	breq	.+2      	; 0x1998 <Timer_Start+0xc6>
    1996:	a6 c0       	rjmp	.+332    	; 0x1ae4 <Timer_Start+0x212>
    1998:	30 c0       	rjmp	.+96     	; 0x19fa <Timer_Start+0x128>
  case TIMER_PRESCALER_NO :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER_PRESCALER_NO;
    199a:	8e b5       	in	r24, 0x2e	; 46
    199c:	9f b5       	in	r25, 0x2f	; 47
    199e:	81 60       	ori	r24, 0x01	; 1
    19a0:	9f bd       	out	0x2f, r25	; 47
    19a2:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
    19a4:	70 95       	com	r23
    19a6:	61 95       	neg	r22
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	7d bd       	out	0x2d, r23	; 45
    19ac:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret=E_NOK;
  }
  break;
    19b0:	08 95       	ret
  }
  case TIMER_PRESCALER_8 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_8_CONFIG;
    19b2:	8e b5       	in	r24, 0x2e	; 46
    19b4:	9f b5       	in	r25, 0x2f	; 47
    19b6:	82 60       	ori	r24, 0x02	; 2
    19b8:	9f bd       	out	0x2f, r25	; 47
    19ba:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
    19bc:	70 95       	com	r23
    19be:	61 95       	neg	r22
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	7d bd       	out	0x2d, r23	; 45
    19c4:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    19c6:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
    19c8:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_64_CONFIG;
    19ca:	8e b5       	in	r24, 0x2e	; 46
    19cc:	9f b5       	in	r25, 0x2f	; 47
    19ce:	83 60       	ori	r24, 0x03	; 3
    19d0:	9f bd       	out	0x2f, r25	; 47
    19d2:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
    19d4:	70 95       	com	r23
    19d6:	61 95       	neg	r22
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	7d bd       	out	0x2d, r23	; 45
    19dc:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    19de:	80 e0       	ldi	r24, 0x00	; 0
  TCNT1 =MAX1 - Timer_Count;
  }else
  {
  Ret= E_NOK;
  }
  break;
    19e0:	08 95       	ret
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_256_CONFIG;
    19e2:	8e b5       	in	r24, 0x2e	; 46
    19e4:	9f b5       	in	r25, 0x2f	; 47
    19e6:	84 60       	ori	r24, 0x04	; 4
    19e8:	9f bd       	out	0x2f, r25	; 47
    19ea:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
    19ec:	70 95       	com	r23
    19ee:	61 95       	neg	r22
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	7d bd       	out	0x2d, r23	; 45
    19f4:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
    19f8:	08 95       	ret
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX1){
  TCCR1 |=TIMER1_PRESCALER_1024_CONFIG;
    19fa:	8e b5       	in	r24, 0x2e	; 46
    19fc:	9f b5       	in	r25, 0x2f	; 47
    19fe:	85 60       	ori	r24, 0x05	; 5
    1a00:	9f bd       	out	0x2f, r25	; 47
    1a02:	8e bd       	out	0x2e, r24	; 46
  TCNT1 =MAX1 - Timer_Count;
    1a04:	70 95       	com	r23
    1a06:	61 95       	neg	r22
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	7d bd       	out	0x2d, r23	; 45
    1a0c:	6c bd       	out	0x2c, r22	; 44
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
  }else
  {
  Ret= E_NOK;

  }
  break;
    1a10:	08 95       	ret
	break;
}
case TIMER_CH2:
	{
  
		switch(prescaler_value){
    1a12:	80 91 fa 01 	lds	r24, 0x01FA
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	79 f1       	breq	.+94     	; 0x1a78 <Timer_Start+0x1a6>
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	40 f4       	brcc	.+16     	; 0x1a2e <Timer_Start+0x15c>
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	c9 f0       	breq	.+50     	; 0x1a54 <Timer_Start+0x182>
    1a22:	83 30       	cpi	r24, 0x03	; 3
    1a24:	10 f5       	brcc	.+68     	; 0x1a6a <Timer_Start+0x198>
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <Timer_Start+0x15a>
    1a2a:	5e c0       	rjmp	.+188    	; 0x1ae8 <Timer_Start+0x216>
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <Timer_Start+0x16c>
    1a2e:	86 30       	cpi	r24, 0x06	; 6
    1a30:	b9 f1       	breq	.+110    	; 0x1aa0 <Timer_Start+0x1ce>
    1a32:	86 30       	cpi	r24, 0x06	; 6
    1a34:	58 f1       	brcs	.+86     	; 0x1a8c <Timer_Start+0x1ba>
    1a36:	87 30       	cpi	r24, 0x07	; 7
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <Timer_Start+0x16a>
    1a3a:	56 c0       	rjmp	.+172    	; 0x1ae8 <Timer_Start+0x216>
    1a3c:	3b c0       	rjmp	.+118    	; 0x1ab4 <Timer_Start+0x1e2>
   
		  case TIMER_PRESCALER_NO :
			{
    
				if(Timer_Count < MAX0){
    1a3e:	6f 3f       	cpi	r22, 0xFF	; 255
    1a40:	71 05       	cpc	r23, r1
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <Timer_Start+0x174>
    1a44:	53 c0       	rjmp	.+166    	; 0x1aec <Timer_Start+0x21a>
     
			      TCCR2 |= TIMER_PRESCALER_NO;
    1a46:	85 b5       	in	r24, 0x25	; 37
    1a48:	81 60       	ori	r24, 0x01	; 1
    1a4a:	85 bd       	out	0x25, r24	; 37
		      
				  TCNT2 = MAX2 - Timer_Count;
    1a4c:	60 95       	com	r22
    1a4e:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	08 95       	ret
			break;
			}

case TIMER_PRESCALER_8 :
  {
          if(Timer_Count < MAX0)
    1a54:	6f 3f       	cpi	r22, 0xFF	; 255
    1a56:	71 05       	cpc	r23, r1
    1a58:	08 f0       	brcs	.+2      	; 0x1a5c <Timer_Start+0x18a>
    1a5a:	4a c0       	rjmp	.+148    	; 0x1af0 <Timer_Start+0x21e>
            {
           TCCR2 |=TIMER_PRESCALER_8;
    1a5c:	85 b5       	in	r24, 0x25	; 37
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	85 bd       	out	0x25, r24	; 37
           TCNT2 =MAX2 - Timer_Count;
    1a62:	60 95       	com	r22
    1a64:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	08 95       	ret
  }
  case TIMER_PRESCALER_32:
  {
    if(Timer_Count < MAX1)
         {
         TCCR2 |=TIMER_PRESCALER_32;
    1a6a:	85 b5       	in	r24, 0x25	; 37
    1a6c:	83 60       	ori	r24, 0x03	; 3
    1a6e:	85 bd       	out	0x25, r24	; 37
         TCNT2 =MAX2 - Timer_Count;
    1a70:	60 95       	com	r22
    1a72:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
        else
        {
    Ret=E_NOK;
  }

    break;
    1a76:	08 95       	ret
  }
  case TIMER_PRESCALER_64 :
  {
       if(Timer_Count < MAX2)
    1a78:	6f 3f       	cpi	r22, 0xFF	; 255
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	d8 f5       	brcc	.+118    	; 0x1af4 <Timer_Start+0x222>
       {
       TCCR2 |=TIMER_PRESCALER_64;
    1a7e:	85 b5       	in	r24, 0x25	; 37
    1a80:	84 60       	ori	r24, 0x04	; 4
    1a82:	85 bd       	out	0x25, r24	; 37
       TCNT2 =MAX2 - Timer_Count;
    1a84:	60 95       	com	r22
    1a86:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	08 95       	ret
  Ret=E_NOK;
  }
  break;
  }
  case TIMER_PRESCALER_128 :{
  if(Timer_Count < MAX2){
    1a8c:	6f 3f       	cpi	r22, 0xFF	; 255
    1a8e:	71 05       	cpc	r23, r1
    1a90:	98 f5       	brcc	.+102    	; 0x1af8 <Timer_Start+0x226>
  TCCR2 |= TIMER_PRESCALER_128;
    1a92:	85 b5       	in	r24, 0x25	; 37
    1a94:	85 60       	ori	r24, 0x05	; 5
    1a96:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
    1a98:	60 95       	com	r22
    1a9a:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
  Ret= E_NOK;
    }
  break;
  }
  case TIMER_PRESCALER_256 :{
  if(Timer_Count < MAX2){
    1aa0:	6f 3f       	cpi	r22, 0xFF	; 255
    1aa2:	71 05       	cpc	r23, r1
    1aa4:	58 f5       	brcc	.+86     	; 0x1afc <Timer_Start+0x22a>
  TCCR2 |= TIMER_PRESCALER_256;
    1aa6:	85 b5       	in	r24, 0x25	; 37
    1aa8:	86 60       	ori	r24, 0x06	; 6
    1aaa:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
    1aac:	60 95       	com	r22
    1aae:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	08 95       	ret

  }
  break;
  }
  case TIMER_PRESCALER_1024 :{
  if(Timer_Count < MAX2){
    1ab4:	6f 3f       	cpi	r22, 0xFF	; 255
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	18 f5       	brcc	.+70     	; 0x1b00 <Timer_Start+0x22e>
  TCCR2 |=TIMER_PRESCALER_1024;
    1aba:	85 b5       	in	r24, 0x25	; 37
    1abc:	87 60       	ori	r24, 0x07	; 7
    1abe:	85 bd       	out	0x25, r24	; 37
  TCNT2 =MAX2 - Timer_Count;
    1ac0:	60 95       	com	r22
    1ac2:	64 bd       	out	0x24, r22	; 36
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	08 95       	ret
break;
}
default:
Ret= E_NOK;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	08 95       	ret
default :
Ret=E_NOK;
break;
}

Ret=E_OK;
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	08 95       	ret
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	08 95       	ret
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	08 95       	ret
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	08 95       	ret
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	08 95       	ret
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	08 95       	ret
  Ret= E_NOK;
  break;
  }


  Ret= E_OK;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	08 95       	ret
  }
  default :
  Ret= E_NOK;

  }
Ret=E_OK;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	08 95       	ret
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	08 95       	ret
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	08 95       	ret
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	08 95       	ret
    1b00:	80 e0       	ldi	r24, 0x00	; 0
Ret= E_NOK;
break;
}
return Ret;

}
    1b02:	08 95       	ret

00001b04 <Timer_Stop>:
 * Description: This function stops the needed timer.
 *
 */
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{uint8_t Ret;
switch (Timer_CH_NO) {
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	51 f0       	breq	.+20     	; 0x1b1c <Timer_Stop+0x18>
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	18 f0       	brcs	.+6      	; 0x1b12 <Timer_Stop+0xe>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	91 f4       	brne	.+36     	; 0x1b34 <Timer_Stop+0x30>
    1b10:	0c c0       	rjmp	.+24     	; 0x1b2a <Timer_Stop+0x26>
  case TIMER_CH0:
  {
		TCCR0 &=0xF8;
    1b12:	83 b7       	in	r24, 0x33	; 51
    1b14:	88 7f       	andi	r24, 0xF8	; 248
    1b16:	83 bf       	out	0x33, r24	; 51
		Ret=E_OK;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1b1a:	08 95       	ret
  }
  case TIMER_CH1:
  {
	     TCCR1 &=0xFFF8;
    1b1c:	8e b5       	in	r24, 0x2e	; 46
    1b1e:	9f b5       	in	r25, 0x2f	; 47
    1b20:	88 7f       	andi	r24, 0xF8	; 248
    1b22:	9f bd       	out	0x2f, r25	; 47
    1b24:	8e bd       	out	0x2e, r24	; 46
		 Ret=E_OK;
    1b26:	80 e0       	ldi	r24, 0x00	; 0
		 break;
    1b28:	08 95       	ret
  }
  case TIMER_CH2:
    {
		 TCCR2 &= 0xF8;
    1b2a:	85 b5       	in	r24, 0x25	; 37
    1b2c:	88 7f       	andi	r24, 0xF8	; 248
    1b2e:	85 bd       	out	0x25, r24	; 37
		 Ret=E_OK;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
		 break;
    1b32:	08 95       	ret
    }
  default :
  Ret=E_NOK;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;

}
    1b36:	08 95       	ret

00001b38 <Timer_GetStatus>:
 * Description: This function is used to return if the flag of the timer is raised or not.
 *
 */
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO,uint8_t* Data)
{
  switch (Timer_CH_NO) {
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	59 f0       	breq	.+22     	; 0x1b52 <Timer_GetStatus+0x1a>
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	18 f0       	brcs	.+6      	; 0x1b46 <Timer_GetStatus+0xe>
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	c9 f4       	brne	.+50     	; 0x1b76 <Timer_GetStatus+0x3e>
    1b44:	0e c0       	rjmp	.+28     	; 0x1b62 <Timer_GetStatus+0x2a>
    case TIMER_CH0:
    {
  *Data =((TIFR>>TOV0)&1);
    1b46:	88 b7       	in	r24, 0x38	; 56
    1b48:	81 70       	andi	r24, 0x01	; 1
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	80 83       	st	Z, r24
    return E_OK;
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	08 95       	ret
    }
    case TIMER_CH1:
    {
    *Data =((TIFR>>TOV1)&1);
    1b52:	88 b7       	in	r24, 0x38	; 56
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	81 70       	andi	r24, 0x01	; 1
    1b5a:	fb 01       	movw	r30, r22
    1b5c:	80 83       	st	Z, r24
    return E_OK;
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	08 95       	ret
    }
     case TIMER_CH2:
      {
  *Data =((TIFR>>TOV2)&1);
    1b62:	88 b7       	in	r24, 0x38	; 56
    1b64:	82 95       	swap	r24
    1b66:	86 95       	lsr	r24
    1b68:	86 95       	lsr	r24
    1b6a:	83 70       	andi	r24, 0x03	; 3
    1b6c:	81 70       	andi	r24, 0x01	; 1
    1b6e:	fb 01       	movw	r30, r22
    1b70:	80 83       	st	Z, r24
    return E_OK;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	08 95       	ret
      }
    default :
    return E_NOK;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    1b78:	08 95       	ret

00001b7a <Timer_GetValue>:
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data)
{
    1b7a:	fb 01       	movw	r30, r22
	uint8_t Ret=0;
	switch (Timer_CH_NO) {
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	51 f0       	breq	.+20     	; 0x1b94 <Timer_GetValue+0x1a>
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	18 f0       	brcs	.+6      	; 0x1b8a <Timer_GetValue+0x10>
    1b84:	82 30       	cpi	r24, 0x02	; 2
    1b86:	89 f4       	brne	.+34     	; 0x1baa <Timer_GetValue+0x30>
    1b88:	0b c0       	rjmp	.+22     	; 0x1ba0 <Timer_GetValue+0x26>
		case TIMER_CH0:
		{
			*Data =TCNT0;
    1b8a:	82 b7       	in	r24, 0x32	; 50
    1b8c:	80 83       	st	Z, r24
    1b8e:	11 82       	std	Z+1, r1	; 0x01
			Ret= E_OK;
    1b90:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1b92:	08 95       	ret
		}
		case TIMER_CH1:
		{
			*Data =TCNT1;
    1b94:	8c b5       	in	r24, 0x2c	; 44
    1b96:	9d b5       	in	r25, 0x2d	; 45
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
			Ret= E_OK;
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1b9e:	08 95       	ret
		}
		case TIMER_CH2:
		{
			*Data =TCNT2;
    1ba0:	84 b5       	in	r24, 0x24	; 36
    1ba2:	80 83       	st	Z, r24
    1ba4:	11 82       	std	Z+1, r1	; 0x01
			Ret = E_OK;
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1ba8:	08 95       	ret
		}
		default :
		Ret= E_NOK;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
return Ret;

}
    1bac:	08 95       	ret

00001bae <SOS_Init>:
//static uint8_t u8_is_Started=0;
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	09 81       	ldd	r16, Y+1	; 0x01
uint8_t ret=E_OK;
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;
    1bba:	80 91 fd 01 	lds	r24, 0x01FD
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	80 93 fd 01 	sts	0x01FD, r24

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1bc4:	20 97       	sbiw	r28, 0x00	; 0
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <SOS_Init+0x1e>
uint8_t Start_status[Buffer_Size];
static uint8_t stu8_increment=0;

ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr )
{uint8_t u8_channel_ID=ConfigPtr->u8_Timer_channel;
uint8_t ret=E_OK;
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <SOS_Init+0x20>
/*************************************************************************/
/*			Intializ the required timer identified by the user			 */
/************************************************************************/
u8_Is_Intialized++;

if(ConfigPtr==NULL){ret=TMU_MODULE+NULL_PTR;}
    1bcc:	1a e2       	ldi	r17, 0x2A	; 42
switch(u8_channel_ID)
    1bce:	00 23       	and	r16, r16
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <SOS_Init+0x2a>
    1bd2:	02 30       	cpi	r16, 0x02	; 2
    1bd4:	79 f4       	brne	.+30     	; 0x1bf4 <SOS_Init+0x46>
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <SOS_Init+0x38>
{
	case TIMER_CH0:
			G_interrupt_Enable();
    1bd8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
			Timer_Init(&Timer_Configuration0);
    1bdc:	8a e8       	ldi	r24, 0x8A	; 138
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Timer_Init>
				break;
    1be4:	08 c0       	rjmp	.+16     	; 0x1bf6 <SOS_Init+0x48>
	case TIMER_CH2:
		G_interrupt_Enable();
    1be6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <G_interrupt_Enable>
		Timer_Init(&Timer_Configuration2);
    1bea:	80 e9       	ldi	r24, 0x90	; 144
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Timer_Init>
			break;
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <SOS_Init+0x48>
	default:
			ret+=E_NOK;
    1bf4:	1f 5f       	subi	r17, 0xFF	; 255

/*************************************************************************/
/*Intializ the required timer identified by the user using required prescaler  */
/************************************************************************/

switch(ConfigPtr->u8_resolution)
    1bf6:	88 81       	ld	r24, Y
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	99 f4       	brne	.+38     	; 0x1c22 <SOS_Init+0x74>
{
	case TIMER_RESOLUTION_1_MS:
	{
		switch(u8_channel_ID)
    1bfc:	00 23       	and	r16, r16
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <SOS_Init+0x58>
    1c00:	02 30       	cpi	r16, 0x02	; 2
    1c02:	69 f4       	brne	.+26     	; 0x1c1e <SOS_Init+0x70>
    1c04:	06 c0       	rjmp	.+12     	; 0x1c12 <SOS_Init+0x64>
		{
			case TIMER_CH0 :
		Timer_Start(TIMER_CH0,250);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	6a ef       	ldi	r22, 0xFA	; 250
    1c0a:	70 e0       	ldi	r23, 0x00	; 0
    1c0c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <Timer_Start>
					//TCNT0=5;
					break;
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <SOS_Init+0x76>
			case TIMER_CH2 :
				Timer_Start(TIMER_CH2,14);
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	6e e0       	ldi	r22, 0x0E	; 14
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <Timer_Start>
					break;
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <SOS_Init+0x76>
			default:
				ret+=E_NOK;
    1c1e:	1f 5f       	subi	r17, 0xFF	; 255
					break;
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <SOS_Init+0x76>
	}	
	
	
	
	default:
	ret+=E_NOK;
    1c22:	1f 5f       	subi	r17, 0xFF	; 255

/****************************************************************************/
/*      Deal with Errors  to be returned									*/
/***************************************************************************/
return ret;
}
    1c24:	81 2f       	mov	r24, r17
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	08 95       	ret

00001c30 <TMU_DeInit>:
	uint8_t ret=E_OK;
	/************************************************************************************************/
	/*1    	De_intialize the timer																	*/
	/*2		make sure this function is not called unless timer was intialized before by  TMU_INIT	*/
	/************************************************************************************************/
if (u8_Is_Intialized==1)
    1c30:	80 91 fd 01 	lds	r24, 0x01FD
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	41 f4       	brne	.+16     	; 0x1c48 <TMU_DeInit+0x18>
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);
    1c38:	84 e8       	ldi	r24, 0x84	; 132
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Timer_Init>

	u8_Is_Intialized=0;
    1c40:	10 92 fd 01 	sts	0x01FD, r1



ERROR_STATUS TMU_DeInit( void )
{
	uint8_t ret=E_OK;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	08 95       	ret
{/*Make the timer without a clk*/
	Timer_Init(&Timer_Deinit_Configuration0);

	u8_Is_Intialized=0;
	
}else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <TMU_DeInit+0x20>
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	08 95       	ret
	else{
	ret=E_NOK;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
	}

	
return ret;	
}
    1c52:	08 95       	ret

00001c54 <SOS_Create_Task>:
	/*
	this enables interrupt and start the timer with the required configurations
	and provide the request to request buffer (ptr_to_func,delay) Dispatcher with the call back function needed(consumer)
	and make sure this function must not be excuted unless Init happened and De_init not happened
  	*/
	if(u8_Is_Intialized == 1)
    1c54:	50 91 fd 01 	lds	r21, 0x01FD
    1c58:	51 30       	cpi	r21, 0x01	; 1
    1c5a:	99 f4       	brne	.+38     	; 0x1c82 <SOS_Create_Task+0x2e>
	{
		
		
		(Buffer_Array[u8_function_index]).Fuction_consumer=Function_Consumer;
    1c5c:	e4 2f       	mov	r30, r20
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	e1 5d       	subi	r30, 0xD1	; 209
    1c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
		(Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
    1c74:	65 83       	std	Z+5, r22	; 0x05
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
    1c76:	34 83       	std	Z+4, r19	; 0x04
    1c78:	23 83       	std	Z+3, r18	; 0x03
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	82 83       	std	Z+2, r24	; 0x02
	
return ret;	
}

ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t  u8_Preodicity,uint8_t u8_function_index,uint16_t u16_Time_delay)
{uint8_t ret=E_OK;
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	08 95       	ret
		(Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
		(Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
		
		
	}
	else if(u8_Is_Intialized>1){ret+=MULTIPLE_INIT;}else{
    1c82:	52 30       	cpi	r21, 0x02	; 2
    1c84:	10 f0       	brcs	.+4      	; 0x1c8a <SOS_Create_Task+0x36>
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	08 95       	ret
		ret+=NOT_INIT;
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return ret;
}
    1c8c:	08 95       	ret

00001c8e <SOS_Run>:

ERROR_STATUS SOS_Run(void)
{	uint8_t ret=E_OK;
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
	uint16_t u16_Time_needed=0;
	ptr_to_Fun Excuted;
	*//***********************************************************************/
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
    1c92:	80 91 fb 01 	lds	r24, 0x01FB
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <SOS_Run+0xe>
    1c9a:	65 c0       	rjmp	.+202    	; 0x1d66 <SOS_Run+0xd8>
{	u8Excution_to_be_done=0;
    1c9c:	10 92 fb 01 	sts	0x01FB, r1

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1ca0:	10 92 fc 01 	sts	0x01FC, r1
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
	status_flag =(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped;
	preodic_status_flag=(Buffer_Array[u8_FUN_index]).preodic;
*/
/****************************************************************/
/* check if the event is stopped ... do nothing*/
		if((Buffer_Array[u8_FUN_index]).u8_flag_is_stopped==0){ret=E_OK;}
    1ca6:	cf e2       	ldi	r28, 0x2F	; 47
    1ca8:	d2 e0       	ldi	r29, 0x02	; 2
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	f9 01       	movw	r30, r18
    1cae:	ee 0f       	add	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	ee 0f       	add	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	ec 0f       	add	r30, r28
    1cbc:	fd 1f       	adc	r31, r29
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	88 23       	and	r24, r24
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <SOS_Run+0x38>
    1cc4:	48 c0       	rjmp	.+144    	; 0x1d56 <SOS_Run+0xc8>
	/*if the timer started .. and condition met excute the consumer*/
	/***************************************************************/
		
	/********************************************/
	/*Count up when flag is set**/
	((Buffer_Array[u8_FUN_index]).u16_Counter)++;
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	ec 0f       	add	r30, r28
    1cd6:	fd 1f       	adc	r31, r29
    1cd8:	86 81       	ldd	r24, Z+6	; 0x06
    1cda:	97 81       	ldd	r25, Z+7	; 0x07
    1cdc:	ac 01       	movw	r20, r24
    1cde:	4f 5f       	subi	r20, 0xFF	; 255
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	57 83       	std	Z+7, r21	; 0x07
    1ce4:	46 83       	std	Z+6, r20	; 0x06
	/*make the flag down*/
							
			
/*	u16Excution_to_be_done=100;  ISR*/
	if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_index]).u16_Counter) )
    1ce6:	83 81       	ldd	r24, Z+3	; 0x03
    1ce8:	94 81       	ldd	r25, Z+4	; 0x04
    1cea:	48 17       	cp	r20, r24
    1cec:	59 07       	cpc	r21, r25
    1cee:	d1 f4       	brne	.+52     	; 0x1d24 <SOS_Run+0x96>
	{
		((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	ee 0f       	add	r30, r30
    1cf8:	ff 1f       	adc	r31, r31
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	ec 0f       	add	r30, r28
    1d00:	fd 1f       	adc	r31, r29
    1d02:	01 90       	ld	r0, Z+
    1d04:	f0 81       	ld	r31, Z
    1d06:	e0 2d       	mov	r30, r0
    1d08:	09 95       	icall
	/******************************************/
	/*Make it zero so that it will work the next time at the required time (to stop it of ovf)*/
		(Buffer_Array[u8_FUN_index]).u16_Counter=0;
    1d0a:	e0 91 fc 01 	lds	r30, 0x01FC
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	ec 0f       	add	r30, r28
    1d1e:	fd 1f       	adc	r31, r29
    1d20:	17 82       	std	Z+7, r1	; 0x07
    1d22:	16 82       	std	Z+6, r1	; 0x06
		
	/*********************************************************/
	/* if not preodic increment the index after excuteing	*/
	/*********************************************************/

	if((Buffer_Array[u8_FUN_index]).preodic==0)
    1d24:	80 91 fc 01 	lds	r24, 0x01FC
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	ee 0f       	add	r30, r30
    1d32:	ff 1f       	adc	r31, r31
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	ec 0f       	add	r30, r28
    1d3a:	fd 1f       	adc	r31, r29
    1d3c:	25 81       	ldd	r18, Z+5	; 0x05
    1d3e:	22 23       	and	r18, r18
    1d40:	51 f4       	brne	.+20     	; 0x1d56 <SOS_Run+0xc8>
	{
		/*to make it see the next event in the next time
		Also Status_flag =1 so that this function will be stopped
		*/
		(Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;	
    1d42:	fc 01       	movw	r30, r24
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	ec 0f       	add	r30, r28
    1d52:	fd 1f       	adc	r31, r29
    1d54:	12 82       	std	Z+2, r1	; 0x02
	/*					LOOP upon Buffer Request						*/
	/*********************************************************************/
if (u8Excution_to_be_done==1)
{	u8Excution_to_be_done=0;

		for (u8_FUN_index=0;u8_FUN_index<Buffer_Size;u8_FUN_index++)
    1d56:	20 91 fc 01 	lds	r18, 0x01FC
    1d5a:	2f 5f       	subi	r18, 0xFF	; 255
    1d5c:	20 93 fc 01 	sts	0x01FC, r18
    1d60:	24 30       	cpi	r18, 0x04	; 4
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <SOS_Run+0xd8>
    1d64:	a2 cf       	rjmp	.-188    	; 0x1caa <SOS_Run+0x1c>

		}		
	}
}	
return ret;
}
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <TMU_Stop_Timer>:
{

	/***************************************************/
	/*     Set the stop flag							*/
	/***************************************************/
	(Buffer_Array[u8_function_index]).u8_flag_is_stopped=0;
    1d6e:	e8 2f       	mov	r30, r24
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	e1 5d       	subi	r30, 0xD1	; 209
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
    1d82:	12 82       	std	Z+2, r1	; 0x02
}
    1d84:	08 95       	ret

00001d86 <Task1>:
"3.Do You like Chocolate? "
,"4.Do You like Embedded Systems ? ","5.Do You Know My name ? ","6.NO ","7.YES ","8.False Answer!! ","9.Correct Answer!! ","10.Game Over"};
 static uint8_t X_value=0;
 static uint8_t Y_value=0;
	
	if (u8_Init_finished==1)
    1d86:	80 91 fe 01 	lds	r24, 0x01FE
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <Task1+0xa>
    1d8e:	6a c0       	rjmp	.+212    	; 0x1e64 <Task1+0xde>
	{
	if (stu8_increment<10)
    1d90:	80 91 ff 01 	lds	r24, 0x01FF
    1d94:	8a 30       	cpi	r24, 0x0A	; 10
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <Task1+0x14>
    1d98:	61 c0       	rjmp	.+194    	; 0x1e5c <Task1+0xd6>
	{
		if (u8count < 16)
    1d9a:	80 91 00 02 	lds	r24, 0x0200
    1d9e:	80 31       	cpi	r24, 0x10	; 16
    1da0:	28 f4       	brcc	.+10     	; 0x1dac <Task1+0x26>
		{
			X_value=u8count;
    1da2:	80 93 01 02 	sts	0x0201, r24
			Y_value=0;
    1da6:	10 92 02 02 	sts	0x0202, r1
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <Task1+0x32>
		}
		
		else if(u8count >= 16 || twoDarr[stu8_increment][u8count])
		{
			Y_value=1;
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	90 93 02 02 	sts	0x0202, r25
			X_value=u8count-16;
    1db2:	80 51       	subi	r24, 0x10	; 16
    1db4:	80 93 01 02 	sts	0x0201, r24
		}
		
		if(twoDarr[stu8_increment][u8count])
    1db8:	20 91 ff 01 	lds	r18, 0x01FF
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 91 00 02 	lds	r20, 0x0200
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	ee 0f       	add	r30, r30
    1dc6:	ff 1f       	adc	r31, r31
    1dc8:	e2 95       	swap	r30
    1dca:	f2 95       	swap	r31
    1dcc:	f0 7f       	andi	r31, 0xF0	; 240
    1dce:	fe 27       	eor	r31, r30
    1dd0:	e0 7f       	andi	r30, 0xF0	; 240
    1dd2:	fe 27       	eor	r31, r30
    1dd4:	e4 0f       	add	r30, r20
    1dd6:	f1 1d       	adc	r31, r1
    1dd8:	ea 56       	subi	r30, 0x6A	; 106
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	f1 f0       	breq	.+60     	; 0x1e1e <Task1+0x98>
		{
			LCD_goto_xy(X_value,Y_value);
    1de2:	80 91 01 02 	lds	r24, 0x0201
    1de6:	60 91 02 02 	lds	r22, 0x0202
    1dea:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_goto_xy>
			LCD_send_char(twoDarr[stu8_increment][u8count++]);
    1dee:	90 91 00 02 	lds	r25, 0x0200
    1df2:	e0 91 ff 01 	lds	r30, 0x01FF
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	e2 95       	swap	r30
    1dfe:	f2 95       	swap	r31
    1e00:	f0 7f       	andi	r31, 0xF0	; 240
    1e02:	fe 27       	eor	r31, r30
    1e04:	e0 7f       	andi	r30, 0xF0	; 240
    1e06:	fe 27       	eor	r31, r30
    1e08:	e9 0f       	add	r30, r25
    1e0a:	f1 1d       	adc	r31, r1
    1e0c:	ea 56       	subi	r30, 0x6A	; 106
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	9f 5f       	subi	r25, 0xFF	; 255
    1e14:	90 93 00 02 	sts	0x0200, r25
    1e18:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_send_char>
    1e1c:	21 c0       	rjmp	.+66     	; 0x1e60 <Task1+0xda>
			
		}
		else if((twoDarr[stu8_increment][u8count]== '\0') && u8count < 32)
    1e1e:	40 32       	cpi	r20, 0x20	; 32
    1e20:	d0 f4       	brcc	.+52     	; 0x1e56 <Task1+0xd0>
		{while(u8count <= 32){
    1e22:	41 32       	cpi	r20, 0x21	; 33
    1e24:	e8 f4       	brcc	.+58     	; 0x1e60 <Task1+0xda>
			twoDarr[stu8_increment][u8count]=' ';
    1e26:	86 e9       	ldi	r24, 0x96	; 150
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 95       	swap	r18
    1e30:	32 95       	swap	r19
    1e32:	30 7f       	andi	r19, 0xF0	; 240
    1e34:	32 27       	eor	r19, r18
    1e36:	20 7f       	andi	r18, 0xF0	; 240
    1e38:	32 27       	eor	r19, r18
    1e3a:	50 e2       	ldi	r21, 0x20	; 32
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	e4 0f       	add	r30, r20
    1e40:	f1 1d       	adc	r31, r1
    1e42:	e8 0f       	add	r30, r24
    1e44:	f9 1f       	adc	r31, r25
    1e46:	50 83       	st	Z, r21
    1e48:	4f 5f       	subi	r20, 0xFF	; 255
			LCD_goto_xy(X_value,Y_value);
			LCD_send_char(twoDarr[stu8_increment][u8count++]);
			
		}
		else if((twoDarr[stu8_increment][u8count]== '\0') && u8count < 32)
		{while(u8count <= 32){
    1e4a:	41 32       	cpi	r20, 0x21	; 33
    1e4c:	b9 f7       	brne	.-18     	; 0x1e3c <Task1+0xb6>
    1e4e:	81 e2       	ldi	r24, 0x21	; 33
    1e50:	80 93 00 02 	sts	0x0200, r24
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <Task1+0xda>
			twoDarr[stu8_increment][u8count]=' ';
			u8count++;
		}
	}else{u8count=0;}
    1e56:	10 92 00 02 	sts	0x0200, r1
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <Task1+0xda>
	}else{stu8_increment=0;}			
    1e5c:	10 92 ff 01 	sts	0x01FF, r1
u8_Init_finished=0;
    1e60:	10 92 fe 01 	sts	0x01FE, r1
    1e64:	08 95       	ret

00001e66 <Task2>:
}
void Task2(void){	
	
static uint8_t u8_Counter=0;
static uint8_t u8_Counter1=0;
	if (pushButtonGetStatus(BTN_0))
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 1c 09 	call	0x1238	; 0x1238 <pushButtonGetStatus>
    1e6c:	88 23       	and	r24, r24
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <Task2+0x14>
	{	
		u8_Counter++;
    1e70:	80 91 03 02 	lds	r24, 0x0203
    1e74:	8f 5f       	subi	r24, 0xFF	; 255
    1e76:	80 93 03 02 	sts	0x0203, r24
	}
	if (u8_Counter > 20)
    1e7a:	80 91 03 02 	lds	r24, 0x0203
    1e7e:	85 31       	cpi	r24, 0x15	; 21
    1e80:	38 f0       	brcs	.+14     	; 0x1e90 <Task2+0x2a>
	{
	stu8_increment++;
    1e82:	80 91 ff 01 	lds	r24, 0x01FF
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	80 93 ff 01 	sts	0x01FF, r24
	u8_Counter=0;
    1e8c:	10 92 03 02 	sts	0x0203, r1
	}
	
	if (pushButtonGetStatus(BTN_1))
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	0e 94 1c 09 	call	0x1238	; 0x1238 <pushButtonGetStatus>
    1e96:	88 23       	and	r24, r24
    1e98:	29 f0       	breq	.+10     	; 0x1ea4 <Task2+0x3e>
	{
		u8_Counter1++;
    1e9a:	80 91 04 02 	lds	r24, 0x0204
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 93 04 02 	sts	0x0204, r24
		//stu8_increment++;
	}
	if (u8_Counter1 > 20)
    1ea4:	80 91 04 02 	lds	r24, 0x0204
    1ea8:	85 31       	cpi	r24, 0x15	; 21
    1eaa:	38 f0       	brcs	.+14     	; 0x1eba <Task2+0x54>
	{
		stu8_increment--;
    1eac:	80 91 ff 01 	lds	r24, 0x01FF
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	80 93 ff 01 	sts	0x01FF, r24
		u8_Counter1=0;
    1eb6:	10 92 04 02 	sts	0x0204, r1
    1eba:	08 95       	ret

00001ebc <Tmu_excute>:
	
}
void Tmu_excute(void){
	
		
}
    1ebc:	08 95       	ret

00001ebe <timer_interrupt>:


void timer_interrupt(void)
{
	u8Excution_to_be_done =1;	
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	80 93 fb 01 	sts	0x01FB, r24
    1ec4:	08 95       	ret

00001ec6 <main>:
#include "ECUAL/LCD/LCD.h"
#include "MCAL/PushButtons/pushButton.h"
int main(void)
{
	
	DIO_init(&Dio_configurationB);
    1ec6:	84 e7       	ldi	r24, 0x74	; 116
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
	DIO_init(&Dio_configurationC);
    1ece:	81 e7       	ldi	r24, 0x71	; 113
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
	LCD_config_pins();
    1ed6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_config_pins>
	DIO_init(&Dio_configurationD);
    1eda:	8e e6       	ldi	r24, 0x6E	; 110
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_init>
	SOS_Init(&TMU_Configuration);
    1ee2:	86 ed       	ldi	r24, 0xD6	; 214
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <SOS_Init>

	SOS_Create_Task(LCD_init,1,0,50);
    1eea:	85 e4       	ldi	r24, 0x45	; 69
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	22 e3       	ldi	r18, 0x32	; 50
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <SOS_Create_Task>
	SOS_Create_Task(Task1,1,1,20);
    1efa:	83 ec       	ldi	r24, 0xC3	; 195
    1efc:	9e e0       	ldi	r25, 0x0E	; 14
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	24 e1       	ldi	r18, 0x14	; 20
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <SOS_Create_Task>
	SOS_Create_Task(Task2,1,2,10);
    1f0a:	83 e3       	ldi	r24, 0x33	; 51
    1f0c:	9f e0       	ldi	r25, 0x0F	; 15
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	42 e0       	ldi	r20, 0x02	; 2
    1f12:	2a e0       	ldi	r18, 0x0A	; 10
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <SOS_Create_Task>
	//	SOS_Create_Task(Tmu_excute,1,2,50);
	
	while(1)
	{
		SOS_Run();
    1f1a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <SOS_Run>
    1f1e:	fd cf       	rjmp	.-6      	; 0x1f1a <main+0x54>

00001f20 <__divsf3>:
    1f20:	0c d0       	rcall	.+24     	; 0x1f3a <__divsf3x>
    1f22:	e6 c0       	rjmp	.+460    	; 0x20f0 <__fp_round>
    1f24:	de d0       	rcall	.+444    	; 0x20e2 <__fp_pscB>
    1f26:	40 f0       	brcs	.+16     	; 0x1f38 <__divsf3+0x18>
    1f28:	d5 d0       	rcall	.+426    	; 0x20d4 <__fp_pscA>
    1f2a:	30 f0       	brcs	.+12     	; 0x1f38 <__divsf3+0x18>
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <__divsf3+0x16>
    1f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f30:	19 f0       	breq	.+6      	; 0x1f38 <__divsf3+0x18>
    1f32:	c7 c0       	rjmp	.+398    	; 0x20c2 <__fp_inf>
    1f34:	51 11       	cpse	r21, r1
    1f36:	10 c1       	rjmp	.+544    	; 0x2158 <__fp_szero>
    1f38:	ca c0       	rjmp	.+404    	; 0x20ce <__fp_nan>

00001f3a <__divsf3x>:
    1f3a:	eb d0       	rcall	.+470    	; 0x2112 <__fp_split3>
    1f3c:	98 f3       	brcs	.-26     	; 0x1f24 <__divsf3+0x4>

00001f3e <__divsf3_pse>:
    1f3e:	99 23       	and	r25, r25
    1f40:	c9 f3       	breq	.-14     	; 0x1f34 <__divsf3+0x14>
    1f42:	55 23       	and	r21, r21
    1f44:	b1 f3       	breq	.-20     	; 0x1f32 <__divsf3+0x12>
    1f46:	95 1b       	sub	r25, r21
    1f48:	55 0b       	sbc	r21, r21
    1f4a:	bb 27       	eor	r27, r27
    1f4c:	aa 27       	eor	r26, r26
    1f4e:	62 17       	cp	r22, r18
    1f50:	73 07       	cpc	r23, r19
    1f52:	84 07       	cpc	r24, r20
    1f54:	38 f0       	brcs	.+14     	; 0x1f64 <__divsf3_pse+0x26>
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	44 1f       	adc	r20, r20
    1f60:	aa 1f       	adc	r26, r26
    1f62:	a9 f3       	breq	.-22     	; 0x1f4e <__divsf3_pse+0x10>
    1f64:	33 d0       	rcall	.+102    	; 0x1fcc <__divsf3_pse+0x8e>
    1f66:	0e 2e       	mov	r0, r30
    1f68:	3a f0       	brmi	.+14     	; 0x1f78 <__divsf3_pse+0x3a>
    1f6a:	e0 e8       	ldi	r30, 0x80	; 128
    1f6c:	30 d0       	rcall	.+96     	; 0x1fce <__divsf3_pse+0x90>
    1f6e:	91 50       	subi	r25, 0x01	; 1
    1f70:	50 40       	sbci	r21, 0x00	; 0
    1f72:	e6 95       	lsr	r30
    1f74:	00 1c       	adc	r0, r0
    1f76:	ca f7       	brpl	.-14     	; 0x1f6a <__divsf3_pse+0x2c>
    1f78:	29 d0       	rcall	.+82     	; 0x1fcc <__divsf3_pse+0x8e>
    1f7a:	fe 2f       	mov	r31, r30
    1f7c:	27 d0       	rcall	.+78     	; 0x1fcc <__divsf3_pse+0x8e>
    1f7e:	66 0f       	add	r22, r22
    1f80:	77 1f       	adc	r23, r23
    1f82:	88 1f       	adc	r24, r24
    1f84:	bb 1f       	adc	r27, r27
    1f86:	26 17       	cp	r18, r22
    1f88:	37 07       	cpc	r19, r23
    1f8a:	48 07       	cpc	r20, r24
    1f8c:	ab 07       	cpc	r26, r27
    1f8e:	b0 e8       	ldi	r27, 0x80	; 128
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <__divsf3_pse+0x56>
    1f92:	bb 0b       	sbc	r27, r27
    1f94:	80 2d       	mov	r24, r0
    1f96:	bf 01       	movw	r22, r30
    1f98:	ff 27       	eor	r31, r31
    1f9a:	93 58       	subi	r25, 0x83	; 131
    1f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9e:	2a f0       	brmi	.+10     	; 0x1faa <__divsf3_pse+0x6c>
    1fa0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fa2:	51 05       	cpc	r21, r1
    1fa4:	68 f0       	brcs	.+26     	; 0x1fc0 <__divsf3_pse+0x82>
    1fa6:	8d c0       	rjmp	.+282    	; 0x20c2 <__fp_inf>
    1fa8:	d7 c0       	rjmp	.+430    	; 0x2158 <__fp_szero>
    1faa:	5f 3f       	cpi	r21, 0xFF	; 255
    1fac:	ec f3       	brlt	.-6      	; 0x1fa8 <__divsf3_pse+0x6a>
    1fae:	98 3e       	cpi	r25, 0xE8	; 232
    1fb0:	dc f3       	brlt	.-10     	; 0x1fa8 <__divsf3_pse+0x6a>
    1fb2:	86 95       	lsr	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	f7 95       	ror	r31
    1fbc:	9f 5f       	subi	r25, 0xFF	; 255
    1fbe:	c9 f7       	brne	.-14     	; 0x1fb2 <__divsf3_pse+0x74>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	91 1d       	adc	r25, r1
    1fc4:	96 95       	lsr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	97 f9       	bld	r25, 7
    1fca:	08 95       	ret
    1fcc:	e1 e0       	ldi	r30, 0x01	; 1
    1fce:	66 0f       	add	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	88 1f       	adc	r24, r24
    1fd4:	bb 1f       	adc	r27, r27
    1fd6:	62 17       	cp	r22, r18
    1fd8:	73 07       	cpc	r23, r19
    1fda:	84 07       	cpc	r24, r20
    1fdc:	ba 07       	cpc	r27, r26
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__divsf3_pse+0xaa>
    1fe0:	62 1b       	sub	r22, r18
    1fe2:	73 0b       	sbc	r23, r19
    1fe4:	84 0b       	sbc	r24, r20
    1fe6:	ba 0b       	sbc	r27, r26
    1fe8:	ee 1f       	adc	r30, r30
    1fea:	88 f7       	brcc	.-30     	; 0x1fce <__divsf3_pse+0x90>
    1fec:	e0 95       	com	r30
    1fee:	08 95       	ret

00001ff0 <__fixunssfsi>:
    1ff0:	98 d0       	rcall	.+304    	; 0x2122 <__fp_splitA>
    1ff2:	88 f0       	brcs	.+34     	; 0x2016 <__fixunssfsi+0x26>
    1ff4:	9f 57       	subi	r25, 0x7F	; 127
    1ff6:	90 f0       	brcs	.+36     	; 0x201c <__fixunssfsi+0x2c>
    1ff8:	b9 2f       	mov	r27, r25
    1ffa:	99 27       	eor	r25, r25
    1ffc:	b7 51       	subi	r27, 0x17	; 23
    1ffe:	a0 f0       	brcs	.+40     	; 0x2028 <__fixunssfsi+0x38>
    2000:	d1 f0       	breq	.+52     	; 0x2036 <__fixunssfsi+0x46>
    2002:	66 0f       	add	r22, r22
    2004:	77 1f       	adc	r23, r23
    2006:	88 1f       	adc	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	1a f0       	brmi	.+6      	; 0x2012 <__fixunssfsi+0x22>
    200c:	ba 95       	dec	r27
    200e:	c9 f7       	brne	.-14     	; 0x2002 <__fixunssfsi+0x12>
    2010:	12 c0       	rjmp	.+36     	; 0x2036 <__fixunssfsi+0x46>
    2012:	b1 30       	cpi	r27, 0x01	; 1
    2014:	81 f0       	breq	.+32     	; 0x2036 <__fixunssfsi+0x46>
    2016:	9f d0       	rcall	.+318    	; 0x2156 <__fp_zero>
    2018:	b1 e0       	ldi	r27, 0x01	; 1
    201a:	08 95       	ret
    201c:	9c c0       	rjmp	.+312    	; 0x2156 <__fp_zero>
    201e:	67 2f       	mov	r22, r23
    2020:	78 2f       	mov	r23, r24
    2022:	88 27       	eor	r24, r24
    2024:	b8 5f       	subi	r27, 0xF8	; 248
    2026:	39 f0       	breq	.+14     	; 0x2036 <__fixunssfsi+0x46>
    2028:	b9 3f       	cpi	r27, 0xF9	; 249
    202a:	cc f3       	brlt	.-14     	; 0x201e <__fixunssfsi+0x2e>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b3 95       	inc	r27
    2034:	d9 f7       	brne	.-10     	; 0x202c <__fixunssfsi+0x3c>
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__fixunssfsi+0x56>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <__floatunsisf>:
    2048:	e8 94       	clt
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__floatsisf+0x12>

0000204c <__floatsisf>:
    204c:	97 fb       	bst	r25, 7
    204e:	3e f4       	brtc	.+14     	; 0x205e <__floatsisf+0x12>
    2050:	90 95       	com	r25
    2052:	80 95       	com	r24
    2054:	70 95       	com	r23
    2056:	61 95       	neg	r22
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	99 23       	and	r25, r25
    2060:	a9 f0       	breq	.+42     	; 0x208c <__floatsisf+0x40>
    2062:	f9 2f       	mov	r31, r25
    2064:	96 e9       	ldi	r25, 0x96	; 150
    2066:	bb 27       	eor	r27, r27
    2068:	93 95       	inc	r25
    206a:	f6 95       	lsr	r31
    206c:	87 95       	ror	r24
    206e:	77 95       	ror	r23
    2070:	67 95       	ror	r22
    2072:	b7 95       	ror	r27
    2074:	f1 11       	cpse	r31, r1
    2076:	f8 cf       	rjmp	.-16     	; 0x2068 <__floatsisf+0x1c>
    2078:	fa f4       	brpl	.+62     	; 0x20b8 <__floatsisf+0x6c>
    207a:	bb 0f       	add	r27, r27
    207c:	11 f4       	brne	.+4      	; 0x2082 <__floatsisf+0x36>
    207e:	60 ff       	sbrs	r22, 0
    2080:	1b c0       	rjmp	.+54     	; 0x20b8 <__floatsisf+0x6c>
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	16 c0       	rjmp	.+44     	; 0x20b8 <__floatsisf+0x6c>
    208c:	88 23       	and	r24, r24
    208e:	11 f0       	breq	.+4      	; 0x2094 <__floatsisf+0x48>
    2090:	96 e9       	ldi	r25, 0x96	; 150
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <__floatsisf+0x6a>
    2094:	77 23       	and	r23, r23
    2096:	21 f0       	breq	.+8      	; 0x20a0 <__floatsisf+0x54>
    2098:	9e e8       	ldi	r25, 0x8E	; 142
    209a:	87 2f       	mov	r24, r23
    209c:	76 2f       	mov	r23, r22
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <__floatsisf+0x5e>
    20a0:	66 23       	and	r22, r22
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <__floatsisf+0x74>
    20a4:	96 e8       	ldi	r25, 0x86	; 134
    20a6:	86 2f       	mov	r24, r22
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	2a f0       	brmi	.+10     	; 0x20b8 <__floatsisf+0x6c>
    20ae:	9a 95       	dec	r25
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	da f7       	brpl	.-10     	; 0x20ae <__floatsisf+0x62>
    20b8:	88 0f       	add	r24, r24
    20ba:	96 95       	lsr	r25
    20bc:	87 95       	ror	r24
    20be:	97 f9       	bld	r25, 7
    20c0:	08 95       	ret

000020c2 <__fp_inf>:
    20c2:	97 f9       	bld	r25, 7
    20c4:	9f 67       	ori	r25, 0x7F	; 127
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	08 95       	ret

000020ce <__fp_nan>:
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	08 95       	ret

000020d4 <__fp_pscA>:
    20d4:	00 24       	eor	r0, r0
    20d6:	0a 94       	dec	r0
    20d8:	16 16       	cp	r1, r22
    20da:	17 06       	cpc	r1, r23
    20dc:	18 06       	cpc	r1, r24
    20de:	09 06       	cpc	r0, r25
    20e0:	08 95       	ret

000020e2 <__fp_pscB>:
    20e2:	00 24       	eor	r0, r0
    20e4:	0a 94       	dec	r0
    20e6:	12 16       	cp	r1, r18
    20e8:	13 06       	cpc	r1, r19
    20ea:	14 06       	cpc	r1, r20
    20ec:	05 06       	cpc	r0, r21
    20ee:	08 95       	ret

000020f0 <__fp_round>:
    20f0:	09 2e       	mov	r0, r25
    20f2:	03 94       	inc	r0
    20f4:	00 0c       	add	r0, r0
    20f6:	11 f4       	brne	.+4      	; 0x20fc <__fp_round+0xc>
    20f8:	88 23       	and	r24, r24
    20fa:	52 f0       	brmi	.+20     	; 0x2110 <__fp_round+0x20>
    20fc:	bb 0f       	add	r27, r27
    20fe:	40 f4       	brcc	.+16     	; 0x2110 <__fp_round+0x20>
    2100:	bf 2b       	or	r27, r31
    2102:	11 f4       	brne	.+4      	; 0x2108 <__fp_round+0x18>
    2104:	60 ff       	sbrs	r22, 0
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <__fp_round+0x20>
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	8f 4f       	sbci	r24, 0xFF	; 255
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	08 95       	ret

00002112 <__fp_split3>:
    2112:	57 fd       	sbrc	r21, 7
    2114:	90 58       	subi	r25, 0x80	; 128
    2116:	44 0f       	add	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	59 f0       	breq	.+22     	; 0x2132 <__fp_splitA+0x10>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	71 f0       	breq	.+28     	; 0x213c <__fp_splitA+0x1a>
    2120:	47 95       	ror	r20

00002122 <__fp_splitA>:
    2122:	88 0f       	add	r24, r24
    2124:	97 fb       	bst	r25, 7
    2126:	99 1f       	adc	r25, r25
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_splitA+0x20>
    212a:	9f 3f       	cpi	r25, 0xFF	; 255
    212c:	79 f0       	breq	.+30     	; 0x214c <__fp_splitA+0x2a>
    212e:	87 95       	ror	r24
    2130:	08 95       	ret
    2132:	12 16       	cp	r1, r18
    2134:	13 06       	cpc	r1, r19
    2136:	14 06       	cpc	r1, r20
    2138:	55 1f       	adc	r21, r21
    213a:	f2 cf       	rjmp	.-28     	; 0x2120 <__fp_split3+0xe>
    213c:	46 95       	lsr	r20
    213e:	f1 df       	rcall	.-30     	; 0x2122 <__fp_splitA>
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <__fp_splitA+0x30>
    2142:	16 16       	cp	r1, r22
    2144:	17 06       	cpc	r1, r23
    2146:	18 06       	cpc	r1, r24
    2148:	99 1f       	adc	r25, r25
    214a:	f1 cf       	rjmp	.-30     	; 0x212e <__fp_splitA+0xc>
    214c:	86 95       	lsr	r24
    214e:	71 05       	cpc	r23, r1
    2150:	61 05       	cpc	r22, r1
    2152:	08 94       	sec
    2154:	08 95       	ret

00002156 <__fp_zero>:
    2156:	e8 94       	clt

00002158 <__fp_szero>:
    2158:	bb 27       	eor	r27, r27
    215a:	66 27       	eor	r22, r22
    215c:	77 27       	eor	r23, r23
    215e:	cb 01       	movw	r24, r22
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__mulsf3>:
    2164:	0b d0       	rcall	.+22     	; 0x217c <__mulsf3x>
    2166:	c4 cf       	rjmp	.-120    	; 0x20f0 <__fp_round>
    2168:	b5 df       	rcall	.-150    	; 0x20d4 <__fp_pscA>
    216a:	28 f0       	brcs	.+10     	; 0x2176 <__mulsf3+0x12>
    216c:	ba df       	rcall	.-140    	; 0x20e2 <__fp_pscB>
    216e:	18 f0       	brcs	.+6      	; 0x2176 <__mulsf3+0x12>
    2170:	95 23       	and	r25, r21
    2172:	09 f0       	breq	.+2      	; 0x2176 <__mulsf3+0x12>
    2174:	a6 cf       	rjmp	.-180    	; 0x20c2 <__fp_inf>
    2176:	ab cf       	rjmp	.-170    	; 0x20ce <__fp_nan>
    2178:	11 24       	eor	r1, r1
    217a:	ee cf       	rjmp	.-36     	; 0x2158 <__fp_szero>

0000217c <__mulsf3x>:
    217c:	ca df       	rcall	.-108    	; 0x2112 <__fp_split3>
    217e:	a0 f3       	brcs	.-24     	; 0x2168 <__mulsf3+0x4>

00002180 <__mulsf3_pse>:
    2180:	95 9f       	mul	r25, r21
    2182:	d1 f3       	breq	.-12     	; 0x2178 <__mulsf3+0x14>
    2184:	95 0f       	add	r25, r21
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	55 1f       	adc	r21, r21
    218a:	62 9f       	mul	r22, r18
    218c:	f0 01       	movw	r30, r0
    218e:	72 9f       	mul	r23, r18
    2190:	bb 27       	eor	r27, r27
    2192:	f0 0d       	add	r31, r0
    2194:	b1 1d       	adc	r27, r1
    2196:	63 9f       	mul	r22, r19
    2198:	aa 27       	eor	r26, r26
    219a:	f0 0d       	add	r31, r0
    219c:	b1 1d       	adc	r27, r1
    219e:	aa 1f       	adc	r26, r26
    21a0:	64 9f       	mul	r22, r20
    21a2:	66 27       	eor	r22, r22
    21a4:	b0 0d       	add	r27, r0
    21a6:	a1 1d       	adc	r26, r1
    21a8:	66 1f       	adc	r22, r22
    21aa:	82 9f       	mul	r24, r18
    21ac:	22 27       	eor	r18, r18
    21ae:	b0 0d       	add	r27, r0
    21b0:	a1 1d       	adc	r26, r1
    21b2:	62 1f       	adc	r22, r18
    21b4:	73 9f       	mul	r23, r19
    21b6:	b0 0d       	add	r27, r0
    21b8:	a1 1d       	adc	r26, r1
    21ba:	62 1f       	adc	r22, r18
    21bc:	83 9f       	mul	r24, r19
    21be:	a0 0d       	add	r26, r0
    21c0:	61 1d       	adc	r22, r1
    21c2:	22 1f       	adc	r18, r18
    21c4:	74 9f       	mul	r23, r20
    21c6:	33 27       	eor	r19, r19
    21c8:	a0 0d       	add	r26, r0
    21ca:	61 1d       	adc	r22, r1
    21cc:	23 1f       	adc	r18, r19
    21ce:	84 9f       	mul	r24, r20
    21d0:	60 0d       	add	r22, r0
    21d2:	21 1d       	adc	r18, r1
    21d4:	82 2f       	mov	r24, r18
    21d6:	76 2f       	mov	r23, r22
    21d8:	6a 2f       	mov	r22, r26
    21da:	11 24       	eor	r1, r1
    21dc:	9f 57       	subi	r25, 0x7F	; 127
    21de:	50 40       	sbci	r21, 0x00	; 0
    21e0:	8a f0       	brmi	.+34     	; 0x2204 <__mulsf3_pse+0x84>
    21e2:	e1 f0       	breq	.+56     	; 0x221c <__mulsf3_pse+0x9c>
    21e4:	88 23       	and	r24, r24
    21e6:	4a f0       	brmi	.+18     	; 0x21fa <__mulsf3_pse+0x7a>
    21e8:	ee 0f       	add	r30, r30
    21ea:	ff 1f       	adc	r31, r31
    21ec:	bb 1f       	adc	r27, r27
    21ee:	66 1f       	adc	r22, r22
    21f0:	77 1f       	adc	r23, r23
    21f2:	88 1f       	adc	r24, r24
    21f4:	91 50       	subi	r25, 0x01	; 1
    21f6:	50 40       	sbci	r21, 0x00	; 0
    21f8:	a9 f7       	brne	.-22     	; 0x21e4 <__mulsf3_pse+0x64>
    21fa:	9e 3f       	cpi	r25, 0xFE	; 254
    21fc:	51 05       	cpc	r21, r1
    21fe:	70 f0       	brcs	.+28     	; 0x221c <__mulsf3_pse+0x9c>
    2200:	60 cf       	rjmp	.-320    	; 0x20c2 <__fp_inf>
    2202:	aa cf       	rjmp	.-172    	; 0x2158 <__fp_szero>
    2204:	5f 3f       	cpi	r21, 0xFF	; 255
    2206:	ec f3       	brlt	.-6      	; 0x2202 <__mulsf3_pse+0x82>
    2208:	98 3e       	cpi	r25, 0xE8	; 232
    220a:	dc f3       	brlt	.-10     	; 0x2202 <__mulsf3_pse+0x82>
    220c:	86 95       	lsr	r24
    220e:	77 95       	ror	r23
    2210:	67 95       	ror	r22
    2212:	b7 95       	ror	r27
    2214:	f7 95       	ror	r31
    2216:	e7 95       	ror	r30
    2218:	9f 5f       	subi	r25, 0xFF	; 255
    221a:	c1 f7       	brne	.-16     	; 0x220c <__mulsf3_pse+0x8c>
    221c:	fe 2b       	or	r31, r30
    221e:	88 0f       	add	r24, r24
    2220:	91 1d       	adc	r25, r1
    2222:	96 95       	lsr	r25
    2224:	87 95       	ror	r24
    2226:	97 f9       	bld	r25, 7
    2228:	08 95       	ret

0000222a <__mulsi3>:
    222a:	62 9f       	mul	r22, r18
    222c:	d0 01       	movw	r26, r0
    222e:	73 9f       	mul	r23, r19
    2230:	f0 01       	movw	r30, r0
    2232:	82 9f       	mul	r24, r18
    2234:	e0 0d       	add	r30, r0
    2236:	f1 1d       	adc	r31, r1
    2238:	64 9f       	mul	r22, r20
    223a:	e0 0d       	add	r30, r0
    223c:	f1 1d       	adc	r31, r1
    223e:	92 9f       	mul	r25, r18
    2240:	f0 0d       	add	r31, r0
    2242:	83 9f       	mul	r24, r19
    2244:	f0 0d       	add	r31, r0
    2246:	74 9f       	mul	r23, r20
    2248:	f0 0d       	add	r31, r0
    224a:	65 9f       	mul	r22, r21
    224c:	f0 0d       	add	r31, r0
    224e:	99 27       	eor	r25, r25
    2250:	72 9f       	mul	r23, r18
    2252:	b0 0d       	add	r27, r0
    2254:	e1 1d       	adc	r30, r1
    2256:	f9 1f       	adc	r31, r25
    2258:	63 9f       	mul	r22, r19
    225a:	b0 0d       	add	r27, r0
    225c:	e1 1d       	adc	r30, r1
    225e:	f9 1f       	adc	r31, r25
    2260:	bd 01       	movw	r22, r26
    2262:	cf 01       	movw	r24, r30
    2264:	11 24       	eor	r1, r1
    2266:	08 95       	ret

00002268 <__udivmodsi4>:
    2268:	a1 e2       	ldi	r26, 0x21	; 33
    226a:	1a 2e       	mov	r1, r26
    226c:	aa 1b       	sub	r26, r26
    226e:	bb 1b       	sub	r27, r27
    2270:	fd 01       	movw	r30, r26
    2272:	0d c0       	rjmp	.+26     	; 0x228e <__udivmodsi4_ep>

00002274 <__udivmodsi4_loop>:
    2274:	aa 1f       	adc	r26, r26
    2276:	bb 1f       	adc	r27, r27
    2278:	ee 1f       	adc	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	a2 17       	cp	r26, r18
    227e:	b3 07       	cpc	r27, r19
    2280:	e4 07       	cpc	r30, r20
    2282:	f5 07       	cpc	r31, r21
    2284:	20 f0       	brcs	.+8      	; 0x228e <__udivmodsi4_ep>
    2286:	a2 1b       	sub	r26, r18
    2288:	b3 0b       	sbc	r27, r19
    228a:	e4 0b       	sbc	r30, r20
    228c:	f5 0b       	sbc	r31, r21

0000228e <__udivmodsi4_ep>:
    228e:	66 1f       	adc	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	88 1f       	adc	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	1a 94       	dec	r1
    2298:	69 f7       	brne	.-38     	; 0x2274 <__udivmodsi4_loop>
    229a:	60 95       	com	r22
    229c:	70 95       	com	r23
    229e:	80 95       	com	r24
    22a0:	90 95       	com	r25
    22a2:	9b 01       	movw	r18, r22
    22a4:	ac 01       	movw	r20, r24
    22a6:	bd 01       	movw	r22, r26
    22a8:	cf 01       	movw	r24, r30
    22aa:	08 95       	ret

000022ac <_exit>:
    22ac:	f8 94       	cli

000022ae <__stop_program>:
    22ae:	ff cf       	rjmp	.-2      	; 0x22ae <__stop_program>
