
Tester_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004a  00800062  00800062  000004c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000203e  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  000026a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c98  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b70  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c5a  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000058d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_11>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_12>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_13>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3a       	cpi	r26, 0xAC	; 172
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  8a:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:
	u8_MotorErrorStatus=E_NOK;
	return  u8_MotorErrorStatus;
}


MY_ISR(INT2_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	switch (interrupt_phase){
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	19 f0       	breq	.+6      	; 0xc2 <__vector_3+0x30>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	a9 f0       	breq	.+42     	; 0xea <__vector_3+0x58>
  c0:	25 c0       	rjmp	.+74     	; 0x10c <__vector_3+0x7a>
		case RISSING_EDGGE:
		Timer_Start(TimerCH,TIMER_COUNT_NU );
  c2:	6f ef       	ldi	r22, 0xFF	; 255
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ca:	0e 94 19 01 	call	0x232	; 0x232 <Timer_Start>
		CLEAR_BIT(GICR, INT2_INTER_BIT);
  ce:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <GICR>
		CLEAR_BIT(MCUCSR,SWICU_EDGE_MASK);
  d2:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <MCUCSR>
  d6:	9f 7b       	andi	r25, 0xBF	; 191
  d8:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <MCUCSR>
		 SET_BIT(GICR, INT2_INTER_BIT);
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <GICR>
		interrupt_phase=FALLING_EDGGE;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
		break;
  e8:	11 c0       	rjmp	.+34     	; 0x10c <__vector_3+0x7a>
		
		case FALLING_EDGGE:
		Timer_Stop(TimerCH);
  ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Timer_Stop>
		CLEAR_BIT(GICR, INT2_INTER_BIT);
  f2:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <GICR>
		SET_BIT(MCUCSR,SWICU_EDGE_MASK);
  f6:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <MCUCSR>
  fa:	90 64       	ori	r25, 0x40	; 64
  fc:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <MCUCSR>
		SET_BIT(GICR, INT2_INTER_BIT);
 100:	80 62       	ori	r24, 0x20	; 32
 102:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <GICR>
		interrupt_phase=STOP_INERE;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		break;
	}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <main>:

#include <avr/io.h>


int main(void)
{
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main>

00000130 <__vector_12>:
#define SPR1    0x02
#define SPR0    0x01
static SPI_CBF  spi_cbf;

MY_ISR(SPI_STC_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	spi_cbf();
 152:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <spi_cbf>
 156:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <spi_cbf+0x1>
 15a:	09 95       	icall
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_14>:
volatile static UartTX_CBF TX_CBF;
volatile static UartRX_CBF RX_CBF;


MY_ISR(USART_UDRE_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	UDR  = TX_CBF();
 1a0:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <TX_CBF>
 1a4:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <TX_CBF+0x1>
 1a8:	09 95       	icall
 1aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <UDR>
	CLEAR_BIT(UCSRB,DATA_REGISTER_EMPTY_INT);
 1ae:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <UCSRB>
 1b2:	8f 7d       	andi	r24, 0xDF	; 223
 1b4:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <UCSRB>
	u8_UDREmptyFlag = TRUE;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_UDREmptyFlag>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_13>:
MY_ISR(USART_RXC_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	RX_CBF(UDR);
 202:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <RX_CBF>
 206:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <RX_CBF+0x1>
 20a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <UDR>
 20e:	09 95       	icall
}	
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <Timer_Start>:
		TimerErrorStatus= TIMER_MODULE_ERROR_NUMBER + ERROR_NULL_PTR ;
	}
	
	return TimerErrorStatus;

}
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	c1 f0       	breq	.+48     	; 0x266 <Timer_Start+0x34>
 236:	18 f0       	brcs	.+6      	; 0x23e <Timer_Start+0xc>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	69 f1       	breq	.+90     	; 0x296 <Timer_Start+0x64>
 23c:	40 c0       	rjmp	.+128    	; 0x2be <Timer_Start+0x8c>
 23e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 242:	80 ff       	sbrs	r24, 0
 244:	3e c0       	rjmp	.+124    	; 0x2c2 <Timer_Start+0x90>
 246:	6f 3f       	cpi	r22, 0xFF	; 255
 248:	71 05       	cpc	r23, r1
 24a:	09 f0       	breq	.+2      	; 0x24e <Timer_Start+0x1c>
 24c:	e0 f5       	brcc	.+120    	; 0x2c6 <Timer_Start+0x94>
 24e:	60 95       	com	r22
 250:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <TCNT0>
 254:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <TCCR0>
 258:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <gu8_PrescalerTimer0>
 25c:	89 2b       	or	r24, r25
 25e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <TCCR0>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
 266:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 26a:	81 ff       	sbrs	r24, 1
 26c:	2e c0       	rjmp	.+92     	; 0x2ca <Timer_Start+0x98>
 26e:	71 95       	neg	r23
 270:	61 95       	neg	r22
 272:	71 09       	sbc	r23, r1
 274:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <TCNT1+0x1>
 278:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <TCNT1>
 27c:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <gu8_PrescalerTimer1>
 280:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <TCCR1>
 284:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <TCCR1+0x1>
 288:	82 2b       	or	r24, r18
 28a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <TCCR1+0x1>
 28e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <TCCR1>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 29a:	82 ff       	sbrs	r24, 2
 29c:	18 c0       	rjmp	.+48     	; 0x2ce <Timer_Start+0x9c>
 29e:	6f 3f       	cpi	r22, 0xFF	; 255
 2a0:	71 05       	cpc	r23, r1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <Timer_Start+0x74>
 2a4:	b0 f4       	brcc	.+44     	; 0x2d2 <Timer_Start+0xa0>
 2a6:	60 95       	com	r22
 2a8:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <TCNT2>
 2ac:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <TCCR2>
 2b0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu8_PrescalerTimer2>
 2b4:	89 2b       	or	r24, r25
 2b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <TCCR2>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
 2be:	8b e1       	ldi	r24, 0x1B	; 27
 2c0:	08 95       	ret
 2c2:	86 e1       	ldi	r24, 0x16	; 22
 2c4:	08 95       	ret
 2c6:	8c e1       	ldi	r24, 0x1C	; 28
 2c8:	08 95       	ret
 2ca:	86 e1       	ldi	r24, 0x16	; 22
 2cc:	08 95       	ret
 2ce:	86 e1       	ldi	r24, 0x16	; 22
 2d0:	08 95       	ret
 2d2:	8c e1       	ldi	r24, 0x1C	; 28
 2d4:	08 95       	ret

000002d6 <Timer_Stop>:
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	79 f0       	breq	.+30     	; 0x2f8 <Timer_Stop+0x22>
 2da:	18 f0       	brcs	.+6      	; 0x2e2 <Timer_Stop+0xc>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	b9 f0       	breq	.+46     	; 0x30e <Timer_Stop+0x38>
 2e0:	21 c0       	rjmp	.+66     	; 0x324 <Timer_Stop+0x4e>
 2e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 2e6:	80 ff       	sbrs	r24, 0
 2e8:	1f c0       	rjmp	.+62     	; 0x328 <Timer_Stop+0x52>
 2ea:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <TCCR0>
 2ee:	88 7f       	andi	r24, 0xF8	; 248
 2f0:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <TCCR0>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	08 95       	ret
 2f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 2fc:	81 ff       	sbrs	r24, 1
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <Timer_Stop+0x56>
 300:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <TCCR1B>
 304:	88 7f       	andi	r24, 0xF8	; 248
 306:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <TCCR1B>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	08 95       	ret
 30e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_TimerInitFLag>
 312:	82 ff       	sbrs	r24, 2
 314:	0d c0       	rjmp	.+26     	; 0x330 <Timer_Stop+0x5a>
 316:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <TCCR2>
 31a:	88 7f       	andi	r24, 0xF8	; 248
 31c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <TCCR2>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
 324:	8b e1       	ldi	r24, 0x1B	; 27
 326:	08 95       	ret
 328:	86 e1       	ldi	r24, 0x16	; 22
 32a:	08 95       	ret
 32c:	86 e1       	ldi	r24, 0x16	; 22
 32e:	08 95       	ret
 330:	86 e1       	ldi	r24, 0x16	; 22
 332:	08 95       	ret

00000334 <__vector_11>:


MY_ISR(TIMER0_OVF_vect){
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	if ( p_TOV_0_INT!=NULL)
 356:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <p_TOV_0_INT>
 35a:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <p_TOV_0_INT+0x1>
 35e:	30 97       	sbiw	r30, 0x00	; 0
 360:	09 f0       	breq	.+2      	; 0x364 <__vector_11+0x30>
	{
		 p_TOV_0_INT();
 362:	09 95       	icall
	}
	
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_9>:
MY_ISR(TIMER1_OVF_vect){
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	
	if ( p_TOV_1_INT!=NULL)
 3a8:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <p_TOV_1_INT>
 3ac:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <p_TOV_1_INT+0x1>
 3b0:	30 97       	sbiw	r30, 0x00	; 0
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_9+0x30>
	{
		p_TOV_1_INT();
 3b4:	09 95       	icall
	}
	
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	bf 91       	pop	r27
 3bc:	af 91       	pop	r26
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	7f 91       	pop	r23
 3c4:	6f 91       	pop	r22
 3c6:	5f 91       	pop	r21
 3c8:	4f 91       	pop	r20
 3ca:	3f 91       	pop	r19
 3cc:	2f 91       	pop	r18
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_5>:

MY_ISR(TIMER2_OVF_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	2f 93       	push	r18
 3e4:	3f 93       	push	r19
 3e6:	4f 93       	push	r20
 3e8:	5f 93       	push	r21
 3ea:	6f 93       	push	r22
 3ec:	7f 93       	push	r23
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	af 93       	push	r26
 3f4:	bf 93       	push	r27
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	if ( p_TOV_2_INT!=NULL)
 3fa:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <p_TOV_2_INT>
 3fe:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <p_TOV_2_INT+0x1>
 402:	30 97       	sbiw	r30, 0x00	; 0
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		p_TOV_2_INT();
 406:	09 95       	icall
	}
 408:	ff 91       	pop	r31
 40a:	ef 91       	pop	r30
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
