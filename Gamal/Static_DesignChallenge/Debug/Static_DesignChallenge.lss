
Static_DesignChallenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002928  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800060  00800060  0000299c  2**0
                  ALLOC
  2 .stab         000041d0  00000000  00000000  0000299c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017f8  00000000  00000000  00006b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 37       	cpi	r26, 0x7A	; 122
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 17 14 	call	0x282e	; 0x282e <main>
      74:	0c 94 92 14 	jmp	0x2924	; 0x2924 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_init>:
* Return value: u8_error- variable that describe the error status
* Description: This function can set the direction of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <DIO_init+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <DIO_init+0x8>
      84:	0f 92       	push	r0
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	9b 83       	std	Y+3, r25	; 0x03
      8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_error;
	if(DIO_info == NULL_Ptr)
      8e:	8a 81       	ldd	r24, Y+2	; 0x02
      90:	9b 81       	ldd	r25, Y+3	; 0x03
      92:	00 97       	sbiw	r24, 0x00	; 0
      94:	19 f4       	brne	.+6      	; 0x9c <DIO_init+0x20>
	{
		u8_error = E_NOk;
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	89 83       	std	Y+1, r24	; 0x01
      9a:	9d c0       	rjmp	.+314    	; 0x1d6 <DIO_init+0x15a>
	}
	else
	{
		switch(DIO_info->GPIO)
      9c:	ea 81       	ldd	r30, Y+2	; 0x02
      9e:	fb 81       	ldd	r31, Y+3	; 0x03
      a0:	80 81       	ld	r24, Z
      a2:	28 2f       	mov	r18, r24
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	3d 83       	std	Y+5, r19	; 0x05
      a8:	2c 83       	std	Y+4, r18	; 0x04
      aa:	8c 81       	ldd	r24, Y+4	; 0x04
      ac:	9d 81       	ldd	r25, Y+5	; 0x05
      ae:	81 30       	cpi	r24, 0x01	; 1
      b0:	91 05       	cpc	r25, r1
      b2:	a9 f1       	breq	.+106    	; 0x11e <DIO_init+0xa2>
      b4:	2c 81       	ldd	r18, Y+4	; 0x04
      b6:	3d 81       	ldd	r19, Y+5	; 0x05
      b8:	22 30       	cpi	r18, 0x02	; 2
      ba:	31 05       	cpc	r19, r1
      bc:	2c f4       	brge	.+10     	; 0xc8 <DIO_init+0x4c>
      be:	8c 81       	ldd	r24, Y+4	; 0x04
      c0:	9d 81       	ldd	r25, Y+5	; 0x05
      c2:	00 97       	sbiw	r24, 0x00	; 0
      c4:	71 f0       	breq	.+28     	; 0xe2 <DIO_init+0x66>
      c6:	85 c0       	rjmp	.+266    	; 0x1d2 <DIO_init+0x156>
      c8:	2c 81       	ldd	r18, Y+4	; 0x04
      ca:	3d 81       	ldd	r19, Y+5	; 0x05
      cc:	22 30       	cpi	r18, 0x02	; 2
      ce:	31 05       	cpc	r19, r1
      d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_init+0x58>
      d2:	43 c0       	rjmp	.+134    	; 0x15a <DIO_init+0xde>
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	91 05       	cpc	r25, r1
      dc:	09 f4       	brne	.+2      	; 0xe0 <DIO_init+0x64>
      de:	5b c0       	rjmp	.+182    	; 0x196 <DIO_init+0x11a>
      e0:	78 c0       	rjmp	.+240    	; 0x1d2 <DIO_init+0x156>
		{
		case GPIOA:
			if(DIO_info->dir == INPUT)
      e2:	ea 81       	ldd	r30, Y+2	; 0x02
      e4:	fb 81       	ldd	r31, Y+3	; 0x03
      e6:	82 81       	ldd	r24, Z+2	; 0x02
      e8:	88 23       	and	r24, r24
      ea:	69 f4       	brne	.+26     	; 0x106 <DIO_init+0x8a>
			{
				PORTA_DIR &= ~(DIO_info->pins);
      ec:	aa e3       	ldi	r26, 0x3A	; 58
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	ea e3       	ldi	r30, 0x3A	; 58
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	98 2f       	mov	r25, r24
      f8:	ea 81       	ldd	r30, Y+2	; 0x02
      fa:	fb 81       	ldd	r31, Y+3	; 0x03
      fc:	81 81       	ldd	r24, Z+1	; 0x01
      fe:	80 95       	com	r24
     100:	89 23       	and	r24, r25
     102:	8c 93       	st	X, r24
     104:	0a c0       	rjmp	.+20     	; 0x11a <DIO_init+0x9e>
			}
			else
			{
				PORTA_DIR |= DIO_info->pins;
     106:	aa e3       	ldi	r26, 0x3A	; 58
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ea e3       	ldi	r30, 0x3A	; 58
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	90 81       	ld	r25, Z
     110:	ea 81       	ldd	r30, Y+2	; 0x02
     112:	fb 81       	ldd	r31, Y+3	; 0x03
     114:	81 81       	ldd	r24, Z+1	; 0x01
     116:	89 2b       	or	r24, r25
     118:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     11a:	19 82       	std	Y+1, r1	; 0x01
     11c:	5c c0       	rjmp	.+184    	; 0x1d6 <DIO_init+0x15a>
			break;

		case GPIOB:
			if(DIO_info->dir == INPUT)
     11e:	ea 81       	ldd	r30, Y+2	; 0x02
     120:	fb 81       	ldd	r31, Y+3	; 0x03
     122:	82 81       	ldd	r24, Z+2	; 0x02
     124:	88 23       	and	r24, r24
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_init+0xc6>
			{
				PORTB_DIR &= ~(DIO_info->pins);
     128:	a7 e3       	ldi	r26, 0x37	; 55
     12a:	b0 e0       	ldi	r27, 0x00	; 0
     12c:	e7 e3       	ldi	r30, 0x37	; 55
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	98 2f       	mov	r25, r24
     134:	ea 81       	ldd	r30, Y+2	; 0x02
     136:	fb 81       	ldd	r31, Y+3	; 0x03
     138:	81 81       	ldd	r24, Z+1	; 0x01
     13a:	80 95       	com	r24
     13c:	89 23       	and	r24, r25
     13e:	8c 93       	st	X, r24
     140:	0a c0       	rjmp	.+20     	; 0x156 <DIO_init+0xda>
			}
			else
			{
				PORTB_DIR |= DIO_info->pins;
     142:	a7 e3       	ldi	r26, 0x37	; 55
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e7 e3       	ldi	r30, 0x37	; 55
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	90 81       	ld	r25, Z
     14c:	ea 81       	ldd	r30, Y+2	; 0x02
     14e:	fb 81       	ldd	r31, Y+3	; 0x03
     150:	81 81       	ldd	r24, Z+1	; 0x01
     152:	89 2b       	or	r24, r25
     154:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     156:	19 82       	std	Y+1, r1	; 0x01
     158:	3e c0       	rjmp	.+124    	; 0x1d6 <DIO_init+0x15a>
			break;
		case GPIOC:
			if(DIO_info->dir == INPUT)
     15a:	ea 81       	ldd	r30, Y+2	; 0x02
     15c:	fb 81       	ldd	r31, Y+3	; 0x03
     15e:	82 81       	ldd	r24, Z+2	; 0x02
     160:	88 23       	and	r24, r24
     162:	69 f4       	brne	.+26     	; 0x17e <DIO_init+0x102>
			{
				PORTC_DIR &= ~(DIO_info->pins);
     164:	a4 e3       	ldi	r26, 0x34	; 52
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e4 e3       	ldi	r30, 0x34	; 52
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	98 2f       	mov	r25, r24
     170:	ea 81       	ldd	r30, Y+2	; 0x02
     172:	fb 81       	ldd	r31, Y+3	; 0x03
     174:	81 81       	ldd	r24, Z+1	; 0x01
     176:	80 95       	com	r24
     178:	89 23       	and	r24, r25
     17a:	8c 93       	st	X, r24
     17c:	0a c0       	rjmp	.+20     	; 0x192 <DIO_init+0x116>
			}
			else
			{
				PORTC_DIR |= DIO_info->pins;
     17e:	a4 e3       	ldi	r26, 0x34	; 52
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e4 e3       	ldi	r30, 0x34	; 52
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	ea 81       	ldd	r30, Y+2	; 0x02
     18a:	fb 81       	ldd	r31, Y+3	; 0x03
     18c:	81 81       	ldd	r24, Z+1	; 0x01
     18e:	89 2b       	or	r24, r25
     190:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     192:	19 82       	std	Y+1, r1	; 0x01
     194:	20 c0       	rjmp	.+64     	; 0x1d6 <DIO_init+0x15a>
			break;

		case GPIOD:
			if(DIO_info->dir == INPUT)
     196:	ea 81       	ldd	r30, Y+2	; 0x02
     198:	fb 81       	ldd	r31, Y+3	; 0x03
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	88 23       	and	r24, r24
     19e:	69 f4       	brne	.+26     	; 0x1ba <DIO_init+0x13e>
			{
				PORTD_DIR &= ~(DIO_info->pins);
     1a0:	a1 e3       	ldi	r26, 0x31	; 49
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e1 e3       	ldi	r30, 0x31	; 49
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	98 2f       	mov	r25, r24
     1ac:	ea 81       	ldd	r30, Y+2	; 0x02
     1ae:	fb 81       	ldd	r31, Y+3	; 0x03
     1b0:	81 81       	ldd	r24, Z+1	; 0x01
     1b2:	80 95       	com	r24
     1b4:	89 23       	and	r24, r25
     1b6:	8c 93       	st	X, r24
     1b8:	0a c0       	rjmp	.+20     	; 0x1ce <DIO_init+0x152>
			}
			else
			{
				PORTD_DIR |= DIO_info->pins;
     1ba:	a1 e3       	ldi	r26, 0x31	; 49
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	e1 e3       	ldi	r30, 0x31	; 49
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	90 81       	ld	r25, Z
     1c4:	ea 81       	ldd	r30, Y+2	; 0x02
     1c6:	fb 81       	ldd	r31, Y+3	; 0x03
     1c8:	81 81       	ldd	r24, Z+1	; 0x01
     1ca:	89 2b       	or	r24, r25
     1cc:	8c 93       	st	X, r24
			}
			u8_error = E_ok;
     1ce:	19 82       	std	Y+1, r1	; 0x01
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x15a>
			break;

		default:
			u8_error = E_NOk;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8_error;
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <DIO_Write>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can set the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <DIO_Write+0x6>
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <DIO_Write+0x8>
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <DIO_Write+0xa>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	8a 83       	std	Y+2, r24	; 0x02
     1f8:	6b 83       	std	Y+3, r22	; 0x03
     1fa:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	28 2f       	mov	r18, r24
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	3e 83       	std	Y+6, r19	; 0x06
     204:	2d 83       	std	Y+5, r18	; 0x05
     206:	8d 81       	ldd	r24, Y+5	; 0x05
     208:	9e 81       	ldd	r25, Y+6	; 0x06
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	91 05       	cpc	r25, r1
     20e:	61 f1       	breq	.+88     	; 0x268 <DIO_Write+0x80>
     210:	2d 81       	ldd	r18, Y+5	; 0x05
     212:	3e 81       	ldd	r19, Y+6	; 0x06
     214:	22 30       	cpi	r18, 0x02	; 2
     216:	31 05       	cpc	r19, r1
     218:	2c f4       	brge	.+10     	; 0x224 <DIO_Write+0x3c>
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	9e 81       	ldd	r25, Y+6	; 0x06
     21e:	00 97       	sbiw	r24, 0x00	; 0
     220:	69 f0       	breq	.+26     	; 0x23c <DIO_Write+0x54>
     222:	64 c0       	rjmp	.+200    	; 0x2ec <DIO_Write+0x104>
     224:	2d 81       	ldd	r18, Y+5	; 0x05
     226:	3e 81       	ldd	r19, Y+6	; 0x06
     228:	22 30       	cpi	r18, 0x02	; 2
     22a:	31 05       	cpc	r19, r1
     22c:	99 f1       	breq	.+102    	; 0x294 <DIO_Write+0xac>
     22e:	8d 81       	ldd	r24, Y+5	; 0x05
     230:	9e 81       	ldd	r25, Y+6	; 0x06
     232:	83 30       	cpi	r24, 0x03	; 3
     234:	91 05       	cpc	r25, r1
     236:	09 f4       	brne	.+2      	; 0x23a <DIO_Write+0x52>
     238:	43 c0       	rjmp	.+134    	; 0x2c0 <DIO_Write+0xd8>
     23a:	58 c0       	rjmp	.+176    	; 0x2ec <DIO_Write+0x104>
	{
	case GPIOA:

		if(value == LOW)
     23c:	8c 81       	ldd	r24, Y+4	; 0x04
     23e:	88 23       	and	r24, r24
     240:	59 f4       	brne	.+22     	; 0x258 <DIO_Write+0x70>
		{
			PORTA_DATA &= ~(pins);
     242:	ab e3       	ldi	r26, 0x3B	; 59
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	eb e3       	ldi	r30, 0x3B	; 59
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	98 2f       	mov	r25, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	80 95       	com	r24
     252:	89 23       	and	r24, r25
     254:	8c 93       	st	X, r24
     256:	06 c0       	rjmp	.+12     	; 0x264 <DIO_Write+0x7c>
		}
		else
		{
			PORTA_DATA = (pins&value);
     258:	eb e3       	ldi	r30, 0x3B	; 59
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	8c 81       	ldd	r24, Y+4	; 0x04
     260:	89 23       	and	r24, r25
     262:	80 83       	st	Z, r24
		}
		u8_error = E_ok;
     264:	19 82       	std	Y+1, r1	; 0x01
     266:	44 c0       	rjmp	.+136    	; 0x2f0 <DIO_Write+0x108>
		break;

	case GPIOB:
		if(value == LOW)
     268:	8c 81       	ldd	r24, Y+4	; 0x04
     26a:	88 23       	and	r24, r24
     26c:	59 f4       	brne	.+22     	; 0x284 <DIO_Write+0x9c>
		{
			PORTB_DATA &= ~(pins);
     26e:	a8 e3       	ldi	r26, 0x38	; 56
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	e8 e3       	ldi	r30, 0x38	; 56
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	98 2f       	mov	r25, r24
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	80 95       	com	r24
     27e:	89 23       	and	r24, r25
     280:	8c 93       	st	X, r24
     282:	06 c0       	rjmp	.+12     	; 0x290 <DIO_Write+0xa8>
		}
		else
		{
			PORTB_DATA = (pins&value);
     284:	e8 e3       	ldi	r30, 0x38	; 56
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	9b 81       	ldd	r25, Y+3	; 0x03
     28a:	8c 81       	ldd	r24, Y+4	; 0x04
     28c:	89 23       	and	r24, r25
     28e:	80 83       	st	Z, r24
		}
		u8_error = E_ok;
     290:	19 82       	std	Y+1, r1	; 0x01
     292:	2e c0       	rjmp	.+92     	; 0x2f0 <DIO_Write+0x108>
		break;
	case GPIOC:
		if(value == LOW)
     294:	8c 81       	ldd	r24, Y+4	; 0x04
     296:	88 23       	and	r24, r24
     298:	59 f4       	brne	.+22     	; 0x2b0 <DIO_Write+0xc8>
		{
			PORTC_DATA &= ~(pins);
     29a:	a5 e3       	ldi	r26, 0x35	; 53
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e5 e3       	ldi	r30, 0x35	; 53
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	98 2f       	mov	r25, r24
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	80 95       	com	r24
     2aa:	89 23       	and	r24, r25
     2ac:	8c 93       	st	X, r24
     2ae:	06 c0       	rjmp	.+12     	; 0x2bc <DIO_Write+0xd4>
		}
		else
		{
			PORTC_DATA = (pins&value);
     2b0:	e5 e3       	ldi	r30, 0x35	; 53
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	8c 81       	ldd	r24, Y+4	; 0x04
     2b8:	89 23       	and	r24, r25
     2ba:	80 83       	st	Z, r24
		}
		u8_error = E_ok;
     2bc:	19 82       	std	Y+1, r1	; 0x01
     2be:	18 c0       	rjmp	.+48     	; 0x2f0 <DIO_Write+0x108>
		break;

	case GPIOD:
		if(value == LOW)
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	88 23       	and	r24, r24
     2c4:	59 f4       	brne	.+22     	; 0x2dc <DIO_Write+0xf4>
		{
			PORTD_DATA &= ~(pins);
     2c6:	a2 e3       	ldi	r26, 0x32	; 50
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e2 e3       	ldi	r30, 0x32	; 50
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	98 2f       	mov	r25, r24
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	80 95       	com	r24
     2d6:	89 23       	and	r24, r25
     2d8:	8c 93       	st	X, r24
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <DIO_Write+0x100>
		}
		else
		{
			PORTD_DATA = (pins&value);
     2dc:	e2 e3       	ldi	r30, 0x32	; 50
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	9b 81       	ldd	r25, Y+3	; 0x03
     2e2:	8c 81       	ldd	r24, Y+4	; 0x04
     2e4:	89 23       	and	r24, r25
     2e6:	80 83       	st	Z, r24
		}
		u8_error = E_ok;
     2e8:	19 82       	std	Y+1, r1	; 0x01
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_Write+0x108>
		break;

	default:
		u8_error = E_NOk;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     2f2:	26 96       	adiw	r28, 0x06	; 6
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <DIO_Read>:
* Return value: u8_error-> variable that describe the error status
* Description: This function can read the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{
     304:	df 93       	push	r29
     306:	cf 93       	push	r28
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	27 97       	sbiw	r28, 0x07	; 7
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	8a 83       	std	Y+2, r24	; 0x02
     31a:	6b 83       	std	Y+3, r22	; 0x03
     31c:	5d 83       	std	Y+5, r21	; 0x05
     31e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_error;
	switch(GPIO)
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	28 2f       	mov	r18, r24
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	3f 83       	std	Y+7, r19	; 0x07
     328:	2e 83       	std	Y+6, r18	; 0x06
     32a:	8e 81       	ldd	r24, Y+6	; 0x06
     32c:	9f 81       	ldd	r25, Y+7	; 0x07
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	91 05       	cpc	r25, r1
     332:	f9 f0       	breq	.+62     	; 0x372 <DIO_Read+0x6e>
     334:	2e 81       	ldd	r18, Y+6	; 0x06
     336:	3f 81       	ldd	r19, Y+7	; 0x07
     338:	22 30       	cpi	r18, 0x02	; 2
     33a:	31 05       	cpc	r19, r1
     33c:	2c f4       	brge	.+10     	; 0x348 <DIO_Read+0x44>
     33e:	8e 81       	ldd	r24, Y+6	; 0x06
     340:	9f 81       	ldd	r25, Y+7	; 0x07
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	61 f0       	breq	.+24     	; 0x35e <DIO_Read+0x5a>
     346:	33 c0       	rjmp	.+102    	; 0x3ae <DIO_Read+0xaa>
     348:	2e 81       	ldd	r18, Y+6	; 0x06
     34a:	3f 81       	ldd	r19, Y+7	; 0x07
     34c:	22 30       	cpi	r18, 0x02	; 2
     34e:	31 05       	cpc	r19, r1
     350:	d1 f0       	breq	.+52     	; 0x386 <DIO_Read+0x82>
     352:	8e 81       	ldd	r24, Y+6	; 0x06
     354:	9f 81       	ldd	r25, Y+7	; 0x07
     356:	83 30       	cpi	r24, 0x03	; 3
     358:	91 05       	cpc	r25, r1
     35a:	f9 f0       	breq	.+62     	; 0x39a <DIO_Read+0x96>
     35c:	28 c0       	rjmp	.+80     	; 0x3ae <DIO_Read+0xaa>
	{
	case GPIOA:
		*data= (PORTA_PIN & pins);
     35e:	e9 e3       	ldi	r30, 0x39	; 57
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	90 81       	ld	r25, Z
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	89 23       	and	r24, r25
     368:	ec 81       	ldd	r30, Y+4	; 0x04
     36a:	fd 81       	ldd	r31, Y+5	; 0x05
     36c:	80 83       	st	Z, r24
		u8_error = E_ok;
     36e:	19 82       	std	Y+1, r1	; 0x01
     370:	20 c0       	rjmp	.+64     	; 0x3b2 <DIO_Read+0xae>
		break;

	case GPIOB:
		*data= (PORTB_PIN & pins);
     372:	e6 e3       	ldi	r30, 0x36	; 54
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	90 81       	ld	r25, Z
     378:	8b 81       	ldd	r24, Y+3	; 0x03
     37a:	89 23       	and	r24, r25
     37c:	ec 81       	ldd	r30, Y+4	; 0x04
     37e:	fd 81       	ldd	r31, Y+5	; 0x05
     380:	80 83       	st	Z, r24
		u8_error = E_ok;
     382:	19 82       	std	Y+1, r1	; 0x01
     384:	16 c0       	rjmp	.+44     	; 0x3b2 <DIO_Read+0xae>
		break;

	case GPIOC:
		*data= (PORTC_PIN & pins);
     386:	e3 e3       	ldi	r30, 0x33	; 51
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	90 81       	ld	r25, Z
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	89 23       	and	r24, r25
     390:	ec 81       	ldd	r30, Y+4	; 0x04
     392:	fd 81       	ldd	r31, Y+5	; 0x05
     394:	80 83       	st	Z, r24
		u8_error = E_ok;
     396:	19 82       	std	Y+1, r1	; 0x01
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <DIO_Read+0xae>
		break;
	case GPIOD:
		*data= (PORTD_PIN & pins);
     39a:	e0 e3       	ldi	r30, 0x30	; 48
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	90 81       	ld	r25, Z
     3a0:	8b 81       	ldd	r24, Y+3	; 0x03
     3a2:	89 23       	and	r24, r25
     3a4:	ec 81       	ldd	r30, Y+4	; 0x04
     3a6:	fd 81       	ldd	r31, Y+5	; 0x05
     3a8:	80 83       	st	Z, r24
		u8_error = E_ok;
     3aa:	19 82       	std	Y+1, r1	; 0x01
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_Read+0xae>
		break;
	default:
		u8_error = E_NOk;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(*data!=LOW)
     3b2:	ec 81       	ldd	r30, Y+4	; 0x04
     3b4:	fd 81       	ldd	r31, Y+5	; 0x05
     3b6:	80 81       	ld	r24, Z
     3b8:	88 23       	and	r24, r24
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <DIO_Read+0xc0>
	{
		*data=HIGH;
     3bc:	ec 81       	ldd	r30, Y+4	; 0x04
     3be:	fd 81       	ldd	r31, Y+5	; 0x05
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	80 83       	st	Z, r24
	}
	return u8_error;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     3c6:	27 96       	adiw	r28, 0x07	; 7
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	08 95       	ret

000003d8 <DIO_Toggle>:
* Return value: u8_error-> variable that describe the error status
* Description: This function toggles the value of a full port, a nibble
* or even one pin.
************************************************************************************/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
     3d8:	df 93       	push	r29
     3da:	cf 93       	push	r28
     3dc:	00 d0       	rcall	.+0      	; 0x3de <DIO_Toggle+0x6>
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <DIO_Toggle+0x8>
     3e0:	0f 92       	push	r0
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	8a 83       	std	Y+2, r24	; 0x02
     3e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_error;
	switch(GPIO)
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	28 2f       	mov	r18, r24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	3d 83       	std	Y+5, r19	; 0x05
     3f2:	2c 83       	std	Y+4, r18	; 0x04
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	91 05       	cpc	r25, r1
     3fc:	f9 f0       	breq	.+62     	; 0x43c <DIO_Toggle+0x64>
     3fe:	2c 81       	ldd	r18, Y+4	; 0x04
     400:	3d 81       	ldd	r19, Y+5	; 0x05
     402:	22 30       	cpi	r18, 0x02	; 2
     404:	31 05       	cpc	r19, r1
     406:	2c f4       	brge	.+10     	; 0x412 <DIO_Toggle+0x3a>
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	00 97       	sbiw	r24, 0x00	; 0
     40e:	61 f0       	breq	.+24     	; 0x428 <DIO_Toggle+0x50>
     410:	33 c0       	rjmp	.+102    	; 0x478 <__stack+0x19>
     412:	2c 81       	ldd	r18, Y+4	; 0x04
     414:	3d 81       	ldd	r19, Y+5	; 0x05
     416:	22 30       	cpi	r18, 0x02	; 2
     418:	31 05       	cpc	r19, r1
     41a:	d1 f0       	breq	.+52     	; 0x450 <DIO_Toggle+0x78>
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	91 05       	cpc	r25, r1
     424:	f9 f0       	breq	.+62     	; 0x464 <__stack+0x5>
     426:	28 c0       	rjmp	.+80     	; 0x478 <__stack+0x19>
	{
	case GPIOA:
			PORTA_DATA ^= pins;
     428:	ab e3       	ldi	r26, 0x3B	; 59
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	eb e3       	ldi	r30, 0x3B	; 59
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	90 81       	ld	r25, Z
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	89 27       	eor	r24, r25
     436:	8c 93       	st	X, r24
			u8_error = E_ok;
     438:	19 82       	std	Y+1, r1	; 0x01
     43a:	20 c0       	rjmp	.+64     	; 0x47c <__stack+0x1d>
		break;

	case GPIOB:
			PORTB_DATA ^= (pins);
     43c:	a8 e3       	ldi	r26, 0x38	; 56
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	e8 e3       	ldi	r30, 0x38	; 56
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	90 81       	ld	r25, Z
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	89 27       	eor	r24, r25
     44a:	8c 93       	st	X, r24
			u8_error = E_ok;
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	16 c0       	rjmp	.+44     	; 0x47c <__stack+0x1d>
		break;
	case GPIOC:
			PORTC_DATA ^= (pins);
     450:	a5 e3       	ldi	r26, 0x35	; 53
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	e5 e3       	ldi	r30, 0x35	; 53
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	90 81       	ld	r25, Z
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	89 27       	eor	r24, r25
     45e:	8c 93       	st	X, r24
			u8_error = E_ok;
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	0c c0       	rjmp	.+24     	; 0x47c <__stack+0x1d>
		break;

	case GPIOD:
			PORTD_DATA ^= (pins);
     464:	a2 e3       	ldi	r26, 0x32	; 50
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e2 e3       	ldi	r30, 0x32	; 50
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	90 81       	ld	r25, Z
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	89 27       	eor	r24, r25
     472:	8c 93       	st	X, r24
			u8_error = E_ok;
     474:	19 82       	std	Y+1, r1	; 0x01
     476:	02 c0       	rjmp	.+4      	; 0x47c <__stack+0x1d>
		break;

	default:
		u8_error = E_NOk;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
     47c:	89 81       	ldd	r24, Y+1	; 0x01
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	cf 91       	pop	r28
     48a:	df 91       	pop	r29
     48c:	08 95       	ret

0000048e <Pwm_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: initialize the PWM configuration
************************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	64 97       	sbiw	r28, 0x14	; 20
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	9a 8b       	std	Y+18, r25	; 0x12
     4a4:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t u8_status;
	if(Pwm_Cfg == NULL_Ptr)
     4a6:	89 89       	ldd	r24, Y+17	; 0x11
     4a8:	9a 89       	ldd	r25, Y+18	; 0x12
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	19 f4       	brne	.+6      	; 0x4b4 <Pwm_Init+0x26>
	{
		u8_status = E_NOk;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	ea c0       	rjmp	.+468    	; 0x688 <Pwm_Init+0x1fa>
	}
	else
	{
		TCNT0 = CLEAR; /*timer initial value*/
     4b4:	e2 e5       	ldi	r30, 0x52	; 82
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	10 82       	st	Z, r1
		TIMSK = CLEAR; /*disable interrupts*/
     4ba:	e9 e5       	ldi	r30, 0x59	; 89
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	10 82       	st	Z, r1
		//OCR0 = (u8_dutyCycle*TIMER0_NUMBER_OF_TICKS)/100; //output compare value
		switch(Pwm_Cfg->Channel)
     4c0:	e9 89       	ldd	r30, Y+17	; 0x11
     4c2:	fa 89       	ldd	r31, Y+18	; 0x12
     4c4:	80 81       	ld	r24, Z
     4c6:	28 2f       	mov	r18, r24
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	3c 8b       	std	Y+20, r19	; 0x14
     4cc:	2b 8b       	std	Y+19, r18	; 0x13
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <Pwm_Init+0x4c>
     4d8:	64 c0       	rjmp	.+200    	; 0x5a2 <Pwm_Init+0x114>
     4da:	2b 89       	ldd	r18, Y+19	; 0x13
     4dc:	3c 89       	ldd	r19, Y+20	; 0x14
     4de:	23 30       	cpi	r18, 0x03	; 3
     4e0:	31 05       	cpc	r19, r1
     4e2:	54 f4       	brge	.+20     	; 0x4f8 <Pwm_Init+0x6a>
     4e4:	8b 89       	ldd	r24, Y+19	; 0x13
     4e6:	9c 89       	ldd	r25, Y+20	; 0x14
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	99 f0       	breq	.+38     	; 0x512 <Pwm_Init+0x84>
     4ec:	2b 89       	ldd	r18, Y+19	; 0x13
     4ee:	3c 89       	ldd	r19, Y+20	; 0x14
     4f0:	21 30       	cpi	r18, 0x01	; 1
     4f2:	31 05       	cpc	r19, r1
     4f4:	69 f1       	breq	.+90     	; 0x550 <Pwm_Init+0xc2>
     4f6:	c6 c0       	rjmp	.+396    	; 0x684 <Pwm_Init+0x1f6>
     4f8:	8b 89       	ldd	r24, Y+19	; 0x13
     4fa:	9c 89       	ldd	r25, Y+20	; 0x14
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	91 05       	cpc	r25, r1
     500:	09 f4       	brne	.+2      	; 0x504 <Pwm_Init+0x76>
     502:	78 c0       	rjmp	.+240    	; 0x5f4 <Pwm_Init+0x166>
     504:	2b 89       	ldd	r18, Y+19	; 0x13
     506:	3c 89       	ldd	r19, Y+20	; 0x14
     508:	24 30       	cpi	r18, 0x04	; 4
     50a:	31 05       	cpc	r19, r1
     50c:	09 f4       	brne	.+2      	; 0x510 <Pwm_Init+0x82>
     50e:	91 c0       	rjmp	.+290    	; 0x632 <Pwm_Init+0x1a4>
     510:	b9 c0       	rjmp	.+370    	; 0x684 <Pwm_Init+0x1f6>
		{
			case PWM_CH0:
				T0_PrescallerValue = Pwm_Cfg->Prescaler;
     512:	e9 89       	ldd	r30, Y+17	; 0x11
     514:	fa 89       	ldd	r31, Y+18	; 0x12
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	90 93 61 00 	sts	0x0061, r25
     520:	80 93 60 00 	sts	0x0060, r24
				TCCR0 =(ONE<<COM01)| (ONE<<WGM00);
     524:	e3 e5       	ldi	r30, 0x53	; 83
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 e6       	ldi	r24, 0x60	; 96
     52a:	80 83       	st	Z, r24
				u8_status = E_ok;
     52c:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM0_Binsinit=
				{
						PWM0_Binsinit.GPIO=GPIOB,
						PWM0_Binsinit.pins=BIT3,
						PWM0_Binsinit.dir=OUTPUT,
				};
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	8a 83       	std	Y+2, r24	; 0x02
     532:	2a 81       	ldd	r18, Y+2	; 0x02
     534:	88 e0       	ldi	r24, 0x08	; 8
     536:	8b 83       	std	Y+3, r24	; 0x03
     538:	9b 81       	ldd	r25, Y+3	; 0x03
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	8c 83       	std	Y+4, r24	; 0x04
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	2a 83       	std	Y+2, r18	; 0x02
     542:	9b 83       	std	Y+3, r25	; 0x03
     544:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&PWM0_Binsinit);
     546:	ce 01       	movw	r24, r28
     548:	02 96       	adiw	r24, 0x02	; 2
     54a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     54e:	9c c0       	rjmp	.+312    	; 0x688 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1A:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     550:	e9 89       	ldd	r30, Y+17	; 0x11
     552:	fa 89       	ldd	r31, Y+18	; 0x12
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	90 93 63 00 	sts	0x0063, r25
     55e:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     562:	e6 e4       	ldi	r30, 0x46	; 70
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	83 ec       	ldi	r24, 0xC3	; 195
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	91 83       	std	Z+1, r25	; 0x01
     56c:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     56e:	ef e4       	ldi	r30, 0x4F	; 79
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	82 e8       	ldi	r24, 0x82	; 130
     574:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     576:	ee e4       	ldi	r30, 0x4E	; 78
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 e1       	ldi	r24, 0x10	; 16
     57c:	80 83       	st	Z, r24
				u8_status = E_ok;
     57e:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1AB_Binsinit=
				{
						PWM1AB_Binsinit.GPIO=GPIOD,
						PWM1AB_Binsinit.pins=BIT5,
						PWM1AB_Binsinit.dir=OUTPUT,
				};
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	8d 83       	std	Y+5, r24	; 0x05
     584:	2d 81       	ldd	r18, Y+5	; 0x05
     586:	80 e2       	ldi	r24, 0x20	; 32
     588:	8e 83       	std	Y+6, r24	; 0x06
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	8f ef       	ldi	r24, 0xFF	; 255
     58e:	8f 83       	std	Y+7, r24	; 0x07
     590:	8f 81       	ldd	r24, Y+7	; 0x07
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	9e 83       	std	Y+6, r25	; 0x06
     596:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&PWM1AB_Binsinit);
     598:	ce 01       	movw	r24, r28
     59a:	05 96       	adiw	r24, 0x05	; 5
     59c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     5a0:	73 c0       	rjmp	.+230    	; 0x688 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1B:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     5a2:	e9 89       	ldd	r30, Y+17	; 0x11
     5a4:	fa 89       	ldd	r31, Y+18	; 0x12
     5a6:	81 81       	ldd	r24, Z+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 63 00 	sts	0x0063, r25
     5b0:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     5b4:	e6 e4       	ldi	r30, 0x46	; 70
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	83 ec       	ldi	r24, 0xC3	; 195
     5ba:	99 e0       	ldi	r25, 0x09	; 9
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     5c0:	ef e4       	ldi	r30, 0x4F	; 79
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	82 e2       	ldi	r24, 0x22	; 34
     5c6:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     5c8:	ee e4       	ldi	r30, 0x4E	; 78
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 e1       	ldi	r24, 0x10	; 16
     5ce:	80 83       	st	Z, r24
				u8_status = E_ok;
     5d0:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1B_Binsinit=
				{
						PWM1B_Binsinit.GPIO=GPIOD,
						PWM1B_Binsinit.pins=BIT4,
						PWM1B_Binsinit.dir=OUTPUT,
				};
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	88 87       	std	Y+8, r24	; 0x08
     5d6:	28 85       	ldd	r18, Y+8	; 0x08
     5d8:	80 e1       	ldi	r24, 0x10	; 16
     5da:	89 87       	std	Y+9, r24	; 0x09
     5dc:	99 85       	ldd	r25, Y+9	; 0x09
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	8a 87       	std	Y+10, r24	; 0x0a
     5e2:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e4:	28 87       	std	Y+8, r18	; 0x08
     5e6:	99 87       	std	Y+9, r25	; 0x09
     5e8:	8a 87       	std	Y+10, r24	; 0x0a
				DIO_init (&PWM1B_Binsinit);
     5ea:	ce 01       	movw	r24, r28
     5ec:	08 96       	adiw	r24, 0x08	; 8
     5ee:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     5f2:	4a c0       	rjmp	.+148    	; 0x688 <Pwm_Init+0x1fa>
			break;

			case PWM_CH2:
				T2_PrescallerValue = Pwm_Cfg->Prescaler;
     5f4:	e9 89       	ldd	r30, Y+17	; 0x11
     5f6:	fa 89       	ldd	r31, Y+18	; 0x12
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 65 00 	sts	0x0065, r25
     602:	80 93 64 00 	sts	0x0064, r24
				TCCR2 =(ONE<<COM21)| (ONE<<WGM20);
     606:	e5 e4       	ldi	r30, 0x45	; 69
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 e6       	ldi	r24, 0x60	; 96
     60c:	80 83       	st	Z, r24
				u8_status = E_ok;
     60e:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM2_Binsinit=
				{
						PWM2_Binsinit.GPIO=GPIOD,
						PWM2_Binsinit.pins=BIT7,
						PWM2_Binsinit.dir=OUTPUT,
				};
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	8b 87       	std	Y+11, r24	; 0x0b
     614:	2b 85       	ldd	r18, Y+11	; 0x0b
     616:	80 e8       	ldi	r24, 0x80	; 128
     618:	8c 87       	std	Y+12, r24	; 0x0c
     61a:	9c 85       	ldd	r25, Y+12	; 0x0c
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	8d 87       	std	Y+13, r24	; 0x0d
     620:	8d 85       	ldd	r24, Y+13	; 0x0d
     622:	2b 87       	std	Y+11, r18	; 0x0b
     624:	9c 87       	std	Y+12, r25	; 0x0c
     626:	8d 87       	std	Y+13, r24	; 0x0d
				DIO_init (&PWM2_Binsinit);
     628:	ce 01       	movw	r24, r28
     62a:	0b 96       	adiw	r24, 0x0b	; 11
     62c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     630:	2b c0       	rjmp	.+86     	; 0x688 <Pwm_Init+0x1fa>
			break;

			case PWM_CH1A_CH1B:
				T1_PrescallerValue = Pwm_Cfg->Prescaler;
     632:	e9 89       	ldd	r30, Y+17	; 0x11
     634:	fa 89       	ldd	r31, Y+18	; 0x12
     636:	81 81       	ldd	r24, Z+1	; 0x01
     638:	88 2f       	mov	r24, r24
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	90 93 63 00 	sts	0x0063, r25
     640:	80 93 62 00 	sts	0x0062, r24
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     644:	e6 e4       	ldi	r30, 0x46	; 70
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	83 ec       	ldi	r24, 0xC3	; 195
     64a:	99 e0       	ldi	r25, 0x09	; 9
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	80 83       	st	Z, r24
				/* Configure timer control register TCCR1A
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 3. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     650:	ef e4       	ldi	r30, 0x4F	; 79
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	82 ea       	ldi	r24, 0xA2	; 162
     656:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13);
     658:	ee e4       	ldi	r30, 0x4E	; 78
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 e1       	ldi	r24, 0x10	; 16
     65e:	80 83       	st	Z, r24
				u8_status = E_ok;
     660:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s PWM1A_Binsinit=
				{
						PWM1A_Binsinit.GPIO=GPIOD,
						PWM1A_Binsinit.pins=BIT4 | BIT5,
						PWM1A_Binsinit.dir=OUTPUT,
				};
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	8e 87       	std	Y+14, r24	; 0x0e
     666:	2e 85       	ldd	r18, Y+14	; 0x0e
     668:	80 e3       	ldi	r24, 0x30	; 48
     66a:	8f 87       	std	Y+15, r24	; 0x0f
     66c:	9f 85       	ldd	r25, Y+15	; 0x0f
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	88 8b       	std	Y+16, r24	; 0x10
     672:	88 89       	ldd	r24, Y+16	; 0x10
     674:	2e 87       	std	Y+14, r18	; 0x0e
     676:	9f 87       	std	Y+15, r25	; 0x0f
     678:	88 8b       	std	Y+16, r24	; 0x10
				DIO_init (&PWM1A_Binsinit);
     67a:	ce 01       	movw	r24, r28
     67c:	0e 96       	adiw	r24, 0x0e	; 14
     67e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
     682:	02 c0       	rjmp	.+4      	; 0x688 <Pwm_Init+0x1fa>
			break;
			default:
				u8_status = E_NOk;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
     688:	89 81       	ldd	r24, Y+1	; 0x01
}
     68a:	64 96       	adiw	r28, 0x14	; 20
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	08 95       	ret

0000069c <Pwm_Start>:
* Return value: u8_error- variable that describe the error status
* Description: starts the PWM on the dedicated channel with the required duty
* cycle and frequency
************************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     69c:	df 93       	push	r29
     69e:	cf 93       	push	r28
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	6d 97       	sbiw	r28, 0x1d	; 29
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	8a 83       	std	Y+2, r24	; 0x02
     6b2:	6b 83       	std	Y+3, r22	; 0x03
     6b4:	2c 83       	std	Y+4, r18	; 0x04
     6b6:	3d 83       	std	Y+5, r19	; 0x05
     6b8:	4e 83       	std	Y+6, r20	; 0x06
     6ba:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t u8_status;
	switch(Channel)
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	28 2f       	mov	r18, r24
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	39 87       	std	Y+9, r19	; 0x09
     6c4:	28 87       	std	Y+8, r18	; 0x08
     6c6:	88 85       	ldd	r24, Y+8	; 0x08
     6c8:	99 85       	ldd	r25, Y+9	; 0x09
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	91 05       	cpc	r25, r1
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <Pwm_Start+0x36>
     6d0:	2e c1       	rjmp	.+604    	; 0x92e <Pwm_Start+0x292>
     6d2:	a8 85       	ldd	r26, Y+8	; 0x08
     6d4:	b9 85       	ldd	r27, Y+9	; 0x09
     6d6:	a3 30       	cpi	r26, 0x03	; 3
     6d8:	b1 05       	cpc	r27, r1
     6da:	64 f4       	brge	.+24     	; 0x6f4 <Pwm_Start+0x58>
     6dc:	28 85       	ldd	r18, Y+8	; 0x08
     6de:	39 85       	ldd	r19, Y+9	; 0x09
     6e0:	21 15       	cp	r18, r1
     6e2:	31 05       	cpc	r19, r1
     6e4:	a1 f0       	breq	.+40     	; 0x70e <Pwm_Start+0x72>
     6e6:	88 85       	ldd	r24, Y+8	; 0x08
     6e8:	99 85       	ldd	r25, Y+9	; 0x09
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	91 05       	cpc	r25, r1
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <Pwm_Start+0x56>
     6f0:	77 c0       	rjmp	.+238    	; 0x7e0 <Pwm_Start+0x144>
     6f2:	e1 c2       	rjmp	.+1474   	; 0xcb6 <Pwm_Start+0x61a>
     6f4:	a8 85       	ldd	r26, Y+8	; 0x08
     6f6:	b9 85       	ldd	r27, Y+9	; 0x09
     6f8:	a3 30       	cpi	r26, 0x03	; 3
     6fa:	b1 05       	cpc	r27, r1
     6fc:	09 f4       	brne	.+2      	; 0x700 <Pwm_Start+0x64>
     6fe:	be c1       	rjmp	.+892    	; 0xa7c <Pwm_Start+0x3e0>
     700:	28 85       	ldd	r18, Y+8	; 0x08
     702:	39 85       	ldd	r19, Y+9	; 0x09
     704:	24 30       	cpi	r18, 0x04	; 4
     706:	31 05       	cpc	r19, r1
     708:	09 f4       	brne	.+2      	; 0x70c <Pwm_Start+0x70>
     70a:	1c c2       	rjmp	.+1080   	; 0xb44 <Pwm_Start+0x4a8>
     70c:	d4 c2       	rjmp	.+1448   	; 0xcb6 <Pwm_Start+0x61a>
	{
	case PWM_CH0:
		OCR0 = Duty*(TIMER0_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     70e:	ec e5       	ldi	r30, 0x5C	; 92
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	80 83       	st	Z, r24
		switch(Frequncy)
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	9d 81       	ldd	r25, Y+5	; 0x05
     722:	ae 81       	ldd	r26, Y+6	; 0x06
     724:	bf 81       	ldd	r27, Y+7	; 0x07
     726:	8a 87       	std	Y+10, r24	; 0x0a
     728:	9b 87       	std	Y+11, r25	; 0x0b
     72a:	ac 87       	std	Y+12, r26	; 0x0c
     72c:	bd 87       	std	Y+13, r27	; 0x0d
     72e:	8a 85       	ldd	r24, Y+10	; 0x0a
     730:	9b 85       	ldd	r25, Y+11	; 0x0b
     732:	ac 85       	ldd	r26, Y+12	; 0x0c
     734:	bd 85       	ldd	r27, Y+13	; 0x0d
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	91 05       	cpc	r25, r1
     73a:	a1 05       	cpc	r26, r1
     73c:	b1 05       	cpc	r27, r1
     73e:	d9 f1       	breq	.+118    	; 0x7b6 <Pwm_Start+0x11a>
     740:	8a 85       	ldd	r24, Y+10	; 0x0a
     742:	9b 85       	ldd	r25, Y+11	; 0x0b
     744:	ac 85       	ldd	r26, Y+12	; 0x0c
     746:	bd 85       	ldd	r27, Y+13	; 0x0d
     748:	84 30       	cpi	r24, 0x04	; 4
     74a:	91 05       	cpc	r25, r1
     74c:	a1 05       	cpc	r26, r1
     74e:	b1 05       	cpc	r27, r1
     750:	98 f4       	brcc	.+38     	; 0x778 <Pwm_Start+0xdc>
     752:	8a 85       	ldd	r24, Y+10	; 0x0a
     754:	9b 85       	ldd	r25, Y+11	; 0x0b
     756:	ac 85       	ldd	r26, Y+12	; 0x0c
     758:	bd 85       	ldd	r27, Y+13	; 0x0d
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	91 05       	cpc	r25, r1
     75e:	a1 05       	cpc	r26, r1
     760:	b1 05       	cpc	r27, r1
     762:	e9 f0       	breq	.+58     	; 0x79e <Pwm_Start+0x102>
     764:	8a 85       	ldd	r24, Y+10	; 0x0a
     766:	9b 85       	ldd	r25, Y+11	; 0x0b
     768:	ac 85       	ldd	r26, Y+12	; 0x0c
     76a:	bd 85       	ldd	r27, Y+13	; 0x0d
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	91 05       	cpc	r25, r1
     770:	a1 05       	cpc	r26, r1
     772:	b1 05       	cpc	r27, r1
     774:	d1 f0       	breq	.+52     	; 0x7aa <Pwm_Start+0x10e>
     776:	31 c0       	rjmp	.+98     	; 0x7da <Pwm_Start+0x13e>
     778:	8a 85       	ldd	r24, Y+10	; 0x0a
     77a:	9b 85       	ldd	r25, Y+11	; 0x0b
     77c:	ac 85       	ldd	r26, Y+12	; 0x0c
     77e:	bd 85       	ldd	r27, Y+13	; 0x0d
     780:	84 30       	cpi	r24, 0x04	; 4
     782:	91 05       	cpc	r25, r1
     784:	a1 05       	cpc	r26, r1
     786:	b1 05       	cpc	r27, r1
     788:	e1 f0       	breq	.+56     	; 0x7c2 <Pwm_Start+0x126>
     78a:	8a 85       	ldd	r24, Y+10	; 0x0a
     78c:	9b 85       	ldd	r25, Y+11	; 0x0b
     78e:	ac 85       	ldd	r26, Y+12	; 0x0c
     790:	bd 85       	ldd	r27, Y+13	; 0x0d
     792:	85 30       	cpi	r24, 0x05	; 5
     794:	91 05       	cpc	r25, r1
     796:	a1 05       	cpc	r26, r1
     798:	b1 05       	cpc	r27, r1
     79a:	c9 f0       	breq	.+50     	; 0x7ce <Pwm_Start+0x132>
     79c:	1e c0       	rjmp	.+60     	; 0x7da <Pwm_Start+0x13e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_NO | (ONE<<COM01)| (ONE<<WGM00);
     79e:	e3 e5       	ldi	r30, 0x53	; 83
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	81 e6       	ldi	r24, 0x61	; 97
     7a4:	80 83       	st	Z, r24
				u8_status = E_ok;
     7a6:	19 82       	std	Y+1, r1	; 0x01
     7a8:	88 c2       	rjmp	.+1296   	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_8 | (ONE<<COM01)| (ONE<<WGM00);
     7aa:	e3 e5       	ldi	r30, 0x53	; 83
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	82 e6       	ldi	r24, 0x62	; 98
     7b0:	80 83       	st	Z, r24
				u8_status = E_ok;
     7b2:	19 82       	std	Y+1, r1	; 0x01
     7b4:	82 c2       	rjmp	.+1284   	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
				 */
				TCCR0 =PWM_PRESCALER_64 | (ONE<<COM01)| (ONE<<WGM00);
     7b6:	e3 e5       	ldi	r30, 0x53	; 83
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	83 e6       	ldi	r24, 0x63	; 99
     7bc:	80 83       	st	Z, r24
				u8_status = E_ok;
     7be:	19 82       	std	Y+1, r1	; 0x01
     7c0:	7c c2       	rjmp	.+1272   	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
				 */
				TCCR0 =PWM_PRESCALER_256 | (ONE<<COM01)| (ONE<<WGM00);
     7c2:	e3 e5       	ldi	r30, 0x53	; 83
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	84 e6       	ldi	r24, 0x64	; 100
     7c8:	80 83       	st	Z, r24
				u8_status = E_ok;
     7ca:	19 82       	std	Y+1, r1	; 0x01
     7cc:	76 c2       	rjmp	.+1260   	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM01=0 & WGM00=1
				 * 3. clear OC0 on compare match COM00=0 & COM01=1
				 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
				 */
				TCCR0 =PWM_PRESCALER_1024 | (ONE<<COM01)| (ONE<<WGM00);
     7ce:	e3 e5       	ldi	r30, 0x53	; 83
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	85 e6       	ldi	r24, 0x65	; 101
     7d4:	80 83       	st	Z, r24
				u8_status = E_ok;
     7d6:	19 82       	std	Y+1, r1	; 0x01
     7d8:	70 c2       	rjmp	.+1248   	; 0xcba <Pwm_Start+0x61e>
				break;

		default:
			u8_status = E_NOk;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	6d c2       	rjmp	.+1242   	; 0xcba <Pwm_Start+0x61e>
			break;
		}
	break;

	case PWM_CH1A:
		OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     7e0:	ea e4       	ldi	r30, 0x4A	; 74
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	c9 01       	movw	r24, r18
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
		switch(Frequncy)
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	ae 81       	ldd	r26, Y+6	; 0x06
     80a:	bf 81       	ldd	r27, Y+7	; 0x07
     80c:	8e 87       	std	Y+14, r24	; 0x0e
     80e:	9f 87       	std	Y+15, r25	; 0x0f
     810:	a8 8b       	std	Y+16, r26	; 0x10
     812:	b9 8b       	std	Y+17, r27	; 0x11
     814:	8e 85       	ldd	r24, Y+14	; 0x0e
     816:	9f 85       	ldd	r25, Y+15	; 0x0f
     818:	a8 89       	ldd	r26, Y+16	; 0x10
     81a:	b9 89       	ldd	r27, Y+17	; 0x11
     81c:	83 30       	cpi	r24, 0x03	; 3
     81e:	91 05       	cpc	r25, r1
     820:	a1 05       	cpc	r26, r1
     822:	b1 05       	cpc	r27, r1
     824:	09 f4       	brne	.+2      	; 0x828 <Pwm_Start+0x18c>
     826:	50 c0       	rjmp	.+160    	; 0x8c8 <Pwm_Start+0x22c>
     828:	8e 85       	ldd	r24, Y+14	; 0x0e
     82a:	9f 85       	ldd	r25, Y+15	; 0x0f
     82c:	a8 89       	ldd	r26, Y+16	; 0x10
     82e:	b9 89       	ldd	r27, Y+17	; 0x11
     830:	84 30       	cpi	r24, 0x04	; 4
     832:	91 05       	cpc	r25, r1
     834:	a1 05       	cpc	r26, r1
     836:	b1 05       	cpc	r27, r1
     838:	98 f4       	brcc	.+38     	; 0x860 <Pwm_Start+0x1c4>
     83a:	8e 85       	ldd	r24, Y+14	; 0x0e
     83c:	9f 85       	ldd	r25, Y+15	; 0x0f
     83e:	a8 89       	ldd	r26, Y+16	; 0x10
     840:	b9 89       	ldd	r27, Y+17	; 0x11
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	91 05       	cpc	r25, r1
     846:	a1 05       	cpc	r26, r1
     848:	b1 05       	cpc	r27, r1
     84a:	f1 f0       	breq	.+60     	; 0x888 <Pwm_Start+0x1ec>
     84c:	8e 85       	ldd	r24, Y+14	; 0x0e
     84e:	9f 85       	ldd	r25, Y+15	; 0x0f
     850:	a8 89       	ldd	r26, Y+16	; 0x10
     852:	b9 89       	ldd	r27, Y+17	; 0x11
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	91 05       	cpc	r25, r1
     858:	a1 05       	cpc	r26, r1
     85a:	b1 05       	cpc	r27, r1
     85c:	29 f1       	breq	.+74     	; 0x8a8 <Pwm_Start+0x20c>
     85e:	64 c0       	rjmp	.+200    	; 0x928 <Pwm_Start+0x28c>
     860:	8e 85       	ldd	r24, Y+14	; 0x0e
     862:	9f 85       	ldd	r25, Y+15	; 0x0f
     864:	a8 89       	ldd	r26, Y+16	; 0x10
     866:	b9 89       	ldd	r27, Y+17	; 0x11
     868:	84 30       	cpi	r24, 0x04	; 4
     86a:	91 05       	cpc	r25, r1
     86c:	a1 05       	cpc	r26, r1
     86e:	b1 05       	cpc	r27, r1
     870:	d9 f1       	breq	.+118    	; 0x8e8 <Pwm_Start+0x24c>
     872:	8e 85       	ldd	r24, Y+14	; 0x0e
     874:	9f 85       	ldd	r25, Y+15	; 0x0f
     876:	a8 89       	ldd	r26, Y+16	; 0x10
     878:	b9 89       	ldd	r27, Y+17	; 0x11
     87a:	85 30       	cpi	r24, 0x05	; 5
     87c:	91 05       	cpc	r25, r1
     87e:	a1 05       	cpc	r26, r1
     880:	b1 05       	cpc	r27, r1
     882:	09 f4       	brne	.+2      	; 0x886 <Pwm_Start+0x1ea>
     884:	41 c0       	rjmp	.+130    	; 0x908 <Pwm_Start+0x26c>
     886:	50 c0       	rjmp	.+160    	; 0x928 <Pwm_Start+0x28c>
			{

			case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     888:	e6 e4       	ldi	r30, 0x46	; 70
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	83 ec       	ldi	r24, 0xC3	; 195
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     894:	ef e4       	ldi	r30, 0x4F	; 79
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	82 e8       	ldi	r24, 0x82	; 130
     89a:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     89c:	ee e4       	ldi	r30, 0x4E	; 78
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	81 e1       	ldi	r24, 0x11	; 17
     8a2:	80 83       	st	Z, r24
					u8_status = E_ok;
     8a4:	19 82       	std	Y+1, r1	; 0x01
     8a6:	09 c2       	rjmp	.+1042   	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8a8:	e6 e4       	ldi	r30, 0x46	; 70
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	83 ec       	ldi	r24, 0xC3	; 195
     8ae:	99 e0       	ldi	r25, 0x09	; 9
     8b0:	91 83       	std	Z+1, r25	; 0x01
     8b2:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8b4:	ef e4       	ldi	r30, 0x4F	; 79
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	82 e8       	ldi	r24, 0x82	; 130
     8ba:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/8
					 */
					TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     8bc:	ee e4       	ldi	r30, 0x4E	; 78
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	82 e1       	ldi	r24, 0x12	; 18
     8c2:	80 83       	st	Z, r24
					u8_status = E_ok;
     8c4:	19 82       	std	Y+1, r1	; 0x01
     8c6:	f9 c1       	rjmp	.+1010   	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8c8:	e6 e4       	ldi	r30, 0x46	; 70
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	83 ec       	ldi	r24, 0xC3	; 195
     8ce:	99 e0       	ldi	r25, 0x09	; 9
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8d4:	ef e4       	ldi	r30, 0x4F	; 79
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	82 e8       	ldi	r24, 0x82	; 130
     8da:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/64
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     8dc:	ee e4       	ldi	r30, 0x4E	; 78
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	83 e1       	ldi	r24, 0x13	; 19
     8e2:	80 83       	st	Z, r24
					u8_status = E_ok;
     8e4:	19 82       	std	Y+1, r1	; 0x01
     8e6:	e9 c1       	rjmp	.+978    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     8e8:	e6 e4       	ldi	r30, 0x46	; 70
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	83 ec       	ldi	r24, 0xC3	; 195
     8ee:	99 e0       	ldi	r25, 0x09	; 9
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	80 83       	st	Z, r24
				     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				     * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     8f4:	ef e4       	ldi	r30, 0x4F	; 79
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	82 e8       	ldi	r24, 0x82	; 130
     8fa:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/256
				     */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     8fc:	ee e4       	ldi	r30, 0x4E	; 78
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	80 83       	st	Z, r24
					u8_status = E_ok;
     904:	19 82       	std	Y+1, r1	; 0x01
     906:	d9 c1       	rjmp	.+946    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     908:	e6 e4       	ldi	r30, 0x46	; 70
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	83 ec       	ldi	r24, 0xC3	; 195
     90e:	99 e0       	ldi	r25, 0x09	; 9
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     914:	ef e4       	ldi	r30, 0x4F	; 79
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	82 e8       	ldi	r24, 0x82	; 130
     91a:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/1024
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     91c:	ee e4       	ldi	r30, 0x4E	; 78
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	85 e1       	ldi	r24, 0x15	; 21
     922:	80 83       	st	Z, r24
					u8_status = E_ok;
     924:	19 82       	std	Y+1, r1	; 0x01
     926:	c9 c1       	rjmp	.+914    	; 0xcba <Pwm_Start+0x61e>
					break;

			default:
				u8_status = E_NOk;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	c6 c1       	rjmp	.+908    	; 0xcba <Pwm_Start+0x61e>
				break;
			}
	break;

	case PWM_CH1B:
		OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     92e:	e8 e4       	ldi	r30, 0x48	; 72
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	28 2f       	mov	r18, r24
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	c9 01       	movw	r24, r18
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	82 0f       	add	r24, r18
     940:	93 1f       	adc	r25, r19
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	80 83       	st	Z, r24
		switch(Frequncy)
     952:	8c 81       	ldd	r24, Y+4	; 0x04
     954:	9d 81       	ldd	r25, Y+5	; 0x05
     956:	ae 81       	ldd	r26, Y+6	; 0x06
     958:	bf 81       	ldd	r27, Y+7	; 0x07
     95a:	8a 8b       	std	Y+18, r24	; 0x12
     95c:	9b 8b       	std	Y+19, r25	; 0x13
     95e:	ac 8b       	std	Y+20, r26	; 0x14
     960:	bd 8b       	std	Y+21, r27	; 0x15
     962:	8a 89       	ldd	r24, Y+18	; 0x12
     964:	9b 89       	ldd	r25, Y+19	; 0x13
     966:	ac 89       	ldd	r26, Y+20	; 0x14
     968:	bd 89       	ldd	r27, Y+21	; 0x15
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	09 f4       	brne	.+2      	; 0x976 <Pwm_Start+0x2da>
     974:	50 c0       	rjmp	.+160    	; 0xa16 <Pwm_Start+0x37a>
     976:	8a 89       	ldd	r24, Y+18	; 0x12
     978:	9b 89       	ldd	r25, Y+19	; 0x13
     97a:	ac 89       	ldd	r26, Y+20	; 0x14
     97c:	bd 89       	ldd	r27, Y+21	; 0x15
     97e:	84 30       	cpi	r24, 0x04	; 4
     980:	91 05       	cpc	r25, r1
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	98 f4       	brcc	.+38     	; 0x9ae <Pwm_Start+0x312>
     988:	8a 89       	ldd	r24, Y+18	; 0x12
     98a:	9b 89       	ldd	r25, Y+19	; 0x13
     98c:	ac 89       	ldd	r26, Y+20	; 0x14
     98e:	bd 89       	ldd	r27, Y+21	; 0x15
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	91 05       	cpc	r25, r1
     994:	a1 05       	cpc	r26, r1
     996:	b1 05       	cpc	r27, r1
     998:	f1 f0       	breq	.+60     	; 0x9d6 <Pwm_Start+0x33a>
     99a:	8a 89       	ldd	r24, Y+18	; 0x12
     99c:	9b 89       	ldd	r25, Y+19	; 0x13
     99e:	ac 89       	ldd	r26, Y+20	; 0x14
     9a0:	bd 89       	ldd	r27, Y+21	; 0x15
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	91 05       	cpc	r25, r1
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	29 f1       	breq	.+74     	; 0x9f6 <Pwm_Start+0x35a>
     9ac:	64 c0       	rjmp	.+200    	; 0xa76 <Pwm_Start+0x3da>
     9ae:	8a 89       	ldd	r24, Y+18	; 0x12
     9b0:	9b 89       	ldd	r25, Y+19	; 0x13
     9b2:	ac 89       	ldd	r26, Y+20	; 0x14
     9b4:	bd 89       	ldd	r27, Y+21	; 0x15
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	91 05       	cpc	r25, r1
     9ba:	a1 05       	cpc	r26, r1
     9bc:	b1 05       	cpc	r27, r1
     9be:	d9 f1       	breq	.+118    	; 0xa36 <Pwm_Start+0x39a>
     9c0:	8a 89       	ldd	r24, Y+18	; 0x12
     9c2:	9b 89       	ldd	r25, Y+19	; 0x13
     9c4:	ac 89       	ldd	r26, Y+20	; 0x14
     9c6:	bd 89       	ldd	r27, Y+21	; 0x15
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	91 05       	cpc	r25, r1
     9cc:	a1 05       	cpc	r26, r1
     9ce:	b1 05       	cpc	r27, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Pwm_Start+0x338>
     9d2:	41 c0       	rjmp	.+130    	; 0xa56 <Pwm_Start+0x3ba>
     9d4:	50 c0       	rjmp	.+160    	; 0xa76 <Pwm_Start+0x3da>
			{
			case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     9d6:	e6 e4       	ldi	r30, 0x46	; 70
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	83 ec       	ldi	r24, 0xC3	; 195
     9dc:	99 e0       	ldi	r25, 0x09	; 9
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     9e2:	ef e4       	ldi	r30, 0x4F	; 79
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	82 e2       	ldi	r24, 0x22	; 34
     9e8:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     9ea:	ee e4       	ldi	r30, 0x4E	; 78
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	81 e1       	ldi	r24, 0x11	; 17
     9f0:	80 83       	st	Z, r24
					u8_status = E_ok;
     9f2:	19 82       	std	Y+1, r1	; 0x01
     9f4:	62 c1       	rjmp	.+708    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     9f6:	e6 e4       	ldi	r30, 0x46	; 70
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	83 ec       	ldi	r24, 0xC3	; 195
     9fc:	99 e0       	ldi	r25, 0x09	; 9
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a02:	ef e4       	ldi	r30, 0x4F	; 79
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	82 e2       	ldi	r24, 0x22	; 34
     a08:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/8
					 */
					TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     a0a:	ee e4       	ldi	r30, 0x4E	; 78
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	82 e1       	ldi	r24, 0x12	; 18
     a10:	80 83       	st	Z, r24
					u8_status = E_ok;
     a12:	19 82       	std	Y+1, r1	; 0x01
     a14:	52 c1       	rjmp	.+676    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a16:	e6 e4       	ldi	r30, 0x46	; 70
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	83 ec       	ldi	r24, 0xC3	; 195
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a22:	ef e4       	ldi	r30, 0x4F	; 79
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	82 e2       	ldi	r24, 0x22	; 34
     a28:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/64
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     a2a:	ee e4       	ldi	r30, 0x4E	; 78
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	83 e1       	ldi	r24, 0x13	; 19
     a30:	80 83       	st	Z, r24
					u8_status = E_ok;
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	42 c1       	rjmp	.+644    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a36:	e6 e4       	ldi	r30, 0x46	; 70
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	83 ec       	ldi	r24, 0xC3	; 195
     a3c:	99 e0       	ldi	r25, 0x09	; 9
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
				     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				     * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				     * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a42:	ef e4       	ldi	r30, 0x4F	; 79
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	82 e2       	ldi	r24, 0x22	; 34
     a48:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/256
				     */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     a4a:	ee e4       	ldi	r30, 0x4E	; 78
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	84 e1       	ldi	r24, 0x14	; 20
     a50:	80 83       	st	Z, r24
					u8_status = E_ok;
     a52:	19 82       	std	Y+1, r1	; 0x01
     a54:	32 c1       	rjmp	.+612    	; 0xcba <Pwm_Start+0x61e>
					break;

			case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
					ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     a56:	e6 e4       	ldi	r30, 0x46	; 70
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	83 ec       	ldi	r24, 0xC3	; 195
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
					 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
					 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
					 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
					 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
					 */
					TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
     a62:	ef e4       	ldi	r30, 0x4F	; 79
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	82 e2       	ldi	r24, 0x22	; 34
     a68:	80 83       	st	Z, r24

					/* Configure timer control register TCCR1A
					 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
					 * 2. Prescaller = F_CPU/1024
					 */
					TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     a6a:	ee e4       	ldi	r30, 0x4E	; 78
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	85 e1       	ldi	r24, 0x15	; 21
     a70:	80 83       	st	Z, r24
					u8_status = E_ok;
     a72:	19 82       	std	Y+1, r1	; 0x01
     a74:	22 c1       	rjmp	.+580    	; 0xcba <Pwm_Start+0x61e>
					break;

				default:
					u8_status = E_NOk;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	1f c1       	rjmp	.+574    	; 0xcba <Pwm_Start+0x61e>
					break;
			}
	break;

	case PWM_CH2:
		OCR2 = Duty*(TIMER2_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     a7c:	e3 e4       	ldi	r30, 0x43	; 67
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	80 83       	st	Z, r24
		switch(Frequncy)
     a8c:	8c 81       	ldd	r24, Y+4	; 0x04
     a8e:	9d 81       	ldd	r25, Y+5	; 0x05
     a90:	ae 81       	ldd	r26, Y+6	; 0x06
     a92:	bf 81       	ldd	r27, Y+7	; 0x07
     a94:	8e 8b       	std	Y+22, r24	; 0x16
     a96:	9f 8b       	std	Y+23, r25	; 0x17
     a98:	a8 8f       	std	Y+24, r26	; 0x18
     a9a:	b9 8f       	std	Y+25, r27	; 0x19
     a9c:	8e 89       	ldd	r24, Y+22	; 0x16
     a9e:	9f 89       	ldd	r25, Y+23	; 0x17
     aa0:	a8 8d       	ldd	r26, Y+24	; 0x18
     aa2:	b9 8d       	ldd	r27, Y+25	; 0x19
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	91 05       	cpc	r25, r1
     aa8:	a1 05       	cpc	r26, r1
     aaa:	b1 05       	cpc	r27, r1
     aac:	c9 f1       	breq	.+114    	; 0xb20 <Pwm_Start+0x484>
     aae:	8e 89       	ldd	r24, Y+22	; 0x16
     ab0:	9f 89       	ldd	r25, Y+23	; 0x17
     ab2:	a8 8d       	ldd	r26, Y+24	; 0x18
     ab4:	b9 8d       	ldd	r27, Y+25	; 0x19
     ab6:	85 30       	cpi	r24, 0x05	; 5
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	98 f4       	brcc	.+38     	; 0xae6 <Pwm_Start+0x44a>
     ac0:	8e 89       	ldd	r24, Y+22	; 0x16
     ac2:	9f 89       	ldd	r25, Y+23	; 0x17
     ac4:	a8 8d       	ldd	r26, Y+24	; 0x18
     ac6:	b9 8d       	ldd	r27, Y+25	; 0x19
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	91 05       	cpc	r25, r1
     acc:	a1 05       	cpc	r26, r1
     ace:	b1 05       	cpc	r27, r1
     ad0:	e9 f0       	breq	.+58     	; 0xb0c <Pwm_Start+0x470>
     ad2:	8e 89       	ldd	r24, Y+22	; 0x16
     ad4:	9f 89       	ldd	r25, Y+23	; 0x17
     ad6:	a8 8d       	ldd	r26, Y+24	; 0x18
     ad8:	b9 8d       	ldd	r27, Y+25	; 0x19
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	91 05       	cpc	r25, r1
     ade:	a1 05       	cpc	r26, r1
     ae0:	b1 05       	cpc	r27, r1
     ae2:	c9 f0       	breq	.+50     	; 0xb16 <Pwm_Start+0x47a>
     ae4:	2c c0       	rjmp	.+88     	; 0xb3e <Pwm_Start+0x4a2>
     ae6:	8e 89       	ldd	r24, Y+22	; 0x16
     ae8:	9f 89       	ldd	r25, Y+23	; 0x17
     aea:	a8 8d       	ldd	r26, Y+24	; 0x18
     aec:	b9 8d       	ldd	r27, Y+25	; 0x19
     aee:	86 30       	cpi	r24, 0x06	; 6
     af0:	91 05       	cpc	r25, r1
     af2:	a1 05       	cpc	r26, r1
     af4:	b1 05       	cpc	r27, r1
     af6:	c9 f0       	breq	.+50     	; 0xb2a <Pwm_Start+0x48e>
     af8:	8e 89       	ldd	r24, Y+22	; 0x16
     afa:	9f 89       	ldd	r25, Y+23	; 0x17
     afc:	a8 8d       	ldd	r26, Y+24	; 0x18
     afe:	b9 8d       	ldd	r27, Y+25	; 0x19
     b00:	87 30       	cpi	r24, 0x07	; 7
     b02:	91 05       	cpc	r25, r1
     b04:	a1 05       	cpc	r26, r1
     b06:	b1 05       	cpc	r27, r1
     b08:	a9 f0       	breq	.+42     	; 0xb34 <Pwm_Start+0x498>
     b0a:	19 c0       	rjmp	.+50     	; 0xb3e <Pwm_Start+0x4a2>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_NO | (ONE<<COM21)| (ONE<<WGM20);
     b0c:	e5 e4       	ldi	r30, 0x45	; 69
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	81 e6       	ldi	r24, 0x61	; 97
     b12:	80 83       	st	Z, r24
     b14:	d2 c0       	rjmp	.+420    	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_8 | (ONE<<COM21)| (ONE<<WGM20);
     b16:	e5 e4       	ldi	r30, 0x45	; 69
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	82 e6       	ldi	r24, 0x62	; 98
     b1c:	80 83       	st	Z, r24
     b1e:	cd c0       	rjmp	.+410    	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_64 | (ONE<<COM21)| (ONE<<WGM20);
     b20:	e5 e4       	ldi	r30, 0x45	; 69
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	83 e6       	ldi	r24, 0x63	; 99
     b26:	80 83       	st	Z, r24
     b28:	c8 c0       	rjmp	.+400    	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_256 | (ONE<<COM21)| (ONE<<WGM20);
     b2a:	e5 e4       	ldi	r30, 0x45	; 69
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	80 83       	st	Z, r24
     b32:	c3 c0       	rjmp	.+390    	; 0xcba <Pwm_Start+0x61e>
				 * 1. PWM mode FOC0=0
				 * 2. phase correct PWM mode WGM21=0 & WGM20=1
				 * 3. clear OC0 on compare match COM20=0 & COM21=1
				 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
				 */
				TCCR2 =PWM_PRESCALER_1024 | (ONE<<COM21)| (ONE<<WGM20);
     b34:	e5 e4       	ldi	r30, 0x45	; 69
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	85 e6       	ldi	r24, 0x65	; 101
     b3a:	80 83       	st	Z, r24
     b3c:	be c0       	rjmp	.+380    	; 0xcba <Pwm_Start+0x61e>
				break;

		default:
			u8_status = E_NOk;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	bb c0       	rjmp	.+374    	; 0xcba <Pwm_Start+0x61e>
			break;
		}
	break;

	case PWM_CH1A_CH1B:
		OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     b44:	ea e4       	ldi	r30, 0x4A	; 74
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	8b 81       	ldd	r24, Y+3	; 0x03
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	c9 01       	movw	r24, r18
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	80 83       	st	Z, r24
		OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     b68:	e8 e4       	ldi	r30, 0x48	; 72
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	c9 01       	movw	r24, r18
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	82 0f       	add	r24, r18
     b7a:	93 1f       	adc	r25, r19
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	91 83       	std	Z+1, r25	; 0x01
     b8a:	80 83       	st	Z, r24
		switch(Frequncy)
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	9d 81       	ldd	r25, Y+5	; 0x05
     b90:	ae 81       	ldd	r26, Y+6	; 0x06
     b92:	bf 81       	ldd	r27, Y+7	; 0x07
     b94:	8a 8f       	std	Y+26, r24	; 0x1a
     b96:	9b 8f       	std	Y+27, r25	; 0x1b
     b98:	ac 8f       	std	Y+28, r26	; 0x1c
     b9a:	bd 8f       	std	Y+29, r27	; 0x1d
     b9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ba2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	a1 05       	cpc	r26, r1
     baa:	b1 05       	cpc	r27, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <Pwm_Start+0x514>
     bae:	50 c0       	rjmp	.+160    	; 0xc50 <Pwm_Start+0x5b4>
     bb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bb4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bb6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bb8:	84 30       	cpi	r24, 0x04	; 4
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	98 f4       	brcc	.+38     	; 0xbe8 <Pwm_Start+0x54c>
     bc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bc4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bc6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bc8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	a1 05       	cpc	r26, r1
     bd0:	b1 05       	cpc	r27, r1
     bd2:	f1 f0       	breq	.+60     	; 0xc10 <Pwm_Start+0x574>
     bd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bd8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bdc:	82 30       	cpi	r24, 0x02	; 2
     bde:	91 05       	cpc	r25, r1
     be0:	a1 05       	cpc	r26, r1
     be2:	b1 05       	cpc	r27, r1
     be4:	29 f1       	breq	.+74     	; 0xc30 <Pwm_Start+0x594>
     be6:	64 c0       	rjmp	.+200    	; 0xcb0 <Pwm_Start+0x614>
     be8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bec:	ac 8d       	ldd	r26, Y+28	; 0x1c
     bee:	bd 8d       	ldd	r27, Y+29	; 0x1d
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	91 05       	cpc	r25, r1
     bf4:	a1 05       	cpc	r26, r1
     bf6:	b1 05       	cpc	r27, r1
     bf8:	d9 f1       	breq	.+118    	; 0xc70 <Pwm_Start+0x5d4>
     bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bfc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bfe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c00:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	91 05       	cpc	r25, r1
     c06:	a1 05       	cpc	r26, r1
     c08:	b1 05       	cpc	r27, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <Pwm_Start+0x572>
     c0c:	41 c0       	rjmp	.+130    	; 0xc90 <Pwm_Start+0x5f4>
     c0e:	50 c0       	rjmp	.+160    	; 0xcb0 <Pwm_Start+0x614>
		{
		case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c10:	e6 e4       	ldi	r30, 0x46	; 70
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	83 ec       	ldi	r24, 0xC3	; 195
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c1c:	ef e4       	ldi	r30, 0x4F	; 79
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	82 ea       	ldi	r24, 0xA2	; 162
     c22:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     c24:	ee e4       	ldi	r30, 0x4E	; 78
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	81 e1       	ldi	r24, 0x11	; 17
     c2a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c2c:	19 82       	std	Y+1, r1	; 0x01
     c2e:	45 c0       	rjmp	.+138    	; 0xcba <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c30:	e6 e4       	ldi	r30, 0x46	; 70
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	83 ec       	ldi	r24, 0xC3	; 195
     c36:	99 e0       	ldi	r25, 0x09	; 9
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c3c:	ef e4       	ldi	r30, 0x4F	; 79
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	82 ea       	ldi	r24, 0xA2	; 162
     c42:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/8
				 */
				TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     c44:	ee e4       	ldi	r30, 0x4E	; 78
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	82 e1       	ldi	r24, 0x12	; 18
     c4a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c4c:	19 82       	std	Y+1, r1	; 0x01
     c4e:	35 c0       	rjmp	.+106    	; 0xcba <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c50:	e6 e4       	ldi	r30, 0x46	; 70
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	83 ec       	ldi	r24, 0xC3	; 195
     c56:	99 e0       	ldi	r25, 0x09	; 9
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c5c:	ef e4       	ldi	r30, 0x4F	; 79
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	82 ea       	ldi	r24, 0xA2	; 162
     c62:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/64
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     c64:	ee e4       	ldi	r30, 0x4E	; 78
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	83 e1       	ldi	r24, 0x13	; 19
     c6a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	25 c0       	rjmp	.+74     	; 0xcba <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c70:	e6 e4       	ldi	r30, 0x46	; 70
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	83 ec       	ldi	r24, 0xC3	; 195
     c76:	99 e0       	ldi	r25, 0x09	; 9
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c7c:	ef e4       	ldi	r30, 0x4F	; 79
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	82 ea       	ldi	r24, 0xA2	; 162
     c82:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/256
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     c84:	ee e4       	ldi	r30, 0x4E	; 78
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	84 e1       	ldi	r24, 0x14	; 20
     c8a:	80 83       	st	Z, r24
				u8_status = E_ok;
     c8c:	19 82       	std	Y+1, r1	; 0x01
     c8e:	15 c0       	rjmp	.+42     	; 0xcba <Pwm_Start+0x61e>
				break;

		case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
				ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     c90:	e6 e4       	ldi	r30, 0x46	; 70
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	83 ec       	ldi	r24, 0xC3	; 195
     c96:	99 e0       	ldi	r25, 0x09	; 9
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
				 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
				 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
				 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
				 * 4. phase correct Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 10)
				 */
				TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1) | (ONE<<COM1B1);
     c9c:	ef e4       	ldi	r30, 0x4F	; 79
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	82 ea       	ldi	r24, 0xA2	; 162
     ca2:	80 83       	st	Z, r24

				/* Configure timer control register TCCR1A
				 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 10)
				 * 2. Prescaller = F_CPU/1024
				 */
				TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     ca4:	ee e4       	ldi	r30, 0x4E	; 78
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	85 e1       	ldi	r24, 0x15	; 21
     caa:	80 83       	st	Z, r24
				u8_status = E_ok;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	05 c0       	rjmp	.+10     	; 0xcba <Pwm_Start+0x61e>
				break;

			default:
				u8_status = E_NOk;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <Pwm_Start+0x61e>
		}

	break;

	default:
		u8_status = E_NOk;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
}
     cbc:	6d 96       	adiw	r28, 0x1d	; 29
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <Pwm_Update>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: updates the duty cycle and frequency of the dedicated channel
************************************************************************************/
ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	69 97       	sbiw	r28, 0x19	; 25
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	2c 83       	std	Y+4, r18	; 0x04
     ce8:	3d 83       	std	Y+5, r19	; 0x05
     cea:	4e 83       	std	Y+6, r20	; 0x06
     cec:	5f 83       	std	Y+7, r21	; 0x07
	uint8_t u8_status;
	switch (Channel)
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	39 87       	std	Y+9, r19	; 0x09
     cf6:	28 87       	std	Y+8, r18	; 0x08
     cf8:	88 85       	ldd	r24, Y+8	; 0x08
     cfa:	99 85       	ldd	r25, Y+9	; 0x09
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <Pwm_Update+0x36>
     d02:	8a c0       	rjmp	.+276    	; 0xe18 <Pwm_Update+0x14a>
     d04:	a8 85       	ldd	r26, Y+8	; 0x08
     d06:	b9 85       	ldd	r27, Y+9	; 0x09
     d08:	a2 30       	cpi	r26, 0x02	; 2
     d0a:	b1 05       	cpc	r27, r1
     d0c:	34 f4       	brge	.+12     	; 0xd1a <Pwm_Update+0x4c>
     d0e:	28 85       	ldd	r18, Y+8	; 0x08
     d10:	39 85       	ldd	r19, Y+9	; 0x09
     d12:	21 15       	cp	r18, r1
     d14:	31 05       	cpc	r19, r1
     d16:	71 f0       	breq	.+28     	; 0xd34 <Pwm_Update+0x66>
     d18:	51 c2       	rjmp	.+1186   	; 0x11bc <Pwm_Update+0x4ee>
     d1a:	88 85       	ldd	r24, Y+8	; 0x08
     d1c:	99 85       	ldd	r25, Y+9	; 0x09
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <Pwm_Update+0x58>
     d24:	29 c1       	rjmp	.+594    	; 0xf78 <Pwm_Update+0x2aa>
     d26:	a8 85       	ldd	r26, Y+8	; 0x08
     d28:	b9 85       	ldd	r27, Y+9	; 0x09
     d2a:	a3 30       	cpi	r26, 0x03	; 3
     d2c:	b1 05       	cpc	r27, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <Pwm_Update+0x64>
     d30:	d3 c1       	rjmp	.+934    	; 0x10d8 <Pwm_Update+0x40a>
     d32:	44 c2       	rjmp	.+1160   	; 0x11bc <Pwm_Update+0x4ee>
	{
		case PWM_CH0:
			if(T0_PrescallerValue==CLEAR)
     d34:	80 91 60 00 	lds	r24, 0x0060
     d38:	90 91 61 00 	lds	r25, 0x0061
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	19 f4       	brne	.+6      	; 0xd46 <Pwm_Update+0x78>
			{
				u8_status = E_NOk;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	3d c2       	rjmp	.+1146   	; 0x11c0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR0 = (Duty)*(TIMER0_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
     d46:	ec e5       	ldi	r30, 0x5C	; 92
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	80 83       	st	Z, r24
				switch(Frequncy)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	ae 81       	ldd	r26, Y+6	; 0x06
     d5c:	bf 81       	ldd	r27, Y+7	; 0x07
     d5e:	8a 87       	std	Y+10, r24	; 0x0a
     d60:	9b 87       	std	Y+11, r25	; 0x0b
     d62:	ac 87       	std	Y+12, r26	; 0x0c
     d64:	bd 87       	std	Y+13, r27	; 0x0d
     d66:	8a 85       	ldd	r24, Y+10	; 0x0a
     d68:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6a:	ac 85       	ldd	r26, Y+12	; 0x0c
     d6c:	bd 85       	ldd	r27, Y+13	; 0x0d
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	d9 f1       	breq	.+118    	; 0xdee <Pwm_Update+0x120>
     d78:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d7c:	ac 85       	ldd	r26, Y+12	; 0x0c
     d7e:	bd 85       	ldd	r27, Y+13	; 0x0d
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	91 05       	cpc	r25, r1
     d84:	a1 05       	cpc	r26, r1
     d86:	b1 05       	cpc	r27, r1
     d88:	98 f4       	brcc	.+38     	; 0xdb0 <Pwm_Update+0xe2>
     d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d8e:	ac 85       	ldd	r26, Y+12	; 0x0c
     d90:	bd 85       	ldd	r27, Y+13	; 0x0d
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 05       	cpc	r25, r1
     d96:	a1 05       	cpc	r26, r1
     d98:	b1 05       	cpc	r27, r1
     d9a:	e9 f0       	breq	.+58     	; 0xdd6 <Pwm_Update+0x108>
     d9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     da0:	ac 85       	ldd	r26, Y+12	; 0x0c
     da2:	bd 85       	ldd	r27, Y+13	; 0x0d
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	91 05       	cpc	r25, r1
     da8:	a1 05       	cpc	r26, r1
     daa:	b1 05       	cpc	r27, r1
     dac:	d1 f0       	breq	.+52     	; 0xde2 <Pwm_Update+0x114>
     dae:	31 c0       	rjmp	.+98     	; 0xe12 <Pwm_Update+0x144>
     db0:	8a 85       	ldd	r24, Y+10	; 0x0a
     db2:	9b 85       	ldd	r25, Y+11	; 0x0b
     db4:	ac 85       	ldd	r26, Y+12	; 0x0c
     db6:	bd 85       	ldd	r27, Y+13	; 0x0d
     db8:	84 30       	cpi	r24, 0x04	; 4
     dba:	91 05       	cpc	r25, r1
     dbc:	a1 05       	cpc	r26, r1
     dbe:	b1 05       	cpc	r27, r1
     dc0:	e1 f0       	breq	.+56     	; 0xdfa <Pwm_Update+0x12c>
     dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc6:	ac 85       	ldd	r26, Y+12	; 0x0c
     dc8:	bd 85       	ldd	r27, Y+13	; 0x0d
     dca:	85 30       	cpi	r24, 0x05	; 5
     dcc:	91 05       	cpc	r25, r1
     dce:	a1 05       	cpc	r26, r1
     dd0:	b1 05       	cpc	r27, r1
     dd2:	c9 f0       	breq	.+50     	; 0xe06 <Pwm_Update+0x138>
     dd4:	1e c0       	rjmp	.+60     	; 0xe12 <Pwm_Update+0x144>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU CS00=1 CS01=0 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_NO | (ONE<<COM01)| (ONE<<WGM00);
     dd6:	e3 e5       	ldi	r30, 0x53	; 83
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	81 e6       	ldi	r24, 0x61	; 97
     ddc:	80 83       	st	Z, r24
						u8_status = E_ok;
     dde:	19 82       	std	Y+1, r1	; 0x01
     de0:	ef c1       	rjmp	.+990    	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/8 CS00=1 CS01=0 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_8 | (ONE<<COM01)| (ONE<<WGM00);
     de2:	e3 e5       	ldi	r30, 0x53	; 83
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	82 e6       	ldi	r24, 0x62	; 98
     de8:	80 83       	st	Z, r24
						u8_status = E_ok;
     dea:	19 82       	std	Y+1, r1	; 0x01
     dec:	e9 c1       	rjmp	.+978    	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
						 */
						TCCR0 =PWM_PRESCALER_64 | (ONE<<COM01)| (ONE<<WGM00);
     dee:	e3 e5       	ldi	r30, 0x53	; 83
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	83 e6       	ldi	r24, 0x63	; 99
     df4:	80 83       	st	Z, r24
						u8_status = E_ok;
     df6:	19 82       	std	Y+1, r1	; 0x01
     df8:	e3 c1       	rjmp	.+966    	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/256 CS00=0 CS01=0 CS02=1
						 */
						TCCR0 =PWM_PRESCALER_256 | (ONE<<COM01)| (ONE<<WGM00);
     dfa:	e3 e5       	ldi	r30, 0x53	; 83
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	84 e6       	ldi	r24, 0x64	; 100
     e00:	80 83       	st	Z, r24
						u8_status = E_ok;
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	dd c1       	rjmp	.+954    	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM01=0 & WGM00=1
						 * 3. clear OC0 on compare match COM00=0 & COM01=1
						 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
						 */
						TCCR0 =PWM_PRESCALER_1024 | (ONE<<COM01)| (ONE<<WGM00);
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	85 e6       	ldi	r24, 0x65	; 101
     e0c:	80 83       	st	Z, r24
						u8_status = E_ok;
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	d7 c1       	rjmp	.+942    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	d4 c1       	rjmp	.+936    	; 0x11c0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH1A:
			if(T1_PrescallerValue==CLEAR)
     e18:	80 91 62 00 	lds	r24, 0x0062
     e1c:	90 91 63 00 	lds	r25, 0x0063
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	19 f4       	brne	.+6      	; 0xe2a <Pwm_Update+0x15c>
			{
				u8_status = E_NOk;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	cb c1       	rjmp	.+918    	; 0x11c0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR1A = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     e2a:	ea e4       	ldi	r30, 0x4A	; 74
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	c9 01       	movw	r24, r18
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
				switch(Frequncy)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	ae 81       	ldd	r26, Y+6	; 0x06
     e54:	bf 81       	ldd	r27, Y+7	; 0x07
     e56:	8e 87       	std	Y+14, r24	; 0x0e
     e58:	9f 87       	std	Y+15, r25	; 0x0f
     e5a:	a8 8b       	std	Y+16, r26	; 0x10
     e5c:	b9 8b       	std	Y+17, r27	; 0x11
     e5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e60:	9f 85       	ldd	r25, Y+15	; 0x0f
     e62:	a8 89       	ldd	r26, Y+16	; 0x10
     e64:	b9 89       	ldd	r27, Y+17	; 0x11
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	a1 05       	cpc	r26, r1
     e6c:	b1 05       	cpc	r27, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <Pwm_Update+0x1a4>
     e70:	50 c0       	rjmp	.+160    	; 0xf12 <Pwm_Update+0x244>
     e72:	8e 85       	ldd	r24, Y+14	; 0x0e
     e74:	9f 85       	ldd	r25, Y+15	; 0x0f
     e76:	a8 89       	ldd	r26, Y+16	; 0x10
     e78:	b9 89       	ldd	r27, Y+17	; 0x11
     e7a:	84 30       	cpi	r24, 0x04	; 4
     e7c:	91 05       	cpc	r25, r1
     e7e:	a1 05       	cpc	r26, r1
     e80:	b1 05       	cpc	r27, r1
     e82:	98 f4       	brcc	.+38     	; 0xeaa <Pwm_Update+0x1dc>
     e84:	8e 85       	ldd	r24, Y+14	; 0x0e
     e86:	9f 85       	ldd	r25, Y+15	; 0x0f
     e88:	a8 89       	ldd	r26, Y+16	; 0x10
     e8a:	b9 89       	ldd	r27, Y+17	; 0x11
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	a1 05       	cpc	r26, r1
     e92:	b1 05       	cpc	r27, r1
     e94:	f1 f0       	breq	.+60     	; 0xed2 <Pwm_Update+0x204>
     e96:	8e 85       	ldd	r24, Y+14	; 0x0e
     e98:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9a:	a8 89       	ldd	r26, Y+16	; 0x10
     e9c:	b9 89       	ldd	r27, Y+17	; 0x11
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	91 05       	cpc	r25, r1
     ea2:	a1 05       	cpc	r26, r1
     ea4:	b1 05       	cpc	r27, r1
     ea6:	29 f1       	breq	.+74     	; 0xef2 <Pwm_Update+0x224>
     ea8:	64 c0       	rjmp	.+200    	; 0xf72 <Pwm_Update+0x2a4>
     eaa:	8e 85       	ldd	r24, Y+14	; 0x0e
     eac:	9f 85       	ldd	r25, Y+15	; 0x0f
     eae:	a8 89       	ldd	r26, Y+16	; 0x10
     eb0:	b9 89       	ldd	r27, Y+17	; 0x11
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	91 05       	cpc	r25, r1
     eb6:	a1 05       	cpc	r26, r1
     eb8:	b1 05       	cpc	r27, r1
     eba:	d9 f1       	breq	.+118    	; 0xf32 <Pwm_Update+0x264>
     ebc:	8e 85       	ldd	r24, Y+14	; 0x0e
     ebe:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec0:	a8 89       	ldd	r26, Y+16	; 0x10
     ec2:	b9 89       	ldd	r27, Y+17	; 0x11
     ec4:	85 30       	cpi	r24, 0x05	; 5
     ec6:	91 05       	cpc	r25, r1
     ec8:	a1 05       	cpc	r26, r1
     eca:	b1 05       	cpc	r27, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <Pwm_Update+0x202>
     ece:	41 c0       	rjmp	.+130    	; 0xf52 <Pwm_Update+0x284>
     ed0:	50 c0       	rjmp	.+160    	; 0xf72 <Pwm_Update+0x2a4>
				{

				case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     ed2:	e6 e4       	ldi	r30, 0x46	; 70
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	83 ec       	ldi	r24, 0xC3	; 195
     ed8:	99 e0       	ldi	r25, 0x09	; 9
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     ede:	ef e4       	ldi	r30, 0x4F	; 79
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	82 e8       	ldi	r24, 0x82	; 130
     ee4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
						 * 2. Prescaller = F_CPU
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
     ee6:	ee e4       	ldi	r30, 0x4E	; 78
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	81 e1       	ldi	r24, 0x11	; 17
     eec:	80 83       	st	Z, r24
						u8_status = E_ok;
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	67 c1       	rjmp	.+718    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     ef2:	e6 e4       	ldi	r30, 0x46	; 70
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	83 ec       	ldi	r24, 0xC3	; 195
     ef8:	99 e0       	ldi	r25, 0x09	; 9
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     efe:	ef e4       	ldi	r30, 0x4F	; 79
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	82 e8       	ldi	r24, 0x82	; 130
     f04:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/8
						 */
						TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	82 e1       	ldi	r24, 0x12	; 18
     f0c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f0e:	19 82       	std	Y+1, r1	; 0x01
     f10:	57 c1       	rjmp	.+686    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f12:	e6 e4       	ldi	r30, 0x46	; 70
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	83 ec       	ldi	r24, 0xC3	; 195
     f18:	99 e0       	ldi	r25, 0x09	; 9
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f1e:	ef e4       	ldi	r30, 0x4F	; 79
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	82 e8       	ldi	r24, 0x82	; 130
     f24:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/64
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
     f26:	ee e4       	ldi	r30, 0x4E	; 78
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	83 e1       	ldi	r24, 0x13	; 19
     f2c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	47 c1       	rjmp	.+654    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f32:	e6 e4       	ldi	r30, 0x46	; 70
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	83 ec       	ldi	r24, 0xC3	; 195
     f38:	99 e0       	ldi	r25, 0x09	; 9
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f3e:	ef e4       	ldi	r30, 0x4F	; 79
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	82 e8       	ldi	r24, 0x82	; 130
     f44:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/256
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
     f46:	ee e4       	ldi	r30, 0x4E	; 78
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	84 e1       	ldi	r24, 0x14	; 20
     f4c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f4e:	19 82       	std	Y+1, r1	; 0x01
     f50:	37 c1       	rjmp	.+622    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
     f52:	e6 e4       	ldi	r30, 0x46	; 70
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	83 ec       	ldi	r24, 0xC3	; 195
     f58:	99 e0       	ldi	r25, 0x09	; 9
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1A1);
     f5e:	ef e4       	ldi	r30, 0x4F	; 79
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	82 e8       	ldi	r24, 0x82	; 130
     f64:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/1024
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	85 e1       	ldi	r24, 0x15	; 21
     f6c:	80 83       	st	Z, r24
						u8_status = E_ok;
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	27 c1       	rjmp	.+590    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	24 c1       	rjmp	.+584    	; 0x11c0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH1B:
			if(T1_PrescallerValue==CLEAR)
     f78:	80 91 62 00 	lds	r24, 0x0062
     f7c:	90 91 63 00 	lds	r25, 0x0063
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	19 f4       	brne	.+6      	; 0xf8a <Pwm_Update+0x2bc>
			{
				u8_status = E_NOk;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01
     f88:	1b c1       	rjmp	.+566    	; 0x11c0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR1B = (Duty)*(TIMER_ICR1_TOP_VALUE/ONE_HUNDRED);   /*output compare value*/
     f8a:	e8 e4       	ldi	r30, 0x48	; 72
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	c9 01       	movw	r24, r18
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
				switch(Frequncy)
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9d 81       	ldd	r25, Y+5	; 0x05
     fb2:	ae 81       	ldd	r26, Y+6	; 0x06
     fb4:	bf 81       	ldd	r27, Y+7	; 0x07
     fb6:	8a 8b       	std	Y+18, r24	; 0x12
     fb8:	9b 8b       	std	Y+19, r25	; 0x13
     fba:	ac 8b       	std	Y+20, r26	; 0x14
     fbc:	bd 8b       	std	Y+21, r27	; 0x15
     fbe:	8a 89       	ldd	r24, Y+18	; 0x12
     fc0:	9b 89       	ldd	r25, Y+19	; 0x13
     fc2:	ac 89       	ldd	r26, Y+20	; 0x14
     fc4:	bd 89       	ldd	r27, Y+21	; 0x15
     fc6:	83 30       	cpi	r24, 0x03	; 3
     fc8:	91 05       	cpc	r25, r1
     fca:	a1 05       	cpc	r26, r1
     fcc:	b1 05       	cpc	r27, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <Pwm_Update+0x304>
     fd0:	50 c0       	rjmp	.+160    	; 0x1072 <Pwm_Update+0x3a4>
     fd2:	8a 89       	ldd	r24, Y+18	; 0x12
     fd4:	9b 89       	ldd	r25, Y+19	; 0x13
     fd6:	ac 89       	ldd	r26, Y+20	; 0x14
     fd8:	bd 89       	ldd	r27, Y+21	; 0x15
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	91 05       	cpc	r25, r1
     fde:	a1 05       	cpc	r26, r1
     fe0:	b1 05       	cpc	r27, r1
     fe2:	98 f4       	brcc	.+38     	; 0x100a <Pwm_Update+0x33c>
     fe4:	8a 89       	ldd	r24, Y+18	; 0x12
     fe6:	9b 89       	ldd	r25, Y+19	; 0x13
     fe8:	ac 89       	ldd	r26, Y+20	; 0x14
     fea:	bd 89       	ldd	r27, Y+21	; 0x15
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	a1 05       	cpc	r26, r1
     ff2:	b1 05       	cpc	r27, r1
     ff4:	f1 f0       	breq	.+60     	; 0x1032 <Pwm_Update+0x364>
     ff6:	8a 89       	ldd	r24, Y+18	; 0x12
     ff8:	9b 89       	ldd	r25, Y+19	; 0x13
     ffa:	ac 89       	ldd	r26, Y+20	; 0x14
     ffc:	bd 89       	ldd	r27, Y+21	; 0x15
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	91 05       	cpc	r25, r1
    1002:	a1 05       	cpc	r26, r1
    1004:	b1 05       	cpc	r27, r1
    1006:	29 f1       	breq	.+74     	; 0x1052 <Pwm_Update+0x384>
    1008:	64 c0       	rjmp	.+200    	; 0x10d2 <Pwm_Update+0x404>
    100a:	8a 89       	ldd	r24, Y+18	; 0x12
    100c:	9b 89       	ldd	r25, Y+19	; 0x13
    100e:	ac 89       	ldd	r26, Y+20	; 0x14
    1010:	bd 89       	ldd	r27, Y+21	; 0x15
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	91 05       	cpc	r25, r1
    1016:	a1 05       	cpc	r26, r1
    1018:	b1 05       	cpc	r27, r1
    101a:	d9 f1       	breq	.+118    	; 0x1092 <Pwm_Update+0x3c4>
    101c:	8a 89       	ldd	r24, Y+18	; 0x12
    101e:	9b 89       	ldd	r25, Y+19	; 0x13
    1020:	ac 89       	ldd	r26, Y+20	; 0x14
    1022:	bd 89       	ldd	r27, Y+21	; 0x15
    1024:	85 30       	cpi	r24, 0x05	; 5
    1026:	91 05       	cpc	r25, r1
    1028:	a1 05       	cpc	r26, r1
    102a:	b1 05       	cpc	r27, r1
    102c:	09 f4       	brne	.+2      	; 0x1030 <Pwm_Update+0x362>
    102e:	41 c0       	rjmp	.+130    	; 0x10b2 <Pwm_Update+0x3e4>
    1030:	50 c0       	rjmp	.+160    	; 0x10d2 <Pwm_Update+0x404>
				{
				case(T1_PHASE_CORRECT_FREQUENCY_3KHZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1032:	e6 e4       	ldi	r30, 0x46	; 70
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	83 ec       	ldi	r24, 0xC3	; 195
    1038:	99 e0       	ldi	r25, 0x09	; 9
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    103e:	ef e4       	ldi	r30, 0x4F	; 79
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	82 e2       	ldi	r24, 0x22	; 34
    1044:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. phase correct Pwm Mode with the TOP in ICR1 WGM12=0 WGM13=1 (Mode Number 10)
						 * 2. Prescaller = F_CPU
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_NO;
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	81 e1       	ldi	r24, 0x11	; 17
    104c:	80 83       	st	Z, r24
						u8_status = E_ok;
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	b7 c0       	rjmp	.+366    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_400HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1052:	e6 e4       	ldi	r30, 0x46	; 70
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	83 ec       	ldi	r24, 0xC3	; 195
    1058:	99 e0       	ldi	r25, 0x09	; 9
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    105e:	ef e4       	ldi	r30, 0x4F	; 79
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	82 e2       	ldi	r24, 0x22	; 34
    1064:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/8
						 */
						TCCR1B = (ONE<<WGM13) | PWM_PRESCALER_8;
    1066:	ee e4       	ldi	r30, 0x4E	; 78
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	82 e1       	ldi	r24, 0x12	; 18
    106c:	80 83       	st	Z, r24
						u8_status = E_ok;
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	a7 c0       	rjmp	.+334    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_50HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1072:	e6 e4       	ldi	r30, 0x46	; 70
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	83 ec       	ldi	r24, 0xC3	; 195
    1078:	99 e0       	ldi	r25, 0x09	; 9
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    107e:	ef e4       	ldi	r30, 0x4F	; 79
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	82 e2       	ldi	r24, 0x22	; 34
    1084:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/64
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_64;
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	83 e1       	ldi	r24, 0x13	; 19
    108c:	80 83       	st	Z, r24
						u8_status = E_ok;
    108e:	19 82       	std	Y+1, r1	; 0x01
    1090:	97 c0       	rjmp	.+302    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_13HZ):  //90hz
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    1092:	e6 e4       	ldi	r30, 0x46	; 70
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	83 ec       	ldi	r24, 0xC3	; 195
    1098:	99 e0       	ldi	r25, 0x09	; 9
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    109e:	ef e4       	ldi	r30, 0x4F	; 79
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	82 e2       	ldi	r24, 0x22	; 34
    10a4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/256
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_256;
    10a6:	ee e4       	ldi	r30, 0x4E	; 78
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	84 e1       	ldi	r24, 0x14	; 20
    10ac:	80 83       	st	Z, r24
						u8_status = E_ok;
    10ae:	19 82       	std	Y+1, r1	; 0x01
    10b0:	87 c0       	rjmp	.+270    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				case(T1_PHASE_CORRECT_FREQUENCY_3HZ):
						ICR1 = TIMER_ICR1_TOP_VALUE;	/* Set TOP count for timer1 in ICR1 register */
    10b2:	e6 e4       	ldi	r30, 0x46	; 70
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	83 ec       	ldi	r24, 0xC3	; 195
    10b8:	99 e0       	ldi	r25, 0x09	; 9
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
						 * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
						 * 2. Clear OC1B on compare match (non inverting mode) COM1B1=1 COM1B0=0
						 * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
						 * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
						 */
						TCCR1A = (ONE<<WGM11) | (ONE<<COM1B1);
    10be:	ef e4       	ldi	r30, 0x4F	; 79
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	82 e2       	ldi	r24, 0x22	; 34
    10c4:	80 83       	st	Z, r24

						/* Configure timer control register TCCR1A
						 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
						 * 2. Prescaller = F_CPU/1024
						 */
						TCCR1B =(ONE<<WGM13) | PWM_PRESCALER_1024;
    10c6:	ee e4       	ldi	r30, 0x4E	; 78
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	85 e1       	ldi	r24, 0x15	; 21
    10cc:	80 83       	st	Z, r24
						u8_status = E_ok;
    10ce:	19 82       	std	Y+1, r1	; 0x01
    10d0:	77 c0       	rjmp	.+238    	; 0x11c0 <Pwm_Update+0x4f2>
						break;

					default:
						u8_status = E_NOk;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	74 c0       	rjmp	.+232    	; 0x11c0 <Pwm_Update+0x4f2>
				}
			}
		break;

		case PWM_CH2:
			if(T2_PrescallerValue==CLEAR)
    10d8:	80 91 64 00 	lds	r24, 0x0064
    10dc:	90 91 65 00 	lds	r25, 0x0065
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	19 f4       	brne	.+6      	; 0x10ea <Pwm_Update+0x41c>
			{
				u8_status = E_NOk;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6b c0       	rjmp	.+214    	; 0x11c0 <Pwm_Update+0x4f2>
			}
			else
			{
				OCR2 = Duty*(TIMER2_MAX_COUNT/ONE_HUNDRED); /*output compare value*/
    10ea:	e3 e4       	ldi	r30, 0x43	; 67
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	80 83       	st	Z, r24
				switch(Frequncy)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	ae 81       	ldd	r26, Y+6	; 0x06
    1100:	bf 81       	ldd	r27, Y+7	; 0x07
    1102:	8e 8b       	std	Y+22, r24	; 0x16
    1104:	9f 8b       	std	Y+23, r25	; 0x17
    1106:	a8 8f       	std	Y+24, r26	; 0x18
    1108:	b9 8f       	std	Y+25, r27	; 0x19
    110a:	8e 89       	ldd	r24, Y+22	; 0x16
    110c:	9f 89       	ldd	r25, Y+23	; 0x17
    110e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1110:	b9 8d       	ldd	r27, Y+25	; 0x19
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	91 05       	cpc	r25, r1
    1116:	a1 05       	cpc	r26, r1
    1118:	b1 05       	cpc	r27, r1
    111a:	d9 f1       	breq	.+118    	; 0x1192 <Pwm_Update+0x4c4>
    111c:	8e 89       	ldd	r24, Y+22	; 0x16
    111e:	9f 89       	ldd	r25, Y+23	; 0x17
    1120:	a8 8d       	ldd	r26, Y+24	; 0x18
    1122:	b9 8d       	ldd	r27, Y+25	; 0x19
    1124:	85 30       	cpi	r24, 0x05	; 5
    1126:	91 05       	cpc	r25, r1
    1128:	a1 05       	cpc	r26, r1
    112a:	b1 05       	cpc	r27, r1
    112c:	98 f4       	brcc	.+38     	; 0x1154 <Pwm_Update+0x486>
    112e:	8e 89       	ldd	r24, Y+22	; 0x16
    1130:	9f 89       	ldd	r25, Y+23	; 0x17
    1132:	a8 8d       	ldd	r26, Y+24	; 0x18
    1134:	b9 8d       	ldd	r27, Y+25	; 0x19
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	a1 05       	cpc	r26, r1
    113c:	b1 05       	cpc	r27, r1
    113e:	e9 f0       	breq	.+58     	; 0x117a <Pwm_Update+0x4ac>
    1140:	8e 89       	ldd	r24, Y+22	; 0x16
    1142:	9f 89       	ldd	r25, Y+23	; 0x17
    1144:	a8 8d       	ldd	r26, Y+24	; 0x18
    1146:	b9 8d       	ldd	r27, Y+25	; 0x19
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	91 05       	cpc	r25, r1
    114c:	a1 05       	cpc	r26, r1
    114e:	b1 05       	cpc	r27, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <Pwm_Update+0x4b8>
    1152:	31 c0       	rjmp	.+98     	; 0x11b6 <Pwm_Update+0x4e8>
    1154:	8e 89       	ldd	r24, Y+22	; 0x16
    1156:	9f 89       	ldd	r25, Y+23	; 0x17
    1158:	a8 8d       	ldd	r26, Y+24	; 0x18
    115a:	b9 8d       	ldd	r27, Y+25	; 0x19
    115c:	86 30       	cpi	r24, 0x06	; 6
    115e:	91 05       	cpc	r25, r1
    1160:	a1 05       	cpc	r26, r1
    1162:	b1 05       	cpc	r27, r1
    1164:	e1 f0       	breq	.+56     	; 0x119e <Pwm_Update+0x4d0>
    1166:	8e 89       	ldd	r24, Y+22	; 0x16
    1168:	9f 89       	ldd	r25, Y+23	; 0x17
    116a:	a8 8d       	ldd	r26, Y+24	; 0x18
    116c:	b9 8d       	ldd	r27, Y+25	; 0x19
    116e:	87 30       	cpi	r24, 0x07	; 7
    1170:	91 05       	cpc	r25, r1
    1172:	a1 05       	cpc	r26, r1
    1174:	b1 05       	cpc	r27, r1
    1176:	c9 f0       	breq	.+50     	; 0x11aa <Pwm_Update+0x4dc>
    1178:	1e c0       	rjmp	.+60     	; 0x11b6 <Pwm_Update+0x4e8>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_NO | (ONE<<COM21)| (ONE<<WGM20);
    117a:	e5 e4       	ldi	r30, 0x45	; 69
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	81 e6       	ldi	r24, 0x61	; 97
    1180:	80 83       	st	Z, r24
						u8_status = E_ok;
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_8 | (ONE<<COM21)| (ONE<<WGM20);
    1186:	e5 e4       	ldi	r30, 0x45	; 69
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	82 e6       	ldi	r24, 0x62	; 98
    118c:	80 83       	st	Z, r24
						u8_status = E_ok;
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	17 c0       	rjmp	.+46     	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_64 | (ONE<<COM21)| (ONE<<WGM20);
    1192:	e5 e4       	ldi	r30, 0x45	; 69
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	83 e6       	ldi	r24, 0x63	; 99
    1198:	80 83       	st	Z, r24
						u8_status = E_ok;
    119a:	19 82       	std	Y+1, r1	; 0x01
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_256 | (ONE<<COM21)| (ONE<<WGM20);
    119e:	e5 e4       	ldi	r30, 0x45	; 69
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	84 e6       	ldi	r24, 0x64	; 100
    11a4:	80 83       	st	Z, r24
						u8_status = E_ok;
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	0b c0       	rjmp	.+22     	; 0x11c0 <Pwm_Update+0x4f2>
						 * 1. PWM mode FOC0=0
						 * 2. phase correct PWM mode WGM21=0 & WGM20=1
						 * 3. clear OC0 on compare match COM20=0 & COM21=1
						 * 4. clock = F_CPU/1024 CS20=1 CS21=0 CS22=1
						 */
						TCCR2 =PWM_PRESCALER_1024 | (ONE<<COM21)| (ONE<<WGM20);
    11aa:	e5 e4       	ldi	r30, 0x45	; 69
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	85 e6       	ldi	r24, 0x65	; 101
    11b0:	80 83       	st	Z, r24
						u8_status = E_ok;
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <Pwm_Update+0x4f2>
						break;

				default:
					u8_status = E_NOk;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <Pwm_Update+0x4f2>
				}
			}
		break;

		default:
			u8_status = E_NOk;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	69 96       	adiw	r28, 0x19	; 25
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <Pwm_Stop>:
* Return value: u8_error- variable that describe the error status
* Description: responsible of Stopping the PWM by clearing the prescaler
* of the corresponding channel
************************************************************************************/
extern ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <Pwm_Stop+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <Pwm_Stop+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Channel)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3c 83       	std	Y+4, r19	; 0x04
    11ea:	2b 83       	std	Y+3, r18	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	d1 f0       	breq	.+52     	; 0x122a <Pwm_Stop+0x56>
    11f6:	2b 81       	ldd	r18, Y+3	; 0x03
    11f8:	3c 81       	ldd	r19, Y+4	; 0x04
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <Pwm_Stop+0x36>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <Pwm_Stop+0x4c>
    1208:	25 c0       	rjmp	.+74     	; 0x1254 <Pwm_Stop+0x80>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	99 f0       	breq	.+38     	; 0x123a <Pwm_Stop+0x66>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	b1 f0       	breq	.+44     	; 0x124a <Pwm_Stop+0x76>
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <Pwm_Stop+0x80>
	{
	case PWM_CH0:
		TCCR0=CLEAR;
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
		u8_status = E_ok;
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	17 c0       	rjmp	.+46     	; 0x1258 <Pwm_Stop+0x84>
		break;

	case PWM_CH1A:
		TCCR1A=CLEAR;    /*you can remove this line*/
    122a:	ef e4       	ldi	r30, 0x4F	; 79
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	10 82       	st	Z, r1
		TCCR1B=CLEAR;
    1230:	ee e4       	ldi	r30, 0x4E	; 78
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	10 82       	st	Z, r1
		u8_status = E_ok;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <Pwm_Stop+0x84>
		break;
	case PWM_CH1B:
		TCCR1A=CLEAR;   /*you can remove this line*/
    123a:	ef e4       	ldi	r30, 0x4F	; 79
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
		TCCR1B=CLEAR;
    1240:	ee e4       	ldi	r30, 0x4E	; 78
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	10 82       	st	Z, r1
		u8_status = E_ok;
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	07 c0       	rjmp	.+14     	; 0x1258 <Pwm_Stop+0x84>
		break;
	case PWM_CH2:
		TCCR2=CLEAR;
    124a:	e5 e4       	ldi	r30, 0x45	; 69
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
		u8_status = E_ok;
    1250:	19 82       	std	Y+1, r1	; 0x01
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <Pwm_Stop+0x84>
		break;

	default:
		u8_status = E_NOk;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1258:	89 81       	ldd	r24, Y+1	; 0x01
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <Timer_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initiates the module
************************************************************************************/
ERROR_STATUS Timer_Init(St_TimerCfg* Timer_cfg)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <Timer_Init+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <Timer_Init+0x8>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9b 83       	std	Y+3, r25	; 0x03
    1278:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	if(Timer_cfg == NULL_Ptr)
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	19 f4       	brne	.+6      	; 0x1288 <Timer_Init+0x20>
	{
		u8_status=E_NOk;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	66 c0       	rjmp	.+204    	; 0x1354 <Timer_Init+0xec>
	}
	else
	{
		TIMSK = Timer_cfg->Timer_Polling_Or_Interrupt;
    1288:	a9 e5       	ldi	r26, 0x59	; 89
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea 81       	ldd	r30, Y+2	; 0x02
    128e:	fb 81       	ldd	r31, Y+3	; 0x03
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	8c 93       	st	X, r24
		switch(Timer_cfg->Timer_CH_NO)
    1294:	ea 81       	ldd	r30, Y+2	; 0x02
    1296:	fb 81       	ldd	r31, Y+3	; 0x03
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3d 83       	std	Y+5, r19	; 0x05
    12a0:	2c 83       	std	Y+4, r18	; 0x04
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	11 f1       	breq	.+68     	; 0x12f0 <Timer_Init+0x88>
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	3d 81       	ldd	r19, Y+5	; 0x05
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	a9 f1       	breq	.+106    	; 0x1320 <Timer_Init+0xb8>
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <Timer_Init+0x58>
    12be:	48 c0       	rjmp	.+144    	; 0x1350 <Timer_Init+0xe8>
		{
			case Timer_0:
				TCCR0 = Timer_cfg->Timer_Mode | (ONE<<FOC0);
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	ea 81       	ldd	r30, Y+2	; 0x02
    12c6:	fb 81       	ldd	r31, Y+3	; 0x03
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
				T0_PrescallerValue=Timer_cfg->Timer_Prescaler;
    12ce:	ea 81       	ldd	r30, Y+2	; 0x02
    12d0:	fb 81       	ldd	r31, Y+3	; 0x03
    12d2:	83 81       	ldd	r24, Z+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	90 93 67 00 	sts	0x0067, r25
    12dc:	80 93 66 00 	sts	0x0066, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    12e0:	a9 e5       	ldi	r26, 0x59	; 89
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ea 81       	ldd	r30, Y+2	; 0x02
    12e6:	fb 81       	ldd	r31, Y+3	; 0x03
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	8c 93       	st	X, r24
				u8_status=E_ok;
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	32 c0       	rjmp	.+100    	; 0x1354 <Timer_Init+0xec>
				break;
			case Timer_1:
				TCCR1A =Timer_cfg->Timer_Mode | (ONE<<FOC1A) | (ONE<<FOC1B);
    12f0:	af e4       	ldi	r26, 0x4F	; 79
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ea 81       	ldd	r30, Y+2	; 0x02
    12f6:	fb 81       	ldd	r31, Y+3	; 0x03
    12f8:	81 81       	ldd	r24, Z+1	; 0x01
    12fa:	8c 60       	ori	r24, 0x0C	; 12
    12fc:	8c 93       	st	X, r24
				T1_PrescallerValue=Timer_cfg->Timer_Prescaler;
    12fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1300:	fb 81       	ldd	r31, Y+3	; 0x03
    1302:	83 81       	ldd	r24, Z+3	; 0x03
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	90 93 69 00 	sts	0x0069, r25
    130c:	80 93 68 00 	sts	0x0068, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    1310:	a9 e5       	ldi	r26, 0x59	; 89
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ea 81       	ldd	r30, Y+2	; 0x02
    1316:	fb 81       	ldd	r31, Y+3	; 0x03
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	8c 93       	st	X, r24
				u8_status=E_ok;
    131c:	19 82       	std	Y+1, r1	; 0x01
    131e:	1a c0       	rjmp	.+52     	; 0x1354 <Timer_Init+0xec>
				break;
			case Timer_2:
				TCCR2 =Timer_cfg->Timer_Mode | (ONE<<FOC0);
    1320:	a5 e4       	ldi	r26, 0x45	; 69
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ea 81       	ldd	r30, Y+2	; 0x02
    1326:	fb 81       	ldd	r31, Y+3	; 0x03
    1328:	81 81       	ldd	r24, Z+1	; 0x01
    132a:	80 68       	ori	r24, 0x80	; 128
    132c:	8c 93       	st	X, r24
				T2_PrescallerValue=Timer_cfg->Timer_Prescaler;
    132e:	ea 81       	ldd	r30, Y+2	; 0x02
    1330:	fb 81       	ldd	r31, Y+3	; 0x03
    1332:	83 81       	ldd	r24, Z+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	90 93 6b 00 	sts	0x006B, r25
    133c:	80 93 6a 00 	sts	0x006A, r24
				TIMSK=Timer_cfg->Timer_Polling_Or_Interrupt;
    1340:	a9 e5       	ldi	r26, 0x59	; 89
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ea 81       	ldd	r30, Y+2	; 0x02
    1346:	fb 81       	ldd	r31, Y+3	; 0x03
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	8c 93       	st	X, r24
				u8_status=E_ok;
    134c:	19 82       	std	Y+1, r1	; 0x01
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <Timer_Init+0xec>
				break;
			default:
				u8_status=E_NOk;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <Timer_Start>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function starts the needed timer
************************************************************************************/
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <Timer_Start+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <Timer_Start+0x8>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <Timer_Start+0xa>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	7c 83       	std	Y+4, r23	; 0x04
    1378:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3e 83       	std	Y+6, r19	; 0x06
    1382:	2d 83       	std	Y+5, r18	; 0x05
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	31 f1       	breq	.+76     	; 0x13da <Timer_Start+0x74>
    138e:	2d 81       	ldd	r18, Y+5	; 0x05
    1390:	3e 81       	ldd	r19, Y+6	; 0x06
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <Timer_Start+0x34>
    1398:	47 c0       	rjmp	.+142    	; 0x1428 <Timer_Start+0xc2>
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <Timer_Start+0x3e>
    13a2:	5d c0       	rjmp	.+186    	; 0x145e <Timer_Start+0xf8>
	{
		case Timer_0:
			if(Timer_Count<=TIMER0_MAX_COUNT)
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	92 07       	cpc	r25, r18
    13ae:	90 f4       	brcc	.+36     	; 0x13d4 <Timer_Start+0x6e>
			{
				TCNT0 = (TIMER0_MAX_COUNT-Timer_Count);
    13b0:	e2 e5       	ldi	r30, 0x52	; 82
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	81 95       	neg	r24
    13b8:	80 83       	st	Z, r24
				TCCR0 |= T0_PrescallerValue;
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	20 81       	ld	r18, Z
    13c4:	80 91 66 00 	lds	r24, 0x0066
    13c8:	90 91 67 00 	lds	r25, 0x0067
    13cc:	82 2b       	or	r24, r18
    13ce:	8c 93       	st	X, r24
				u8_status=E_ok;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	47 c0       	rjmp	.+142    	; 0x1462 <Timer_Start+0xfc>
			}
			else
			{
				u8_status=E_NOk;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	44 c0       	rjmp	.+136    	; 0x1462 <Timer_Start+0xfc>
			break;

		case Timer_1:
			if(Timer_Count<=TIMER1_MAX_COUNT)
			{
				TCNT1H = (((TIMER1_MAX_COUNT-Timer_Count) & MASK_HIGH_BYTE)>>ONE_BYTE);
    13da:	ed e4       	ldi	r30, 0x4D	; 77
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	9c 01       	movw	r18, r24
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a1 e0       	ldi	r26, 0x01	; 1
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	82 1b       	sub	r24, r18
    13f2:	93 0b       	sbc	r25, r19
    13f4:	a4 0b       	sbc	r26, r20
    13f6:	b5 0b       	sbc	r27, r21
    13f8:	80 70       	andi	r24, 0x00	; 0
    13fa:	a0 70       	andi	r26, 0x00	; 0
    13fc:	b0 70       	andi	r27, 0x00	; 0
    13fe:	89 2f       	mov	r24, r25
    1400:	9a 2f       	mov	r25, r26
    1402:	ab 2f       	mov	r26, r27
    1404:	bb 27       	eor	r27, r27
    1406:	a7 fd       	sbrc	r26, 7
    1408:	ba 95       	dec	r27
    140a:	80 83       	st	Z, r24
				TCNT1L = ((TIMER1_MAX_COUNT-Timer_Count) & MASK_LOW_BYTE);
    140c:	ec e4       	ldi	r30, 0x4C	; 76
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	81 95       	neg	r24
    1414:	80 83       	st	Z, r24
				TCCR1B = T1_PrescallerValue;
    1416:	ee e4       	ldi	r30, 0x4E	; 78
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 91 68 00 	lds	r24, 0x0068
    141e:	90 91 69 00 	lds	r25, 0x0069
    1422:	80 83       	st	Z, r24
				u8_status=E_ok;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	1d c0       	rjmp	.+58     	; 0x1462 <Timer_Start+0xfc>
				u8_status=E_NOk;
			}
			break;

		case Timer_2:
			if(Timer_Count<=TIMER0_MAX_COUNT)
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	31 e0       	ldi	r19, 0x01	; 1
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	93 07       	cpc	r25, r19
    1432:	90 f4       	brcc	.+36     	; 0x1458 <Timer_Start+0xf2>
			{
				TCNT2 = (TIMER2_MAX_COUNT-Timer_Count);
    1434:	e4 e4       	ldi	r30, 0x44	; 68
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 95       	neg	r24
    143c:	80 83       	st	Z, r24
				TCCR2 |= T2_PrescallerValue;
    143e:	a5 e4       	ldi	r26, 0x45	; 69
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e4       	ldi	r30, 0x45	; 69
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	20 81       	ld	r18, Z
    1448:	80 91 6a 00 	lds	r24, 0x006A
    144c:	90 91 6b 00 	lds	r25, 0x006B
    1450:	82 2b       	or	r24, r18
    1452:	8c 93       	st	X, r24
				u8_status=E_ok;
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <Timer_Start+0xfc>
			}
			else
			{
				u8_status=E_NOk;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <Timer_Start+0xfc>
			}

			break;

		default:
			u8_status=E_NOk;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
}
    1464:	26 96       	adiw	r28, 0x06	; 6
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <Timer_Stop>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function stops the needed timer
************************************************************************************/
ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <Timer_Stop+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <Timer_Stop+0x8>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3c 83       	std	Y+4, r19	; 0x04
    148c:	2b 83       	std	Y+3, r18	; 0x03
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	71 f0       	breq	.+28     	; 0x14b4 <Timer_Stop+0x3e>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	79 f0       	breq	.+30     	; 0x14c0 <Timer_Stop+0x4a>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	81 f4       	brne	.+32     	; 0x14ca <Timer_Stop+0x54>
	{
		case Timer_0:
			TCCR0 = T0_NO_CLOCK;
    14aa:	e3 e5       	ldi	r30, 0x53	; 83
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	10 82       	st	Z, r1
			u8_status=E_ok;
    14b0:	19 82       	std	Y+1, r1	; 0x01
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <Timer_Stop+0x58>
			break;
		case Timer_1:
			TCCR1 = T1_NO_CLOCK;
    14b4:	ee e4       	ldi	r30, 0x4E	; 78
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	11 82       	std	Z+1, r1	; 0x01
    14ba:	10 82       	st	Z, r1
			u8_status=E_ok;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <Timer_Stop+0x58>
			break;
		case Timer_2:
			TCCR2 = T2_NO_CLOCK;
    14c0:	e5 e4       	ldi	r30, 0x45	; 69
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	10 82       	st	Z, r1
			u8_status=E_ok;
    14c6:	19 82       	std	Y+1, r1	; 0x01
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <Timer_Stop+0x58>
			break;
		default:
			u8_status=E_NOk;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <Timer_GetStatus>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return if the flag of the timer is raised or not
************************************************************************************/
ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, bool_t* Data)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <Timer_GetStatus+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <Timer_GetStatus+0x8>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <Timer_GetStatus+0xa>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	7c 83       	std	Y+4, r23	; 0x04
    14f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3e 83       	std	Y+6, r19	; 0x06
    14fa:	2d 83       	std	Y+5, r18	; 0x05
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	e1 f0       	breq	.+56     	; 0x153e <Timer_GetStatus+0x60>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	51 f1       	breq	.+84     	; 0x1564 <Timer_GetStatus+0x86>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	c9 f5       	brne	.+114    	; 0x158a <Timer_GetStatus+0xac>
	{
		case Timer_0:
			if(TIFR & (ONE<<TOV0))
    1518:	e8 e5       	ldi	r30, 0x58	; 88
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	90 70       	andi	r25, 0x00	; 0
    1526:	88 23       	and	r24, r24
    1528:	29 f0       	breq	.+10     	; 0x1534 <Timer_GetStatus+0x56>
			{
				*Data=FLAG_RAISED;
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 83       	st	Z, r24
    1532:	03 c0       	rjmp	.+6      	; 0x153a <Timer_GetStatus+0x5c>
			}
			else
			{
				*Data=FLAG_DOWN;
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	28 c0       	rjmp	.+80     	; 0x158e <Timer_GetStatus+0xb0>
			break;

		case Timer_1:
			if(TIFR & (ONE<<TOV1))
    153e:	e8 e5       	ldi	r30, 0x58	; 88
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	84 70       	andi	r24, 0x04	; 4
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	29 f0       	breq	.+10     	; 0x155a <Timer_GetStatus+0x7c>
			{
				*Data=FLAG_RAISED;
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 83       	st	Z, r24
    1558:	03 c0       	rjmp	.+6      	; 0x1560 <Timer_GetStatus+0x82>
			}
			else
			{
				*Data=FLAG_DOWN;
    155a:	eb 81       	ldd	r30, Y+3	; 0x03
    155c:	fc 81       	ldd	r31, Y+4	; 0x04
    155e:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	15 c0       	rjmp	.+42     	; 0x158e <Timer_GetStatus+0xb0>
			break;

		case Timer_2:
			if(TIFR & (ONE<<TOV2))
    1564:	e8 e5       	ldi	r30, 0x58	; 88
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	80 74       	andi	r24, 0x40	; 64
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	29 f0       	breq	.+10     	; 0x1580 <Timer_GetStatus+0xa2>
			{
				*Data=FLAG_RAISED;
    1576:	eb 81       	ldd	r30, Y+3	; 0x03
    1578:	fc 81       	ldd	r31, Y+4	; 0x04
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 83       	st	Z, r24
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <Timer_GetStatus+0xa8>
			}
			else
			{
				*Data=FLAG_DOWN;
    1580:	eb 81       	ldd	r30, Y+3	; 0x03
    1582:	fc 81       	ldd	r31, Y+4	; 0x04
    1584:	10 82       	st	Z, r1
			}
			u8_status=E_ok;
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Timer_GetStatus+0xb0>
			break;

		default:
			u8_status=E_NOk;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	26 96       	adiw	r28, 0x06	; 6
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Timer_GetValue>:
* Parameters (out): Data- A variable of type bool returns if the flag of the timer is raised or not
* Return value: u8_error- variable that describe the error status
* Description: This function is used to return the value of the timer
************************************************************************************/
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,uint16_t* Data)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <Timer_GetValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <Timer_GetValue+0x8>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <Timer_GetValue+0xa>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	7c 83       	std	Y+4, r23	; 0x04
    15b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_status;
	switch(Timer_CH_NO)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3e 83       	std	Y+6, r19	; 0x06
    15be:	2d 83       	std	Y+5, r18	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	a1 f0       	breq	.+40     	; 0x15f2 <Timer_GetValue+0x50>
    15ca:	2d 81       	ldd	r18, Y+5	; 0x05
    15cc:	3e 81       	ldd	r19, Y+6	; 0x06
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	c9 f0       	breq	.+50     	; 0x1606 <Timer_GetValue+0x64>
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	01 f5       	brne	.+64     	; 0x161c <Timer_GetValue+0x7a>
	{
		case Timer_0:
			*Data = TCNT0;
    15dc:	e2 e5       	ldi	r30, 0x52	; 82
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	eb 81       	ldd	r30, Y+3	; 0x03
    15e8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
			u8_status=E_ok;
    15ee:	19 82       	std	Y+1, r1	; 0x01
    15f0:	17 c0       	rjmp	.+46     	; 0x1620 <Timer_GetValue+0x7e>
			break;
		case Timer_1:
			*Data = TCNT1;
    15f2:	ec e4       	ldi	r30, 0x4C	; 76
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	eb 81       	ldd	r30, Y+3	; 0x03
    15fc:	fc 81       	ldd	r31, Y+4	; 0x04
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
			u8_status=E_ok;
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <Timer_GetValue+0x7e>
			break;
		case Timer_2:
			*Data = TCNT2;
    1606:	e4 e4       	ldi	r30, 0x44	; 68
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	eb 81       	ldd	r30, Y+3	; 0x03
    1612:	fc 81       	ldd	r31, Y+4	; 0x04
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
			u8_status=E_ok;
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <Timer_GetValue+0x7e>
			break;
		default:
			u8_status=E_NOk;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	26 96       	adiw	r28, 0x06	; 6
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <Timer_Clear>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function is used to reset the TCNTX register value
************************************************************************************/
ERROR_STATUS Timer_Clear(uint8_t Timer_CH_NO)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <Timer_Clear+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <Timer_Clear+0x8>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3c 83       	std	Y+4, r19	; 0x04
    164a:	2b 83       	std	Y+3, r18	; 0x03
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	71 f0       	breq	.+28     	; 0x1672 <Timer_Clear+0x3e>
    1656:	2b 81       	ldd	r18, Y+3	; 0x03
    1658:	3c 81       	ldd	r19, Y+4	; 0x04
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	79 f0       	breq	.+30     	; 0x167e <Timer_Clear+0x4a>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	81 f4       	brne	.+32     	; 0x1688 <Timer_Clear+0x54>
	{
		case Timer_0:
			TCNT0= CLEAR;
    1668:	e2 e5       	ldi	r30, 0x52	; 82
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	10 82       	st	Z, r1
			u8_status=E_ok;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	0d c0       	rjmp	.+26     	; 0x168c <Timer_Clear+0x58>
			break;
		case Timer_1:
			TCNT1 = CLEAR;
    1672:	ec e4       	ldi	r30, 0x4C	; 76
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	11 82       	std	Z+1, r1	; 0x01
    1678:	10 82       	st	Z, r1
			u8_status=E_ok;
    167a:	19 82       	std	Y+1, r1	; 0x01
    167c:	07 c0       	rjmp	.+14     	; 0x168c <Timer_Clear+0x58>
			break;
		case Timer_2:
			TCNT2 = CLEAR;
    167e:	e4 e4       	ldi	r30, 0x44	; 68
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	10 82       	st	Z, r1
			u8_status=E_ok;
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	02 c0       	rjmp	.+4      	; 0x168c <Timer_Clear+0x58>
			break;
		default:
			u8_status=E_NOk;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <Timer_DeInit>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function is used to de-initialize TIMERX
************************************************************************************/
ERROR_STATUS Timer_DeInit(uint8_t Timer_CH_NO)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Timer_DeInit+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <Timer_DeInit+0x8>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	switch(Timer_CH_NO)
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3c 83       	std	Y+4, r19	; 0x04
    16b2:	2b 83       	std	Y+3, r18	; 0x03
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	c1 f0       	breq	.+48     	; 0x16ee <Timer_DeInit+0x52>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	21 f1       	breq	.+72     	; 0x1710 <Timer_DeInit+0x74>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	79 f5       	brne	.+94     	; 0x172e <Timer_DeInit+0x92>
	{
		case Timer_0:
			TCNT0 = CLEAR;
    16d0:	e2 e5       	ldi	r30, 0x52	; 82
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    16d6:	a9 e5       	ldi	r26, 0x59	; 89
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e9 e5       	ldi	r30, 0x59	; 89
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8c 7f       	andi	r24, 0xFC	; 252
    16e2:	8c 93       	st	X, r24
			TCCR0 = CLEAR;
    16e4:	e3 e5       	ldi	r30, 0x53	; 83
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	10 82       	st	Z, r1
			u8_status=E_ok;
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	22 c0       	rjmp	.+68     	; 0x1732 <Timer_DeInit+0x96>
			break;
		case Timer_1:
			TCNT1 = CLEAR;
    16ee:	ec e4       	ldi	r30, 0x4C	; 76
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	11 82       	std	Z+1, r1	; 0x01
    16f4:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1B) & ~(1<<OCIE1A) & ~(1<<TICIE1);
    16f6:	a9 e5       	ldi	r26, 0x59	; 89
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e9 e5       	ldi	r30, 0x59	; 89
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	83 7c       	andi	r24, 0xC3	; 195
    1702:	8c 93       	st	X, r24
			TCCR1 = CLEAR;
    1704:	ee e4       	ldi	r30, 0x4E	; 78
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	11 82       	std	Z+1, r1	; 0x01
    170a:	10 82       	st	Z, r1
			u8_status=E_ok;
    170c:	19 82       	std	Y+1, r1	; 0x01
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <Timer_DeInit+0x96>
			break;
		case Timer_2:
			TCNT2 = CLEAR;
    1710:	e4 e4       	ldi	r30, 0x44	; 68
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
			TIMSK &= ~(1<<TOIE2) & ~(1<<OCIE2);
    1716:	a9 e5       	ldi	r26, 0x59	; 89
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e9 e5       	ldi	r30, 0x59	; 89
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	8f 73       	andi	r24, 0x3F	; 63
    1722:	8c 93       	st	X, r24
			TCCR2 = CLEAR;
    1724:	e5 e4       	ldi	r30, 0x45	; 69
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	10 82       	st	Z, r1
			u8_status=E_ok;
    172a:	19 82       	std	Y+1, r1	; 0x01
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <Timer_DeInit+0x96>
			break;
		default:
			u8_status=E_NOk;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return u8_status;
    1732:	89 81       	ldd	r24, Y+1	; 0x01
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <INT0_Init>:
volatile uint8_t g8_interrupt_zero_flag=CLEAR;
volatile uint8_t g8_echo_flag=CLEAR;

/************************INT0*****************************************/
ERROR_STATUS INT0_Init(EN_Edge_t en_edge_selection)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	27 97       	sbiw	r28, 0x07	; 7
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;

	cli();                              /*Disable interrupts by clearing I-bit*/
    1758:	f8 94       	cli
	GICR  |= (ONE<<INT0);                 /* Enable external interrupt pin INT0*/
    175a:	ab e5       	ldi	r26, 0x5B	; 91
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	eb e5       	ldi	r30, 0x5B	; 91
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOD,
			DIO_stru_init.pins=BIT2,
			DIO_stru_init.dir=INPUT,
	};
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	2a 81       	ldd	r18, Y+2	; 0x02
    176e:	84 e0       	ldi	r24, 0x04	; 4
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	1c 82       	std	Y+4, r1	; 0x04
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	2a 83       	std	Y+2, r18	; 0x02
    177a:	9b 83       	std	Y+3, r25	; 0x03
    177c:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    177e:	ce 01       	movw	r24, r28
    1780:	02 96       	adiw	r24, 0x02	; 2
    1782:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    1786:	98 2f       	mov	r25, r24
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	89 2b       	or	r24, r25
    178c:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3f 83       	std	Y+7, r19	; 0x07
    1796:	2e 83       	std	Y+6, r18	; 0x06
    1798:	8e 81       	ldd	r24, Y+6	; 0x06
    179a:	9f 81       	ldd	r25, Y+7	; 0x07
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	e9 f0       	breq	.+58     	; 0x17dc <INT0_Init+0x9a>
    17a2:	2e 81       	ldd	r18, Y+6	; 0x06
    17a4:	3f 81       	ldd	r19, Y+7	; 0x07
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <INT0_Init+0x74>
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	9f 81       	ldd	r25, Y+7	; 0x07
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	61 f0       	breq	.+24     	; 0x17cc <INT0_Init+0x8a>
    17b4:	2b c0       	rjmp	.+86     	; 0x180c <INT0_Init+0xca>
    17b6:	2e 81       	ldd	r18, Y+6	; 0x06
    17b8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	b1 f0       	breq	.+44     	; 0x17ec <INT0_Init+0xaa>
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	9f 81       	ldd	r25, Y+7	; 0x07
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	c9 f0       	breq	.+50     	; 0x17fc <INT0_Init+0xba>
    17ca:	20 c0       	rjmp	.+64     	; 0x180c <INT0_Init+0xca>
	{
	case LOW_LEVEL:
		MCUCR &= ~(ONE<<ISC00) & ~(ONE<<ISC01);		/* Trigger INT0 with the low level*/
    17cc:	a5 e5       	ldi	r26, 0x55	; 85
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e5 e5       	ldi	r30, 0x55	; 85
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8c 7f       	andi	r24, 0xFC	; 252
    17d8:	8c 93       	st	X, r24
    17da:	1b c0       	rjmp	.+54     	; 0x1812 <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case ANY_CHANGE:
		MCUCR |= (ONE<<ISC10);  					 /* Trigger INT0 with the any change*/
    17dc:	a5 e5       	ldi	r26, 0x55	; 85
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e5       	ldi	r30, 0x55	; 85
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	84 60       	ori	r24, 0x04	; 4
    17e8:	8c 93       	st	X, r24
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case FALLING_EDGE:
		MCUCR |= (ONE<<ISC00);  					 /* Trigger INT0 with the falling edge*/
    17ec:	a5 e5       	ldi	r26, 0x55	; 85
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e5 e5       	ldi	r30, 0x55	; 85
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	81 60       	ori	r24, 0x01	; 1
    17f8:	8c 93       	st	X, r24
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCR |= (ONE<<ISC00) | (ONE<<ISC01);  		 /* Trigger INT0 with the raising edge*/
    17fc:	a5 e5       	ldi	r26, 0x55	; 85
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e5       	ldi	r30, 0x55	; 85
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	83 60       	ori	r24, 0x03	; 3
    1808:	8c 93       	st	X, r24
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <INT0_Init+0xd0>
		u8_status |= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                             			 /*Enable interrupts by setting I-bit*/
    1812:	78 94       	sei

	if(u8_status == E_ok)
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 23       	and	r24, r24
    1818:	11 f4       	brne	.+4      	; 0x181e <INT0_Init+0xdc>
	{
		u8_status=E_ok;
    181a:	19 82       	std	Y+1, r1	; 0x01
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <INT0_Init+0xe0>
	}
	else
	{
		u8_status = E_NOk;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	27 96       	adiw	r28, 0x07	; 7
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <INT0_DeInit>:


ERROR_STATUS INT0_DeInit(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                             			 /*Disable interrupts by clearing I-bit*/
    1840:	f8 94       	cli
	GICR  &= ~(ONE<<INT0);                		 /* Disable external interrupt pin INT0*/
    1842:	ab e5       	ldi	r26, 0x5B	; 91
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e5       	ldi	r30, 0x5B	; 91
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 7b       	andi	r24, 0xBF	; 191
    184e:	8c 93       	st	X, r24
	MCUCR &= ~(ONE<<ISC00) & ~(ONE<<ISC01);
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8c 7f       	andi	r24, 0xFC	; 252
    185c:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <INT1_Init>:

/****************************INT1*******************************************/
ERROR_STATUS INT1_Init(EN_Edge_t en_edge_selection)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	27 97       	sbiw	r28, 0x07	; 7
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;
cli();                            		 	 /*Disable interrupts by clearing I-bit*/
    187e:	f8 94       	cli
	GICR  |= (ONE<<INT1);                 	/* Enable external interrupt pin INT1*/
    1880:	ab e5       	ldi	r26, 0x5B	; 91
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e5       	ldi	r30, 0x5B	; 91
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 68       	ori	r24, 0x80	; 128
    188c:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOD,
			DIO_stru_init.pins=BIT3,
			DIO_stru_init.dir=INPUT,
	};
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	1c 82       	std	Y+4, r1	; 0x04
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	2a 83       	std	Y+2, r18	; 0x02
    18a0:	9b 83       	std	Y+3, r25	; 0x03
    18a2:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    18a4:	ce 01       	movw	r24, r28
    18a6:	02 96       	adiw	r24, 0x02	; 2
    18a8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    18ac:	98 2f       	mov	r25, r24
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	89 2b       	or	r24, r25
    18b2:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3f 83       	std	Y+7, r19	; 0x07
    18bc:	2e 83       	std	Y+6, r18	; 0x06
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	e9 f0       	breq	.+58     	; 0x1902 <INT1_Init+0x9a>
    18c8:	2e 81       	ldd	r18, Y+6	; 0x06
    18ca:	3f 81       	ldd	r19, Y+7	; 0x07
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <INT1_Init+0x74>
    18d2:	8e 81       	ldd	r24, Y+6	; 0x06
    18d4:	9f 81       	ldd	r25, Y+7	; 0x07
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <INT1_Init+0x8a>
    18da:	2b c0       	rjmp	.+86     	; 0x1932 <INT1_Init+0xca>
    18dc:	2e 81       	ldd	r18, Y+6	; 0x06
    18de:	3f 81       	ldd	r19, Y+7	; 0x07
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	b1 f0       	breq	.+44     	; 0x1912 <INT1_Init+0xaa>
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	c9 f0       	breq	.+50     	; 0x1922 <INT1_Init+0xba>
    18f0:	20 c0       	rjmp	.+64     	; 0x1932 <INT1_Init+0xca>
	{
	case LOW_LEVEL:
		MCUCR &= ~(ONE<<ISC10) & ~(ONE<<ISC11);	 /* Trigger INT0 with the low level*/
    18f2:	a5 e5       	ldi	r26, 0x55	; 85
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e5       	ldi	r30, 0x55	; 85
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	83 7f       	andi	r24, 0xF3	; 243
    18fe:	8c 93       	st	X, r24
    1900:	1b c0       	rjmp	.+54     	; 0x1938 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case ANY_CHANGE:
		MCUCR |= (ONE<<ISC10);                /* Trigger INT0 with the any change*/
    1902:	a5 e5       	ldi	r26, 0x55	; 85
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e5       	ldi	r30, 0x55	; 85
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	84 60       	ori	r24, 0x04	; 4
    190e:	8c 93       	st	X, r24
    1910:	13 c0       	rjmp	.+38     	; 0x1938 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case FALLING_EDGE:
		MCUCR |= (ONE<<ISC11);                /* Trigger INT0 with the falling edge*/
    1912:	a5 e5       	ldi	r26, 0x55	; 85
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e5       	ldi	r30, 0x55	; 85
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 60       	ori	r24, 0x08	; 8
    191e:	8c 93       	st	X, r24
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCR |= (ONE<<ISC10) | (ONE<<ISC11);   /* Trigger INT0 with the raising edge*/
    1922:	a5 e5       	ldi	r26, 0x55	; 85
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e5 e5       	ldi	r30, 0x55	; 85
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	8c 60       	ori	r24, 0x0C	; 12
    192e:	8c 93       	st	X, r24
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <INT1_Init+0xd0>
		u8_status |= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	81 60       	ori	r24, 0x01	; 1
    1936:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1938:	78 94       	sei

	if(u8_status == E_ok)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	88 23       	and	r24, r24
    193e:	11 f4       	brne	.+4      	; 0x1944 <INT1_Init+0xdc>
	{
		u8_status = E_ok;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <INT1_Init+0xe0>
	}
	else
	{
		u8_status = E_NOk;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	27 96       	adiw	r28, 0x07	; 7
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <INT1_DeInit>:

ERROR_STATUS INT1_DeInit(void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                              /*Disable interrupts by clearing I-bit*/
    1966:	f8 94       	cli
	GICR  &= ~(ONE<<INT1);                 /* Disable external interrupt pin INT0*/
    1968:	ab e5       	ldi	r26, 0x5B	; 91
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	eb e5       	ldi	r30, 0x5B	; 91
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 77       	andi	r24, 0x7F	; 127
    1974:	8c 93       	st	X, r24
	MCUCR &= ~(ONE<<ISC10) & ~(ONE<<ISC11);
    1976:	a5 e5       	ldi	r26, 0x55	; 85
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e5       	ldi	r30, 0x55	; 85
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	83 7f       	andi	r24, 0xF3	; 243
    1982:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
}
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <INT2_Init>:

/****************************INT2*******************************************/
ERROR_STATUS INT2_Init(EN_Edge_t en_edge_selection)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	27 97       	sbiw	r28, 0x07	; 7
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_status;
	cli();                              /*Disable interrupts by clearing I-bit*/
    19a4:	f8 94       	cli
	GICR  |= (ONE<<INT2);                 /* Enable external interrupt pin INT1*/
    19a6:	ab e5       	ldi	r26, 0x5B	; 91
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e5       	ldi	r30, 0x5B	; 91
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 62       	ori	r24, 0x20	; 32
    19b2:	8c 93       	st	X, r24
	DIO_Cfg_s DIO_stru_init=
	{
			DIO_stru_init.GPIO=GPIOB,
			DIO_stru_init.pins=BIT2,
			DIO_stru_init.dir=INPUT,
	};
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	8b 83       	std	Y+3, r24	; 0x03
    19be:	9b 81       	ldd	r25, Y+3	; 0x03
    19c0:	1c 82       	std	Y+4, r1	; 0x04
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	2a 83       	std	Y+2, r18	; 0x02
    19c6:	9b 83       	std	Y+3, r25	; 0x03
    19c8:	8c 83       	std	Y+4, r24	; 0x04
	u8_status |= DIO_init (&DIO_stru_init);
    19ca:	ce 01       	movw	r24, r28
    19cc:	02 96       	adiw	r24, 0x02	; 2
    19ce:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
    19d2:	98 2f       	mov	r25, r24
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	89 2b       	or	r24, r25
    19d8:	89 83       	std	Y+1, r24	; 0x01
	switch(en_edge_selection)
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3f 83       	std	Y+7, r19	; 0x07
    19e2:	2e 83       	std	Y+6, r18	; 0x06
    19e4:	8e 81       	ldd	r24, Y+6	; 0x06
    19e6:	9f 81       	ldd	r25, Y+7	; 0x07
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	91 05       	cpc	r25, r1
    19ec:	c9 f0       	breq	.+50     	; 0x1a20 <INT2_Init+0x92>
    19ee:	2e 81       	ldd	r18, Y+6	; 0x06
    19f0:	3f 81       	ldd	r19, Y+7	; 0x07
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <INT2_Init+0x74>
    19f8:	8e 81       	ldd	r24, Y+6	; 0x06
    19fa:	9f 81       	ldd	r25, Y+7	; 0x07
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 f0       	breq	.+24     	; 0x1a18 <INT2_Init+0x8a>
    1a00:	23 c0       	rjmp	.+70     	; 0x1a48 <INT2_Init+0xba>
    1a02:	2e 81       	ldd	r18, Y+6	; 0x06
    1a04:	3f 81       	ldd	r19, Y+7	; 0x07
    1a06:	22 30       	cpi	r18, 0x02	; 2
    1a08:	31 05       	cpc	r19, r1
    1a0a:	71 f0       	breq	.+28     	; 0x1a28 <INT2_Init+0x9a>
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	89 f0       	breq	.+34     	; 0x1a38 <INT2_Init+0xaa>
    1a16:	18 c0       	rjmp	.+48     	; 0x1a48 <INT2_Init+0xba>
	{
	case LOW_LEVEL:
										/*this case is not exist*/
		u8_status |= E_NOk;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	81 60       	ori	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	17 c0       	rjmp	.+46     	; 0x1a4e <INT2_Init+0xc0>
		break;

	case ANY_CHANGE:
										/*this case is not exist*/
		u8_status |= E_NOk;
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	13 c0       	rjmp	.+38     	; 0x1a4e <INT2_Init+0xc0>
		break;

	case FALLING_EDGE:
		MCUCSR &= ~(ONE<<ISC2);            /*nothing to do*/
    1a28:	a4 e5       	ldi	r26, 0x54	; 84
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e4 e5       	ldi	r30, 0x54	; 84
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 7b       	andi	r24, 0xBF	; 191
    1a34:	8c 93       	st	X, r24
    1a36:	0b c0       	rjmp	.+22     	; 0x1a4e <INT2_Init+0xc0>
		u8_status |= E_ok;
		break;

	case RISIGING_EDGE:
		MCUCSR |= (ONE<<ISC2);            /* Trigger INT0 with the raising edge*/
    1a38:	a4 e5       	ldi	r26, 0x54	; 84
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e5       	ldi	r30, 0x54	; 84
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 64       	ori	r24, 0x40	; 64
    1a44:	8c 93       	st	X, r24
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <INT2_Init+0xc0>
		u8_status|= E_ok;
		break;

	default:
		u8_status |= E_NOk;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	81 60       	ori	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	sei();                              /*Enable interrupts by setting I-bit*/
    1a4e:	78 94       	sei

	if(u8_status == E_ok)
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	88 23       	and	r24, r24
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <INT2_Init+0xcc>
	{
		u8_status=E_ok;
    1a56:	19 82       	std	Y+1, r1	; 0x01
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <INT2_Init+0xd0>
	}
	else
	{
		u8_status = E_NOk;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a60:	27 96       	adiw	r28, 0x07	; 7
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <INT2_DeInit>:

ERROR_STATUS INT2_DeInit(void)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	cli();                               /*Disable interrupts by clearing I-bit*/
    1a7c:	f8 94       	cli
	GICR  &= ~(ONE<<INT2);                 /* Disable external interrupt pin INT0*/
    1a7e:	ab e5       	ldi	r26, 0x5B	; 91
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	eb e5       	ldi	r30, 0x5B	; 91
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8f 7d       	andi	r24, 0xDF	; 223
    1a8a:	8c 93       	st	X, r24
	MCUCSR &= ~(ONE<<ISC2);
    1a8c:	a4 e5       	ldi	r26, 0x54	; 84
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e4 e5       	ldi	r30, 0x54	; 84
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 7b       	andi	r24, 0xBF	; 191
    1a98:	8c 93       	st	X, r24
	u8_status |= E_ok;
	return u8_status;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <INT2_SetEdge>:

ERROR_STATUS INT2_SetEdge(EN_Edge_t en_edge_selection)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <INT2_SetEdge+0x6>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <INT2_SetEdge+0x8>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_status;
	/*I have to check first if it is enabled or not*/
	switch(en_edge_selection)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3c 83       	std	Y+4, r19	; 0x04
    1aba:	2b 83       	std	Y+3, r18	; 0x03
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	41 f1       	breq	.+80     	; 0x1b16 <INT2_SetEdge+0x72>
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f4       	brge	.+10     	; 0x1ada <INT2_SetEdge+0x36>
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	f9 f0       	breq	.+62     	; 0x1b16 <INT2_SetEdge+0x72>
    1ad8:	1b c0       	rjmp	.+54     	; 0x1b10 <INT2_SetEdge+0x6c>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	31 f0       	breq	.+12     	; 0x1af0 <INT2_SetEdge+0x4c>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	49 f0       	breq	.+18     	; 0x1b00 <INT2_SetEdge+0x5c>
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <INT2_SetEdge+0x6c>
	case ANY_CHANGE:
		                                /*this case is not exist*/
		break;

	case FALLING_EDGE:
		MCUCSR &= ~(ONE<<ISC2);
    1af0:	a4 e5       	ldi	r26, 0x54	; 84
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e4 e5       	ldi	r30, 0x54	; 84
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 7b       	andi	r24, 0xBF	; 191
    1afc:	8c 93       	st	X, r24
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <INT2_SetEdge+0x72>
		break;

	case RISIGING_EDGE:
		MCUCSR |= (ONE<<ISC2);            /* Trigger INT0 with the raising edge*/
    1b00:	a4 e5       	ldi	r26, 0x54	; 84
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e4 e5       	ldi	r30, 0x54	; 84
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 64       	ori	r24, 0x40	; 64
    1b0c:	8c 93       	st	X, r24
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <INT2_SetEdge+0x72>
		break;

	default:
		u8_status |= E_NOk;
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	81 60       	ori	r24, 0x01	; 1
    1b14:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if(u8_status == E_ok)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	88 23       	and	r24, r24
    1b1a:	11 f4       	brne	.+4      	; 0x1b20 <INT2_SetEdge+0x7c>
	{
		u8_status=E_ok;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <INT2_SetEdge+0x80>
	}
	else
	{
		u8_status = E_NOk;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <__vector_3>:


/********************************ISRS***************************************/

ISR(INT2_vect)
{
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_Ptr)
    1b5e:	80 91 6e 00 	lds	r24, 0x006E
    1b62:	90 91 6f 00 	lds	r25, 0x006F
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	29 f0       	breq	.+10     	; 0x1b74 <__vector_3+0x40>
	{
		// Call the Call Back function in the application after the edge is detected
		(*g_callBackPtr)(); // another method to call the function using pointer to function g_callBackPtr();
    1b6a:	e0 91 6e 00 	lds	r30, 0x006E
    1b6e:	f0 91 6f 00 	lds	r31, 0x006F
    1b72:	09 95       	icall
	}

}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti

00001b9a <Icu_Init>:
* Return value: u8_error- variable that describe the error status
* Description: Initializes the ICU by initializing the timer
* and enabling the global interrupt
************************************************************************************/
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	63 97       	sbiw	r28, 0x13	; 19
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9f 87       	std	Y+15, r25	; 0x0f
    1bb0:	8e 87       	std	Y+14, r24	; 0x0e
	ERROR_STATUS u8_status;
	if(Icu_Cfg == NULL_Ptr)
    1bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	21 f4       	brne	.+8      	; 0x1bc2 <Icu_Init+0x28>
	{
		u8_status |= E_NOk;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	8e c0       	rjmp	.+284    	; 0x1cde <Icu_Init+0x144>
			{
				timer0_stru_init.Timer_CH_NO=Timer_0,
				timer0_stru_init.Timer_Mode=TIMER_MODE,
				timer0_stru_init.Timer_Polling_Or_Interrupt=T0_POLLING,
				timer0_stru_init.Timer_Prescaler=T0_PRESCALER_64,
			};
    1bc2:	1a 82       	std	Y+2, r1	; 0x02
    1bc4:	4a 81       	ldd	r20, Y+2	; 0x02
    1bc6:	1b 82       	std	Y+3, r1	; 0x03
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	1c 82       	std	Y+4, r1	; 0x04
    1bcc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd4:	86 e0       	ldi	r24, 0x06	; 6
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	32 96       	adiw	r30, 0x02	; 2
    1bda:	df 01       	movw	r26, r30
    1bdc:	58 2f       	mov	r21, r24
    1bde:	1d 92       	st	X+, r1
    1be0:	5a 95       	dec	r21
    1be2:	e9 f7       	brne	.-6      	; 0x1bde <Icu_Init+0x44>
    1be4:	4a 83       	std	Y+2, r20	; 0x02
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	3d 83       	std	Y+5, r19	; 0x05
			{
				timer2_stru_init.Timer_CH_NO=Timer_2,
				timer2_stru_init.Timer_Mode=TIMER_MODE,
				timer2_stru_init.Timer_Polling_Or_Interrupt=T2_POLLING,
				timer2_stru_init.Timer_Prescaler=T2_PRESCALER_1024,
			};
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	88 87       	std	Y+8, r24	; 0x08
    1bf0:	48 85       	ldd	r20, Y+8	; 0x08
    1bf2:	19 86       	std	Y+9, r1	; 0x09
    1bf4:	99 85       	ldd	r25, Y+9	; 0x09
    1bf6:	1a 86       	std	Y+10, r1	; 0x0a
    1bf8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	8b 87       	std	Y+11, r24	; 0x0b
    1bfe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c00:	86 e0       	ldi	r24, 0x06	; 6
    1c02:	fe 01       	movw	r30, r28
    1c04:	38 96       	adiw	r30, 0x08	; 8
    1c06:	df 01       	movw	r26, r30
    1c08:	58 2f       	mov	r21, r24
    1c0a:	1d 92       	st	X+, r1
    1c0c:	5a 95       	dec	r21
    1c0e:	e9 f7       	brne	.-6      	; 0x1c0a <Icu_Init+0x70>
    1c10:	48 87       	std	Y+8, r20	; 0x08
    1c12:	99 87       	std	Y+9, r25	; 0x09
    1c14:	2a 87       	std	Y+10, r18	; 0x0a
    1c16:	3b 87       	std	Y+11, r19	; 0x0b

		switch(Icu_Cfg->ICU_Ch_No)
    1c18:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c1c:	80 81       	ld	r24, Z
    1c1e:	a8 2f       	mov	r26, r24
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	bb 8b       	std	Y+19, r27	; 0x13
    1c24:	aa 8b       	std	Y+18, r26	; 0x12
    1c26:	2a 89       	ldd	r18, Y+18	; 0x12
    1c28:	3b 89       	ldd	r19, Y+19	; 0x13
    1c2a:	21 30       	cpi	r18, 0x01	; 1
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <Icu_Init+0xb6>
    1c30:	8a 89       	ldd	r24, Y+18	; 0x12
    1c32:	9b 89       	ldd	r25, Y+19	; 0x13
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	91 05       	cpc	r25, r1
    1c38:	91 f0       	breq	.+36     	; 0x1c5e <Icu_Init+0xc4>
    1c3a:	aa 89       	ldd	r26, Y+18	; 0x12
    1c3c:	bb 89       	ldd	r27, Y+19	; 0x13
    1c3e:	10 97       	sbiw	r26, 0x00	; 0
    1c40:	a9 f4       	brne	.+42     	; 0x1c6c <Icu_Init+0xd2>
		{
		case ICU_CH0:
			u8_status |= INT0_Init(RISIGING_EDGE);
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	0e 94 a1 0b 	call	0x1742	; 0x1742 <INT0_Init>
    1c48:	99 81       	ldd	r25, Y+1	; 0x01
    1c4a:	89 2b       	or	r24, r25
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	11 c0       	rjmp	.+34     	; 0x1c72 <Icu_Init+0xd8>
			break;

		case ICU_CH1:
			u8_status |= INT1_Init(RISIGING_EDGE);
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	0e 94 34 0c 	call	0x1868	; 0x1868 <INT1_Init>
    1c56:	99 81       	ldd	r25, Y+1	; 0x01
    1c58:	89 2b       	or	r24, r25
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <Icu_Init+0xd8>
			break;

		case ICU_CH2:
			u8_status |= INT2_Init(RISIGING_EDGE);
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	0e 94 c7 0c 	call	0x198e	; 0x198e <INT2_Init>
    1c64:	99 81       	ldd	r25, Y+1	; 0x01
    1c66:	89 2b       	or	r24, r25
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <Icu_Init+0xd8>
			break;

		default:
			u8_status|= E_NOk;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	81 60       	ori	r24, 0x01	; 1
    1c70:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		switch(Icu_Cfg->ICU_Ch_Timer)
    1c72:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c74:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	39 8b       	std	Y+17, r19	; 0x11
    1c7e:	28 8b       	std	Y+16, r18	; 0x10
    1c80:	88 89       	ldd	r24, Y+16	; 0x10
    1c82:	99 89       	ldd	r25, Y+17	; 0x11
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	99 f0       	breq	.+38     	; 0x1cb0 <Icu_Init+0x116>
    1c8a:	a8 89       	ldd	r26, Y+16	; 0x10
    1c8c:	b9 89       	ldd	r27, Y+17	; 0x11
    1c8e:	a2 30       	cpi	r26, 0x02	; 2
    1c90:	b1 05       	cpc	r27, r1
    1c92:	91 f0       	breq	.+36     	; 0x1cb8 <Icu_Init+0x11e>
    1c94:	28 89       	ldd	r18, Y+16	; 0x10
    1c96:	39 89       	ldd	r19, Y+17	; 0x11
    1c98:	21 15       	cp	r18, r1
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	b1 f4       	brne	.+44     	; 0x1cca <Icu_Init+0x130>
		{
		case Timer_0:
			u8_status |= Timer_Init(&timer0_stru_init);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	02 96       	adiw	r24, 0x02	; 2
    1ca2:	0e 94 34 09 	call	0x1268	; 0x1268 <Timer_Init>
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	89 2b       	or	r24, r25
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	10 c0       	rjmp	.+32     	; 0x1cd0 <Icu_Init+0x136>
			break;

		case Timer_1:
			/*cauldn't use timer1 since it used to perform another functionality*/
			u8_status |= E_NOk;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	81 60       	ori	r24, 0x01	; 1
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0c c0       	rjmp	.+24     	; 0x1cd0 <Icu_Init+0x136>
			break;

		case Timer_2:
			u8_status |= Timer_Init(&timer2_stru_init);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	08 96       	adiw	r24, 0x08	; 8
    1cbc:	0e 94 34 09 	call	0x1268	; 0x1268 <Timer_Init>
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	89 2b       	or	r24, r25
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <Icu_Init+0x136>
			break;

		default:
			u8_status |= E_NOk;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		if(u8_status == E_ok)
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	88 23       	and	r24, r24
    1cd4:	11 f4       	brne	.+4      	; 0x1cda <Icu_Init+0x140>
		{
			u8_status = E_ok;
    1cd6:	19 82       	std	Y+1, r1	; 0x01
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <Icu_Init+0x144>
		}
		else
		{
			u8_status = E_NOk;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return u8_status;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce0:	63 96       	adiw	r28, 0x13	; 19
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <Icu_ReadTime>:
* from falling edge to rising edge
* Return value: u8_error- variable that describe the error status
* Description: calculates the time between 2 edges
************************************************************************************/
ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	6b 83       	std	Y+3, r22	; 0x03
    1d0a:	5d 83       	std	Y+5, r21	; 0x05
    1d0c:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_STATUS u8_status;
	switch(Icu_Channel)
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	3b 87       	std	Y+11, r19	; 0x0b
    1d16:	2a 87       	std	Y+10, r18	; 0x0a
    1d18:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d1a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d1c:	41 30       	cpi	r20, 0x01	; 1
    1d1e:	51 05       	cpc	r21, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <Icu_ReadTime+0x32>
    1d22:	7e c0       	rjmp	.+252    	; 0x1e20 <Icu_ReadTime+0x12e>
    1d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d28:	82 30       	cpi	r24, 0x02	; 2
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <Icu_ReadTime+0x3e>
    1d2e:	7c c0       	rjmp	.+248    	; 0x1e28 <Icu_ReadTime+0x136>
    1d30:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d32:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d34:	21 15       	cp	r18, r1
    1d36:	31 05       	cpc	r19, r1
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <Icu_ReadTime+0x4a>
    1d3a:	e8 c0       	rjmp	.+464    	; 0x1f0c <Icu_ReadTime+0x21a>
	{
	case Timer_0:
		switch(Icu_EdgeToEdge)
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	48 2f       	mov	r20, r24
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	59 87       	std	Y+9, r21	; 0x09
    1d44:	48 87       	std	Y+8, r20	; 0x08
    1d46:	88 85       	ldd	r24, Y+8	; 0x08
    1d48:	99 85       	ldd	r25, Y+9	; 0x09
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	31 f1       	breq	.+76     	; 0x1d9c <Icu_ReadTime+0xaa>
    1d50:	28 85       	ldd	r18, Y+8	; 0x08
    1d52:	39 85       	ldd	r19, Y+9	; 0x09
    1d54:	22 30       	cpi	r18, 0x02	; 2
    1d56:	31 05       	cpc	r19, r1
    1d58:	e1 f1       	breq	.+120    	; 0x1dd2 <Icu_ReadTime+0xe0>
    1d5a:	48 85       	ldd	r20, Y+8	; 0x08
    1d5c:	59 85       	ldd	r21, Y+9	; 0x09
    1d5e:	41 15       	cp	r20, r1
    1d60:	51 05       	cpc	r21, r1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <Icu_ReadTime+0x74>
    1d64:	59 c0       	rjmp	.+178    	; 0x1e18 <Icu_ReadTime+0x126>
		{
		case ICU_RISE_TO_RISE:
			Icu_setCallBack(Rising_EdgeFunc);
    1d66:	8e eb       	ldi	r24, 0xBE	; 190
    1d68:	9f e0       	ldi	r25, 0x0F	; 15
    1d6a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod)*US_PER_TICK;
    1d6e:	80 91 78 00 	lds	r24, 0x0078
    1d72:	90 91 79 00 	lds	r25, 0x0079
    1d76:	00 24       	eor	r0, r0
    1d78:	96 95       	lsr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	07 94       	ror	r0
    1d7e:	96 95       	lsr	r25
    1d80:	87 95       	ror	r24
    1d82:	07 94       	ror	r0
    1d84:	98 2f       	mov	r25, r24
    1d86:	80 2d       	mov	r24, r0
    1d88:	cc 01       	movw	r24, r24
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d90:	fd 81       	ldd	r31, Y+5	; 0x05
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
    1d9a:	bb c0       	rjmp	.+374    	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		case ICU_RISE_TO_FALL:
			Icu_setCallBack(Rising_EdgeFunc);
    1d9c:	8e eb       	ldi	r24, 0xBE	; 190
    1d9e:	9f e0       	ldi	r25, 0x0F	; 15
    1da0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timeHigh)*US_PER_TICK;
    1da4:	80 91 74 00 	lds	r24, 0x0074
    1da8:	90 91 75 00 	lds	r25, 0x0075
    1dac:	00 24       	eor	r0, r0
    1dae:	96 95       	lsr	r25
    1db0:	87 95       	ror	r24
    1db2:	07 94       	ror	r0
    1db4:	96 95       	lsr	r25
    1db6:	87 95       	ror	r24
    1db8:	07 94       	ror	r0
    1dba:	98 2f       	mov	r25, r24
    1dbc:	80 2d       	mov	r24, r0
    1dbe:	cc 01       	movw	r24, r24
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc8:	80 83       	st	Z, r24
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	a2 83       	std	Z+2, r26	; 0x02
    1dce:	b3 83       	std	Z+3, r27	; 0x03
    1dd0:	a0 c0       	rjmp	.+320    	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		case ICU_FALE_TO_RISE:
			Icu_setCallBack(Rising_EdgeFunc);
    1dd2:	8e eb       	ldi	r24, 0xBE	; 190
    1dd4:	9f e0       	ldi	r25, 0x0F	; 15
    1dd6:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod-g16_timeHigh)*US_PER_TICK;
    1dda:	20 91 78 00 	lds	r18, 0x0078
    1dde:	30 91 79 00 	lds	r19, 0x0079
    1de2:	80 91 74 00 	lds	r24, 0x0074
    1de6:	90 91 75 00 	lds	r25, 0x0075
    1dea:	a9 01       	movw	r20, r18
    1dec:	48 1b       	sub	r20, r24
    1dee:	59 0b       	sbc	r21, r25
    1df0:	ca 01       	movw	r24, r20
    1df2:	00 24       	eor	r0, r0
    1df4:	96 95       	lsr	r25
    1df6:	87 95       	ror	r24
    1df8:	07 94       	ror	r0
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	07 94       	ror	r0
    1e00:	98 2f       	mov	r25, r24
    1e02:	80 2d       	mov	r24, r0
    1e04:	cc 01       	movw	r24, r24
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e0c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e0e:	80 83       	st	Z, r24
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	a2 83       	std	Z+2, r26	; 0x02
    1e14:	b3 83       	std	Z+3, r27	; 0x03
    1e16:	7d c0       	rjmp	.+250    	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		default:
			u8_status |= E_NOk;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	81 60       	ori	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	79 c0       	rjmp	.+242    	; 0x1f12 <Icu_ReadTime+0x220>
		}
	break;

	case Timer_1:
		/*no need to handle timer1 for ICU since it is used to perform another functionality*/
		u8_status |= E_NOk;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	75 c0       	rjmp	.+234    	; 0x1f12 <Icu_ReadTime+0x220>
	break;

	case Timer_2:
		switch(Icu_EdgeToEdge)
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	3f 83       	std	Y+7, r19	; 0x07
    1e30:	2e 83       	std	Y+6, r18	; 0x06
    1e32:	4e 81       	ldd	r20, Y+6	; 0x06
    1e34:	5f 81       	ldd	r21, Y+7	; 0x07
    1e36:	41 30       	cpi	r20, 0x01	; 1
    1e38:	51 05       	cpc	r21, r1
    1e3a:	31 f1       	breq	.+76     	; 0x1e88 <Icu_ReadTime+0x196>
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	91 05       	cpc	r25, r1
    1e44:	e1 f1       	breq	.+120    	; 0x1ebe <Icu_ReadTime+0x1cc>
    1e46:	2e 81       	ldd	r18, Y+6	; 0x06
    1e48:	3f 81       	ldd	r19, Y+7	; 0x07
    1e4a:	21 15       	cp	r18, r1
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <Icu_ReadTime+0x160>
    1e50:	59 c0       	rjmp	.+178    	; 0x1f04 <Icu_ReadTime+0x212>
		{
		case ICU_RISE_TO_RISE:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1e52:	8e eb       	ldi	r24, 0xBE	; 190
    1e54:	9f e0       	ldi	r25, 0x0F	; 15
    1e56:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod)*US_PER_TICK;
    1e5a:	80 91 78 00 	lds	r24, 0x0078
    1e5e:	90 91 79 00 	lds	r25, 0x0079
    1e62:	00 24       	eor	r0, r0
    1e64:	96 95       	lsr	r25
    1e66:	87 95       	ror	r24
    1e68:	07 94       	ror	r0
    1e6a:	96 95       	lsr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	07 94       	ror	r0
    1e70:	98 2f       	mov	r25, r24
    1e72:	80 2d       	mov	r24, r0
    1e74:	cc 01       	movw	r24, r24
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	ec 81       	ldd	r30, Y+4	; 0x04
    1e7c:	fd 81       	ldd	r31, Y+5	; 0x05
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
    1e86:	45 c0       	rjmp	.+138    	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		case ICU_RISE_TO_FALL:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1e88:	8e eb       	ldi	r24, 0xBE	; 190
    1e8a:	9f e0       	ldi	r25, 0x0F	; 15
    1e8c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timeHigh)*US_PER_TICK;
    1e90:	80 91 74 00 	lds	r24, 0x0074
    1e94:	90 91 75 00 	lds	r25, 0x0075
    1e98:	00 24       	eor	r0, r0
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	07 94       	ror	r0
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	07 94       	ror	r0
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	80 2d       	mov	r24, r0
    1eaa:	cc 01       	movw	r24, r24
    1eac:	a0 e0       	ldi	r26, 0x00	; 0
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb2:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb4:	80 83       	st	Z, r24
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	a2 83       	std	Z+2, r26	; 0x02
    1eba:	b3 83       	std	Z+3, r27	; 0x03
    1ebc:	2a c0       	rjmp	.+84     	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		case ICU_FALE_TO_RISE:
			//u8_status |= Icu_setCallBack(Rising_EdgeFunc);
			Icu_setCallBack(Rising_EdgeFunc);
    1ebe:	8e eb       	ldi	r24, 0xBE	; 190
    1ec0:	9f e0       	ldi	r25, 0x0F	; 15
    1ec2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <Icu_setCallBack>
			*Icu_Time=(g16_timePeriod-g16_timeHigh)*US_PER_TICK;
    1ec6:	20 91 78 00 	lds	r18, 0x0078
    1eca:	30 91 79 00 	lds	r19, 0x0079
    1ece:	80 91 74 00 	lds	r24, 0x0074
    1ed2:	90 91 75 00 	lds	r25, 0x0075
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	48 1b       	sub	r20, r24
    1eda:	59 0b       	sbc	r21, r25
    1edc:	ca 01       	movw	r24, r20
    1ede:	00 24       	eor	r0, r0
    1ee0:	96 95       	lsr	r25
    1ee2:	87 95       	ror	r24
    1ee4:	07 94       	ror	r0
    1ee6:	96 95       	lsr	r25
    1ee8:	87 95       	ror	r24
    1eea:	07 94       	ror	r0
    1eec:	98 2f       	mov	r25, r24
    1eee:	80 2d       	mov	r24, r0
    1ef0:	cc 01       	movw	r24, r24
    1ef2:	a0 e0       	ldi	r26, 0x00	; 0
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef8:	fd 81       	ldd	r31, Y+5	; 0x05
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <Icu_ReadTime+0x220>
			break;

		default:
			u8_status |= E_NOk;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	81 60       	ori	r24, 0x01	; 1
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <Icu_ReadTime+0x220>
			break;
		}
	break;

	default:
		u8_status |= E_NOk;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	81 60       	ori	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
	}

	if(u8_status == E_ok)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	88 23       	and	r24, r24
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <Icu_ReadTime+0x22a>
	{
		u8_status = E_ok;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <Icu_ReadTime+0x22e>
	}
	else
	{
		u8_status = E_NOk;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	2b 96       	adiw	r28, 0x0b	; 11
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <Icu_setCallBack>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: this function sets the pointer to the callbacked function
************************************************************************************/
ERROR_STATUS Icu_setCallBack(void(*a_ptr)(void))
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <Icu_setCallBack+0x6>
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9b 83       	std	Y+3, r25	; 0x03
    1f42:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATUS u8_status;
	if(a_ptr == NULL_Ptr)
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	9b 81       	ldd	r25, Y+3	; 0x03
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	21 f4       	brne	.+8      	; 0x1f54 <Icu_setCallBack+0x20>
	{
		u8_status |= E_NOk;
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	81 60       	ori	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <Icu_setCallBack+0x2c>
	}
	else
	{
		/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	90 93 6f 00 	sts	0x006F, r25
    1f5c:	80 93 6e 00 	sts	0x006E, r24
		u8_status |= E_ok;
	}

	if(u8_status == E_ok)
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	88 23       	and	r24, r24
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <Icu_setCallBack+0x36>
	{
		u8_status = E_ok;
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <Icu_setCallBack+0x3a>
	}
	else
	{
		u8_status = E_NOk;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_status;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <Rising_EdgeFunc>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: this function will be called when the interrupt occurs
************************************************************************************/
void Rising_EdgeFunc(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	0f 92       	push	r0
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS u8_status;
	g8_edgeCount++;
    1f86:	80 91 76 00 	lds	r24, 0x0076
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	80 93 76 00 	sts	0x0076, r24
	if(g8_edgeCount == FIRST_ENTRY)
    1f90:	80 91 76 00 	lds	r24, 0x0076
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	c1 f4       	brne	.+48     	; 0x1fc8 <Rising_EdgeFunc+0x4c>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		u8_status |= Timer_Clear(Timer_2);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <Timer_Clear>
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	89 2b       	or	r24, r25
    1fa4:	89 83       	std	Y+1, r24	; 0x01
		u8_status |= Timer_Start(Timer_2,TIMER0_NUMBER_OF_TICKS);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	71 e0       	ldi	r23, 0x01	; 1
    1fac:	0e 94 b3 09 	call	0x1366	; 0x1366 <Timer_Start>
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	89 2b       	or	r24, r25
    1fb6:	89 83       	std	Y+1, r24	; 0x01
		/* Detect falling edge */
		u8_status |= INT2_SetEdge(FALLING_EDGE);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <INT2_SetEdge>
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	89 2b       	or	r24, r25
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    1fc6:	53 c0       	rjmp	.+166    	; 0x206e <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == SECOND_ENTRY)
    1fc8:	80 91 76 00 	lds	r24, 0x0076
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	91 f4       	brne	.+36     	; 0x1ff4 <Rising_EdgeFunc+0x78>
	{
		/* Store the High time value */
		u8_status |= Timer_GetValue(Timer_2,&g16_timeHigh);
    1fd0:	24 e7       	ldi	r18, 0x74	; 116
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	b9 01       	movw	r22, r18
    1fd8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Timer_GetValue>
    1fdc:	98 2f       	mov	r25, r24
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	89 2b       	or	r24, r25
    1fe2:	89 83       	std	Y+1, r24	; 0x01
		/* Detect rising edge */
		u8_status |= INT2_SetEdge(RISIGING_EDGE);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <INT2_SetEdge>
    1fea:	98 2f       	mov	r25, r24
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	89 2b       	or	r24, r25
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	3d c0       	rjmp	.+122    	; 0x206e <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == THIRD_ENTRY)
    1ff4:	80 91 76 00 	lds	r24, 0x0076
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 f4       	brne	.+36     	; 0x2020 <Rising_EdgeFunc+0xa4>
	{
		/* Store the Period time value */
		u8_status |= Timer_GetValue(Timer_2,&g16_timePeriod);
    1ffc:	28 e7       	ldi	r18, 0x78	; 120
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	b9 01       	movw	r22, r18
    2004:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Timer_GetValue>
    2008:	98 2f       	mov	r25, r24
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	89 2b       	or	r24, r25
    200e:	89 83       	std	Y+1, r24	; 0x01
		/* Detect falling edge */
		u8_status |= INT2_SetEdge(FALLING_EDGE);
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <INT2_SetEdge>
    2016:	98 2f       	mov	r25, r24
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	89 2b       	or	r24, r25
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	27 c0       	rjmp	.+78     	; 0x206e <Rising_EdgeFunc+0xf2>
	}
	else if(g8_edgeCount == FORTH_ENTRY)
    2020:	80 91 76 00 	lds	r24, 0x0076
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	19 f5       	brne	.+70     	; 0x206e <Rising_EdgeFunc+0xf2>
	{
		/* Store the Period time value + High time value */
		g16_timePeriodPlusHigh = TCNT0;
    2028:	e2 e5       	ldi	r30, 0x52	; 82
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	90 93 73 00 	sts	0x0073, r25
    2036:	80 93 72 00 	sts	0x0072, r24
		u8_status |= Timer_GetValue(Timer_2,&g16_timePeriodPlusHigh);
    203a:	22 e7       	ldi	r18, 0x72	; 114
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	b9 01       	movw	r22, r18
    2042:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Timer_GetValue>
    2046:	98 2f       	mov	r25, r24
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	89 2b       	or	r24, r25
    204c:	89 83       	std	Y+1, r24	; 0x01
		/* Clear the timer counter register to start measurements again */
		u8_status |= Timer_Clear(Timer_2);
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	0e 94 1a 0b 	call	0x1634	; 0x1634 <Timer_Clear>
    2054:	98 2f       	mov	r25, r24
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	89 2b       	or	r24, r25
    205a:	89 83       	std	Y+1, r24	; 0x01
		/* Detect rising edge */
		u8_status |= INT2_SetEdge(RISIGING_EDGE);
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <INT2_SetEdge>
    2062:	98 2f       	mov	r25, r24
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	89 2b       	or	r24, r25
    2068:	89 83       	std	Y+1, r24	; 0x01
		g8_edgeCount=CLEAR;
    206a:	10 92 76 00 	sts	0x0076, r1
	}

	if(u8_status == E_ok)
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 23       	and	r24, r24
    2072:	11 f4       	brne	.+4      	; 0x2078 <Rising_EdgeFunc+0xfc>
	{
		u8_status = E_ok;
    2074:	19 82       	std	Y+1, r1	; 0x01
    2076:	02 c0       	rjmp	.+4      	; 0x207c <Rising_EdgeFunc+0x100>
	}
	else
	{
		u8_status = E_NOk;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01
	}

	/*this line will be hashed tell the coming modification*/
	/*return u8_status;*/
}
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <Us_Init>:
* Description: This function initiate the UltraSonic by set the value of the Dio_Dirction of
* the pin trigger as an output then initiate the ICU to use it to calculate the
* On time of the ECHO signal.
************************************************************************************/
ERROR_STATUS Us_Init(void)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <Us_Init+0x6>
    208a:	00 d0       	rcall	.+0      	; 0x208c <Us_Init+0x8>
    208c:	00 d0       	rcall	.+0      	; 0x208e <Us_Init+0xa>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s trigger_init=
	{
			trigger_init.GPIO=GPIOA,
			trigger_init.pins=BIT0,
			trigger_init.dir=OUTPUT,
	};
    2092:	1a 82       	std	Y+2, r1	; 0x02
    2094:	2a 81       	ldd	r18, Y+2	; 0x02
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	9b 81       	ldd	r25, Y+3	; 0x03
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	8c 83       	std	Y+4, r24	; 0x04
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	2a 83       	std	Y+2, r18	; 0x02
    20a4:	9b 83       	std	Y+3, r25	; 0x03
    20a6:	8c 83       	std	Y+4, r24	; 0x04
	DIO_init (&trigger_init);
    20a8:	ce 01       	movw	r24, r28
    20aa:	02 96       	adiw	r24, 0x02	; 2
    20ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
	DIO_Write (GPIOA, BIT0, LOW);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>

	Icu_cfg_s echo_init={ICU_CH2,ICU_TIMER_CH2};    /*INT2,TIMER2*/
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	8e 83       	std	Y+6, r24	; 0x06
	Icu_Init(&echo_init);
    20c2:	ce 01       	movw	r24, r28
    20c4:	05 96       	adiw	r24, 0x05	; 5
    20c6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Icu_Init>
	u8_status=E_ok;
    20ca:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01

}
    20ce:	26 96       	adiw	r28, 0x06	; 6
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <Us_Trigger>:
* Return value: u8_error- variable that describe the error status
* Description: This function send the  pulse, to trigger pin of the UltraSonic to enhance
* the  ECUO signal
************************************************************************************/
ERROR_STATUS Us_Trigger(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	softwareDelayMs(ONE_MS);
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 20 14 	call	0x2840	; 0x2840 <softwareDelayMs>
	DIO_Write (GPIOA, BIT0, HIGH);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	4f ef       	ldi	r20, 0xFF	; 255
    20fc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
	softwareDelayMs(ONE_MS);
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 20 14 	call	0x2840	; 0x2840 <softwareDelayMs>
	DIO_Write (GPIOA, BIT0, LOW);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
	u8_status=E_ok;
    2116:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    2118:	89 81       	ldd	r24, Y+1	; 0x01


}
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <Us_GetDistance>:
* Description: This function get the time of high signal of ECUO pulse, then               *
* use it to calculate the distance, then return the value in the
*  Distance parameter
************************************************************************************/
ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	27 97       	sbiw	r28, 0x07	; 7
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	9f 83       	std	Y+7, r25	; 0x07
    2138:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t u8_status;
	uint32_t u32_time;
	Icu_ReadTime(Timer_2,ICU_RISE_TO_FALL,&u32_time);   /*high time*/
    213a:	9e 01       	movw	r18, r28
    213c:	2e 5f       	subi	r18, 0xFE	; 254
    213e:	3f 4f       	sbci	r19, 0xFF	; 255
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	a9 01       	movw	r20, r18
    2146:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <Icu_ReadTime>
	*Distance=u32_time/ULTRA_SONIC_SCALING;
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	ac 81       	ldd	r26, Y+4	; 0x04
    2150:	bd 81       	ldd	r27, Y+5	; 0x05
    2152:	2a e3       	ldi	r18, 0x3A	; 58
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__udivmodsi4>
    2162:	da 01       	movw	r26, r20
    2164:	c9 01       	movw	r24, r18
    2166:	ee 81       	ldd	r30, Y+6	; 0x06
    2168:	ff 81       	ldd	r31, Y+7	; 0x07
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
	u8_status=E_ok;
    216e:	19 82       	std	Y+1, r1	; 0x01
	return u8_status;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
}
    2172:	27 96       	adiw	r28, 0x07	; 7
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <Motor_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initialize (Enable, IN1, IN2) pins as digital outputs
************************************************************************************/
ERROR_STATUS Motor_Init(uint8_t Motor_Number)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	2a 97       	sbiw	r28, 0x0a	; 10
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	88 87       	std	Y+8, r24	; 0x08
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    219a:	88 85       	ldd	r24, Y+8	; 0x08
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3a 87       	std	Y+10, r19	; 0x0a
    21a2:	29 87       	std	Y+9, r18	; 0x09
    21a4:	89 85       	ldd	r24, Y+9	; 0x09
    21a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	91 05       	cpc	r25, r1
    21ac:	31 f0       	breq	.+12     	; 0x21ba <Motor_Init+0x36>
    21ae:	29 85       	ldd	r18, Y+9	; 0x09
    21b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	c1 f0       	breq	.+48     	; 0x21e8 <Motor_Init+0x64>
    21b8:	2e c0       	rjmp	.+92     	; 0x2216 <Motor_Init+0x92>
	{
		case(MOTOR_1):
				u8_status=E_ok;
    21ba:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor1_init=
				{
						Motor1_init.GPIO=MOTORS_PORT,
						Motor1_init.pins=MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT,
						Motor1_init.dir=OUTPUT,
				};
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	2a 81       	ldd	r18, Y+2	; 0x02
    21c2:	80 ed       	ldi	r24, 0xD0	; 208
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9b 81       	ldd	r25, Y+3	; 0x03
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	8c 83       	std	Y+4, r24	; 0x04
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	2a 83       	std	Y+2, r18	; 0x02
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&Motor1_init);
    21d4:	ce 01       	movw	r24, r28
    21d6:	02 96       	adiw	r24, 0x02	; 2
    21d8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				DIO_Write (MOTORS_PORT, MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT, LOW);
    21dc:	83 e0       	ldi	r24, 0x03	; 3
    21de:	60 ed       	ldi	r22, 0xD0	; 208
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
    21e6:	19 c0       	rjmp	.+50     	; 0x221a <Motor_Init+0x96>
				break;

		case(MOTOR_2):
				u8_status=E_ok;
    21e8:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor2_init=
				{
						Motor2_init.GPIO=MOTORS_PORT,
						Motor2_init.pins=MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT,
						Motor2_init.dir=OUTPUT,
				};
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	2d 81       	ldd	r18, Y+5	; 0x05
    21f0:	8c e2       	ldi	r24, 0x2C	; 44
    21f2:	8e 83       	std	Y+6, r24	; 0x06
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	8f 83       	std	Y+7, r24	; 0x07
    21fa:	8f 81       	ldd	r24, Y+7	; 0x07
    21fc:	2d 83       	std	Y+5, r18	; 0x05
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&Motor2_init);
    2202:	ce 01       	movw	r24, r28
    2204:	05 96       	adiw	r24, 0x05	; 5
    2206:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				DIO_Write (MOTORS_PORT, MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT, LOW);
    220a:	83 e0       	ldi	r24, 0x03	; 3
    220c:	6c e2       	ldi	r22, 0x2C	; 44
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
    2214:	02 c0       	rjmp	.+4      	; 0x221a <Motor_Init+0x96>
				break;

		default:
			u8_status=E_NOk;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
}
    221c:	2a 96       	adiw	r28, 0x0a	; 10
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <Motor_Direction>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Controls the motor direction from getting the motor number and the direction
************************************************************************************/
ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	2f 97       	sbiw	r28, 0x0f	; 15
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	88 87       	std	Y+8, r24	; 0x08
    2244:	69 87       	std	Y+9, r22	; 0x09
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    2246:	88 85       	ldd	r24, Y+8	; 0x08
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	3f 87       	std	Y+15, r19	; 0x0f
    224e:	2e 87       	std	Y+14, r18	; 0x0e
    2250:	8e 85       	ldd	r24, Y+14	; 0x0e
    2252:	9f 85       	ldd	r25, Y+15	; 0x0f
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	91 05       	cpc	r25, r1
    2258:	39 f0       	breq	.+14     	; 0x2268 <Motor_Direction+0x3a>
    225a:	2e 85       	ldd	r18, Y+14	; 0x0e
    225c:	3f 85       	ldd	r19, Y+15	; 0x0f
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <Motor_Direction+0x38>
    2264:	4c c0       	rjmp	.+152    	; 0x22fe <Motor_Direction+0xd0>
    2266:	96 c0       	rjmp	.+300    	; 0x2394 <Motor_Direction+0x166>
	{
		case(MOTOR_1):
				u8_status=E_ok;
    2268:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor1_DirInit=
				{
					Motor1_DirInit.GPIO=MOTORS_PORT,
					Motor1_DirInit.pins=MOTOR_EN_1_BIT | MOTOR_OUT_1A_BIT | MOTOR_OUT_1B_BIT,
					Motor1_DirInit.dir=OUTPUT,
				};
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	8a 83       	std	Y+2, r24	; 0x02
    226e:	2a 81       	ldd	r18, Y+2	; 0x02
    2270:	80 ed       	ldi	r24, 0xD0	; 208
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	8f ef       	ldi	r24, 0xFF	; 255
    2278:	8c 83       	std	Y+4, r24	; 0x04
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	2a 83       	std	Y+2, r18	; 0x02
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8c 83       	std	Y+4, r24	; 0x04
				DIO_init (&Motor1_DirInit);
    2282:	ce 01       	movw	r24, r28
    2284:	02 96       	adiw	r24, 0x02	; 2
    2286:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				switch(Motor_Direction)
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	3d 87       	std	Y+13, r19	; 0x0d
    2292:	2c 87       	std	Y+12, r18	; 0x0c
    2294:	8c 85       	ldd	r24, Y+12	; 0x0c
    2296:	9d 85       	ldd	r25, Y+13	; 0x0d
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	91 05       	cpc	r25, r1
    229c:	a9 f0       	breq	.+42     	; 0x22c8 <Motor_Direction+0x9a>
    229e:	2c 85       	ldd	r18, Y+12	; 0x0c
    22a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	31 05       	cpc	r19, r1
    22a6:	e1 f0       	breq	.+56     	; 0x22e0 <Motor_Direction+0xb2>
    22a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	21 f5       	brne	.+72     	; 0x22f8 <Motor_Direction+0xca>
				{
				case MOTOR_STOP:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, LOW);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	60 e4       	ldi	r22, 0x40	; 64
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, LOW);
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	60 e8       	ldi	r22, 0x80	; 128
    22be:	40 e0       	ldi	r20, 0x00	; 0
    22c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    22c4:	19 82       	std	Y+1, r1	; 0x01
    22c6:	68 c0       	rjmp	.+208    	; 0x2398 <Motor_Direction+0x16a>
					break;

				case MOTOR_FORWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, LOW);
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	60 e4       	ldi	r22, 0x40	; 64
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, HIGH);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	60 e8       	ldi	r22, 0x80	; 128
    22d6:	4f ef       	ldi	r20, 0xFF	; 255
    22d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    22dc:	19 82       	std	Y+1, r1	; 0x01
    22de:	5c c0       	rjmp	.+184    	; 0x2398 <Motor_Direction+0x16a>
					break;

				case MOTOR_BACKWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1A_BIT, HIGH);
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	60 e4       	ldi	r22, 0x40	; 64
    22e4:	4f ef       	ldi	r20, 0xFF	; 255
    22e6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_1B_BIT, LOW);
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	60 e8       	ldi	r22, 0x80	; 128
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    22f4:	19 82       	std	Y+1, r1	; 0x01
    22f6:	50 c0       	rjmp	.+160    	; 0x2398 <Motor_Direction+0x16a>
					break;

				default:
					u8_status=E_NOk;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	4d c0       	rjmp	.+154    	; 0x2398 <Motor_Direction+0x16a>
				}
				break;

		case(MOTOR_2):
				u8_status=E_ok;
    22fe:	19 82       	std	Y+1, r1	; 0x01
				DIO_Cfg_s Motor2_DirInit=
				{
					Motor2_DirInit.GPIO=MOTORS_PORT,
					Motor2_DirInit.pins=MOTOR_EN_2_BIT | MOTOR_OUT_2A_BIT | MOTOR_OUT_2B_BIT,
					Motor2_DirInit.dir=OUTPUT,
				};
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	2d 81       	ldd	r18, Y+5	; 0x05
    2306:	8c e2       	ldi	r24, 0x2C	; 44
    2308:	8e 83       	std	Y+6, r24	; 0x06
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	8f 81       	ldd	r24, Y+7	; 0x07
    2312:	2d 83       	std	Y+5, r18	; 0x05
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8f 83       	std	Y+7, r24	; 0x07
				DIO_init (&Motor2_DirInit);
    2318:	ce 01       	movw	r24, r28
    231a:	05 96       	adiw	r24, 0x05	; 5
    231c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_init>
				switch(Motor_Direction)
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	3b 87       	std	Y+11, r19	; 0x0b
    2328:	2a 87       	std	Y+10, r18	; 0x0a
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	91 05       	cpc	r25, r1
    2332:	a9 f0       	breq	.+42     	; 0x235e <Motor_Direction+0x130>
    2334:	2a 85       	ldd	r18, Y+10	; 0x0a
    2336:	3b 85       	ldd	r19, Y+11	; 0x0b
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	e1 f0       	breq	.+56     	; 0x2376 <Motor_Direction+0x148>
    233e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2340:	9b 85       	ldd	r25, Y+11	; 0x0b
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	21 f5       	brne	.+72     	; 0x238e <Motor_Direction+0x160>
				{
				case MOTOR_STOP:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, LOW);
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	64 e0       	ldi	r22, 0x04	; 4
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, LOW);
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	68 e0       	ldi	r22, 0x08	; 8
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    235a:	19 82       	std	Y+1, r1	; 0x01
    235c:	1d c0       	rjmp	.+58     	; 0x2398 <Motor_Direction+0x16a>
					break;

				case MOTOR_FORWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, LOW);
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	64 e0       	ldi	r22, 0x04	; 4
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, HIGH);
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	68 e0       	ldi	r22, 0x08	; 8
    236c:	4f ef       	ldi	r20, 0xFF	; 255
    236e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	11 c0       	rjmp	.+34     	; 0x2398 <Motor_Direction+0x16a>
					break;

				case MOTOR_BACKWARD:
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2A_BIT, HIGH);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	64 e0       	ldi	r22, 0x04	; 4
    237a:	4f ef       	ldi	r20, 0xFF	; 255
    237c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					DIO_Write (MOTORS_PORT, MOTOR_OUT_2B_BIT, LOW);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	68 e0       	ldi	r22, 0x08	; 8
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_Write>
					u8_status=E_ok;
    238a:	19 82       	std	Y+1, r1	; 0x01
    238c:	05 c0       	rjmp	.+10     	; 0x2398 <Motor_Direction+0x16a>
					break;

				default:
					u8_status=E_NOk;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <Motor_Direction+0x16a>
				}
				break;

		default:
			u8_status=E_NOk;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
}
    239a:	2f 96       	adiw	r28, 0x0f	; 15
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <Motor_Start>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Start the motor
************************************************************************************/
ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	27 97       	sbiw	r28, 0x07	; 7
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	8c 83       	std	Y+4, r24	; 0x04
    23c2:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	84 e0       	ldi	r24, 0x04	; 4
    23ca:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    23cc:	ce 01       	movw	r24, r28
    23ce:	02 96       	adiw	r24, 0x02	; 2
    23d0:	0e 94 47 02 	call	0x48e	; 0x48e <Pwm_Init>
	switch(Motor_Number)
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3f 83       	std	Y+7, r19	; 0x07
    23dc:	2e 83       	std	Y+6, r18	; 0x06
    23de:	8e 81       	ldd	r24, Y+6	; 0x06
    23e0:	9f 81       	ldd	r25, Y+7	; 0x07
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	91 05       	cpc	r25, r1
    23e6:	a1 f0       	breq	.+40     	; 0x2410 <Motor_Start+0x64>
    23e8:	2e 81       	ldd	r18, Y+6	; 0x06
    23ea:	3f 81       	ldd	r19, Y+7	; 0x07
    23ec:	23 30       	cpi	r18, 0x03	; 3
    23ee:	31 05       	cpc	r19, r1
    23f0:	c9 f0       	breq	.+50     	; 0x2424 <Motor_Start+0x78>
    23f2:	8e 81       	ldd	r24, Y+6	; 0x06
    23f4:	9f 81       	ldd	r25, Y+7	; 0x07
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	91 05       	cpc	r25, r1
    23fa:	f1 f4       	brne	.+60     	; 0x2438 <Motor_Start+0x8c>
	{
	case MOTOR_1:
		Pwm_Start(PWM_CH1A,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2400:	23 e0       	ldi	r18, 0x03	; 3
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    240c:	19 82       	std	Y+1, r1	; 0x01
    240e:	16 c0       	rjmp	.+44     	; 0x243c <Motor_Start+0x90>
		break;

	case MOTOR_2:
		Pwm_Start(PWM_CH1B,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	6d 81       	ldd	r22, Y+5	; 0x05
    2414:	23 e0       	ldi	r18, 0x03	; 3
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    2420:	19 82       	std	Y+1, r1	; 0x01
    2422:	0c c0       	rjmp	.+24     	; 0x243c <Motor_Start+0x90>
		break;

	case (MOTOR_1_2):
		Pwm_Start(PWM_CH1A_CH1B,Mot_Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    2424:	84 e0       	ldi	r24, 0x04	; 4
    2426:	6d 81       	ldd	r22, Y+5	; 0x05
    2428:	23 e0       	ldi	r18, 0x03	; 3
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    2434:	19 82       	std	Y+1, r1	; 0x01
    2436:	02 c0       	rjmp	.+4      	; 0x243c <Motor_Start+0x90>
		break;

	default:
		u8_status=E_NOk;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
}
    243e:	27 96       	adiw	r28, 0x07	; 7
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <Motor_SpeedUpdate>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Controls the motor speed from getting the motor number and the speed
************************************************************************************/
ERROR_STATUS Motor_SpeedUpdate(uint8_t Motor_Number, uint8_t Speed)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	27 97       	sbiw	r28, 0x07	; 7
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	8c 83       	std	Y+4, r24	; 0x04
    2466:	6d 83       	std	Y+5, r22	; 0x05
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	84 e0       	ldi	r24, 0x04	; 4
    246e:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    2470:	ce 01       	movw	r24, r28
    2472:	02 96       	adiw	r24, 0x02	; 2
    2474:	0e 94 47 02 	call	0x48e	; 0x48e <Pwm_Init>
	switch(Motor_Number)
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	3f 83       	std	Y+7, r19	; 0x07
    2480:	2e 83       	std	Y+6, r18	; 0x06
    2482:	8e 81       	ldd	r24, Y+6	; 0x06
    2484:	9f 81       	ldd	r25, Y+7	; 0x07
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	91 05       	cpc	r25, r1
    248a:	a1 f0       	breq	.+40     	; 0x24b4 <Motor_SpeedUpdate+0x64>
    248c:	2e 81       	ldd	r18, Y+6	; 0x06
    248e:	3f 81       	ldd	r19, Y+7	; 0x07
    2490:	23 30       	cpi	r18, 0x03	; 3
    2492:	31 05       	cpc	r19, r1
    2494:	c9 f0       	breq	.+50     	; 0x24c8 <Motor_SpeedUpdate+0x78>
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	f1 f4       	brne	.+60     	; 0x24dc <Motor_SpeedUpdate+0x8c>
	{
	case MOTOR_1:
		Pwm_Start(PWM_CH1A,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	6d 81       	ldd	r22, Y+5	; 0x05
    24a4:	23 e0       	ldi	r18, 0x03	; 3
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	16 c0       	rjmp	.+44     	; 0x24e0 <Motor_SpeedUpdate+0x90>
		break;

	case MOTOR_2:
		Pwm_Start(PWM_CH1B,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	6d 81       	ldd	r22, Y+5	; 0x05
    24b8:	23 e0       	ldi	r18, 0x03	; 3
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	50 e0       	ldi	r21, 0x00	; 0
    24c0:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    24c4:	19 82       	std	Y+1, r1	; 0x01
    24c6:	0c c0       	rjmp	.+24     	; 0x24e0 <Motor_SpeedUpdate+0x90>
		break;

	case (MOTOR_1_2):
		Pwm_Start(PWM_CH1A_CH1B,Speed,T1_PHASE_CORRECT_FREQUENCY_50HZ);
    24c8:	84 e0       	ldi	r24, 0x04	; 4
    24ca:	6d 81       	ldd	r22, Y+5	; 0x05
    24cc:	23 e0       	ldi	r18, 0x03	; 3
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	0e 94 4e 03 	call	0x69c	; 0x69c <Pwm_Start>
		u8_status=E_ok;
    24d8:	19 82       	std	Y+1, r1	; 0x01
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <Motor_SpeedUpdate+0x90>
		break;

	default:
		u8_status=E_NOk;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24e2:	27 96       	adiw	r28, 0x07	; 7
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <Motor_Stop>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: stop the motor
************************************************************************************/
ERROR_STATUS Motor_Stop(uint8_t Motor_Number)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <Motor_Stop+0x6>
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <Motor_Stop+0x8>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <Motor_Stop+0xa>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	8c 83       	std	Y+4, r24	; 0x04
	ERROR_STATUS u8_status;
	Pwm_Cfg_s instans={PWM_CH1A_CH1B,PWM_PRESCALER_256};
    2504:	84 e0       	ldi	r24, 0x04	; 4
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	84 e0       	ldi	r24, 0x04	; 4
    250a:	8b 83       	std	Y+3, r24	; 0x03
	Pwm_Init(&instans);
    250c:	ce 01       	movw	r24, r28
    250e:	02 96       	adiw	r24, 0x02	; 2
    2510:	0e 94 47 02 	call	0x48e	; 0x48e <Pwm_Init>
	switch(Motor_Number)
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3e 83       	std	Y+6, r19	; 0x06
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	82 30       	cpi	r24, 0x02	; 2
    2524:	91 05       	cpc	r25, r1
    2526:	79 f0       	breq	.+30     	; 0x2546 <Motor_Stop+0x52>
    2528:	2d 81       	ldd	r18, Y+5	; 0x05
    252a:	3e 81       	ldd	r19, Y+6	; 0x06
    252c:	23 30       	cpi	r18, 0x03	; 3
    252e:	31 05       	cpc	r19, r1
    2530:	79 f0       	breq	.+30     	; 0x2550 <Motor_Stop+0x5c>
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	91 05       	cpc	r25, r1
    253a:	79 f4       	brne	.+30     	; 0x255a <Motor_Stop+0x66>
	{
	case MOTOR_1:
		Pwm_Stop(PWM_CH1A);
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Pwm_Stop>
		u8_status=E_ok;
    2542:	19 82       	std	Y+1, r1	; 0x01
    2544:	0c c0       	rjmp	.+24     	; 0x255e <Motor_Stop+0x6a>
		break;

	case MOTOR_2:
		Pwm_Stop(PWM_CH1B);
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Pwm_Stop>
		u8_status=E_ok;
    254c:	19 82       	std	Y+1, r1	; 0x01
    254e:	07 c0       	rjmp	.+14     	; 0x255e <Motor_Stop+0x6a>
		break;
	case (MOTOR_1_2):
		Pwm_Stop(PWM_CH1A_CH1B);
    2550:	84 e0       	ldi	r24, 0x04	; 4
    2552:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <Pwm_Stop>
		u8_status=E_ok;
    2556:	19 82       	std	Y+1, r1	; 0x01
    2558:	02 c0       	rjmp	.+4      	; 0x255e <Motor_Stop+0x6a>
		break;
	default:
		u8_status=E_NOk;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    255e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2560:	26 96       	adiw	r28, 0x06	; 6
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <Motor_GetStatus>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Returns status of the motor whether initialized or not
************************************************************************************/
ERROR_STATUS Motor_GetStatus(uint8_t Motor_Number, uint8_t* Mot_status)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <Motor_GetStatus+0x6>
    2578:	00 d0       	rcall	.+0      	; 0x257a <Motor_GetStatus+0x8>
    257a:	00 d0       	rcall	.+0      	; 0x257c <Motor_GetStatus+0xa>
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	8a 83       	std	Y+2, r24	; 0x02
    2582:	7c 83       	std	Y+4, r23	; 0x04
    2584:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATUS u8_status;
	switch(Motor_Number)
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	3e 83       	std	Y+6, r19	; 0x06
    258e:	2d 83       	std	Y+5, r18	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	91 05       	cpc	r25, r1
    2598:	31 f0       	breq	.+12     	; 0x25a6 <Motor_GetStatus+0x34>
    259a:	2d 81       	ldd	r18, Y+5	; 0x05
    259c:	3e 81       	ldd	r19, Y+6	; 0x06
    259e:	22 30       	cpi	r18, 0x02	; 2
    25a0:	31 05       	cpc	r19, r1
    25a2:	19 f0       	breq	.+6      	; 0x25aa <Motor_GetStatus+0x38>
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <Motor_GetStatus+0x3c>
	{
	case MOTOR_1:

		u8_status=E_ok;
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <Motor_GetStatus+0x40>
		break;

	case MOTOR_2:

		u8_status=E_ok;
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <Motor_GetStatus+0x40>
		break;

	default:
		u8_status=E_NOk;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b4:	26 96       	adiw	r28, 0x06	; 6
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <Steering_Init>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: Initiates the module
************************************************************************************/
ERROR_STATUS Steering_Init(void)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	0f 92       	push	r0
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS u8_status;
	u8_status=Motor_Init(MOTOR_1);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	0e 94 c2 10 	call	0x2184	; 0x2184 <Motor_Init>
    25d6:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Init(MOTOR_2);
    25d8:	82 e0       	ldi	r24, 0x02	; 2
    25da:	0e 94 c2 10 	call	0x2184	; 0x2184 <Motor_Init>
    25de:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Start(MOTOR_1,INITIAL_SPEED);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <Motor_Start>
    25e8:	89 83       	std	Y+1, r24	; 0x01
	u8_status=Motor_Start(MOTOR_2,INITIAL_SPEED);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	0e 94 d6 11 	call	0x23ac	; 0x23ac <Motor_Start>
    25f2:	89 83       	std	Y+1, r24	; 0x01
	return u8_status;
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <Steering_SteerCar>:
* Parameters (out): None
* Return value: u8_error- variable that describe the error status
* Description: This function controls the command and the speed of the car
************************************************************************************/
ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <Steering_SteerCar+0x6>
    2604:	00 d0       	rcall	.+0      	; 0x2606 <Steering_SteerCar+0x8>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	8a 83       	std	Y+2, r24	; 0x02
    260e:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_STATUS u8_status;
	switch(Steering_CarCmd)
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	3d 83       	std	Y+5, r19	; 0x05
    2618:	2c 83       	std	Y+4, r18	; 0x04
    261a:	8c 81       	ldd	r24, Y+4	; 0x04
    261c:	9d 81       	ldd	r25, Y+5	; 0x05
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	91 05       	cpc	r25, r1
    2622:	81 f1       	breq	.+96     	; 0x2684 <Steering_SteerCar+0x86>
    2624:	2c 81       	ldd	r18, Y+4	; 0x04
    2626:	3d 81       	ldd	r19, Y+5	; 0x05
    2628:	23 30       	cpi	r18, 0x03	; 3
    262a:	31 05       	cpc	r19, r1
    262c:	54 f4       	brge	.+20     	; 0x2642 <Steering_SteerCar+0x44>
    262e:	8c 81       	ldd	r24, Y+4	; 0x04
    2630:	9d 81       	ldd	r25, Y+5	; 0x05
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	89 f0       	breq	.+34     	; 0x2658 <Steering_SteerCar+0x5a>
    2636:	2c 81       	ldd	r18, Y+4	; 0x04
    2638:	3d 81       	ldd	r19, Y+5	; 0x05
    263a:	21 30       	cpi	r18, 0x01	; 1
    263c:	31 05       	cpc	r19, r1
    263e:	a1 f0       	breq	.+40     	; 0x2668 <Steering_SteerCar+0x6a>
    2640:	4b c0       	rjmp	.+150    	; 0x26d8 <Steering_SteerCar+0xda>
    2642:	8c 81       	ldd	r24, Y+4	; 0x04
    2644:	9d 81       	ldd	r25, Y+5	; 0x05
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	91 05       	cpc	r25, r1
    264a:	51 f1       	breq	.+84     	; 0x26a0 <Steering_SteerCar+0xa2>
    264c:	2c 81       	ldd	r18, Y+4	; 0x04
    264e:	3d 81       	ldd	r19, Y+5	; 0x05
    2650:	24 30       	cpi	r18, 0x04	; 4
    2652:	31 05       	cpc	r19, r1
    2654:	99 f1       	breq	.+102    	; 0x26bc <Steering_SteerCar+0xbe>
    2656:	40 c0       	rjmp	.+128    	; 0x26d8 <Steering_SteerCar+0xda>
	{
	case CAR_STOP:
		Motor_Stop(MOTOR_1);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Motor_Stop>
		Motor_Stop(MOTOR_2);
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Motor_Stop>
		u8_status=E_ok;
    2664:	19 82       	std	Y+1, r1	; 0x01
    2666:	3a c0       	rjmp	.+116    	; 0x26dc <Steering_SteerCar+0xde>
		break;

	case CAR_FORWARD:
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	61 e0       	ldi	r22, 0x01	; 1
    266c:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1_2,speed);
    2678:	83 e0       	ldi	r24, 0x03	; 3
    267a:	6b 81       	ldd	r22, Y+3	; 0x03
    267c:	0e 94 28 12 	call	0x2450	; 0x2450 <Motor_SpeedUpdate>
		u8_status=E_ok;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	2c c0       	rjmp	.+88     	; 0x26dc <Steering_SteerCar+0xde>
		break;

	case CAR_BACKWARD:
		Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	62 e0       	ldi	r22, 0x02	; 2
    2690:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1_2,speed);
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	6b 81       	ldd	r22, Y+3	; 0x03
    2698:	0e 94 28 12 	call	0x2450	; 0x2450 <Motor_SpeedUpdate>
		u8_status=E_ok;
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	1e c0       	rjmp	.+60     	; 0x26dc <Steering_SteerCar+0xde>
		break;

	case CAR_RIGHT:
		Motor_Direction(MOTOR_1, MOTOR_BACKWARD);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	62 e0       	ldi	r22, 0x02	; 2
    26a4:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_FORWARD);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_2,speed);
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	6b 81       	ldd	r22, Y+3	; 0x03
    26b4:	0e 94 28 12 	call	0x2450	; 0x2450 <Motor_SpeedUpdate>
		u8_status=E_ok;
    26b8:	19 82       	std	Y+1, r1	; 0x01
    26ba:	10 c0       	rjmp	.+32     	; 0x26dc <Steering_SteerCar+0xde>
		break;

	case CAR_LEFT:
		Motor_Direction(MOTOR_1, MOTOR_FORWARD);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_Direction(MOTOR_2, MOTOR_BACKWARD);
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	0e 94 17 11 	call	0x222e	; 0x222e <Motor_Direction>
		Motor_SpeedUpdate(MOTOR_1,speed);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	6b 81       	ldd	r22, Y+3	; 0x03
    26d0:	0e 94 28 12 	call	0x2450	; 0x2450 <Motor_SpeedUpdate>
		u8_status=E_ok;
    26d4:	19 82       	std	Y+1, r1	; 0x01
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <Steering_SteerCar+0xde>
		break;

	default:
		u8_status=E_NOk;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <Car_SM_Init>:
* Return value: u8_error- variable that describe the error status
* Description: Initiate the car state machine with state"forward at speed 80%",
* And initiate steering and ultrasonic functions
************************************************************************************/
ERROR_STATUS Car_SM_Init(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	u8_status |= Us_Init();
    26f8:	0e 94 42 10 	call	0x2084	; 0x2084 <Us_Init>
    26fc:	98 2f       	mov	r25, r24
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	89 2b       	or	r24, r25
    2702:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= Steering_Init();
    2704:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Steering_Init>
    2708:	98 2f       	mov	r25, r24
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	89 2b       	or	r24, r25
    270e:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= Steering_SteerCar(CAR_FORWARD,INITIAL_SPEED);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	60 e5       	ldi	r22, 0x50	; 80
    2714:	0e 94 ff 12 	call	0x25fe	; 0x25fe <Steering_SteerCar>
    2718:	98 2f       	mov	r25, r24
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	89 2b       	or	r24, r25
    271e:	89 83       	std	Y+1, r24	; 0x01
	u8_status |= E_ok;

	if(u8_status == E_ok)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	11 f4       	brne	.+4      	; 0x272a <Car_SM_Init+0x3c>
	{
		u8_status=E_ok;
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	02 c0       	rjmp	.+4      	; 0x272e <Car_SM_Init+0x40>
	}
	else
	{
		u8_status = E_NOk;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_status;
    272e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <Car_SM_Update>:
* Return value: u8_error- variable that describe the error status
* Description: changes car state according to the ultrasonic input
* and represents the motors output for each state
************************************************************************************/
ERROR_STATUS Car_SM_Update(void)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <Car_SM_Update+0x6>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <Car_SM_Update+0x8>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <Car_SM_Update+0xa>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_status;
	uint16_t Distance;
	uint8_t u8_state;
	u8_status |= Us_Trigger();
    2746:	0e 94 70 10 	call	0x20e0	; 0x20e0 <Us_Trigger>
    274a:	98 2f       	mov	r25, r24
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	89 2b       	or	r24, r25
    2750:	8a 83       	std	Y+2, r24	; 0x02
	u8_status |= Us_GetDistance(&Distance);
    2752:	ce 01       	movw	r24, r28
    2754:	03 96       	adiw	r24, 0x03	; 3
    2756:	0e 94 91 10 	call	0x2122	; 0x2122 <Us_GetDistance>
    275a:	98 2f       	mov	r25, r24
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	89 2b       	or	r24, r25
    2760:	8a 83       	std	Y+2, r24	; 0x02

	if(Distance>NEAR_DISTANCE && Distance<=INTERMEDIATE_DISTANCE)
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	39 f0       	breq	.+14     	; 0x2778 <Car_SM_Update+0x40>
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	8a 31       	cpi	r24, 0x1A	; 26
    2770:	91 05       	cpc	r25, r1
    2772:	10 f4       	brcc	.+4      	; 0x2778 <Car_SM_Update+0x40>
	{
		u8_state=NEAR;
    2774:	19 82       	std	Y+1, r1	; 0x01
    2776:	14 c0       	rjmp	.+40     	; 0x27a0 <Car_SM_Update+0x68>
	}
	else if(Distance>INTERMEDIATE_DISTANCE && Distance<=FAR_DISTANCE)
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	9c 81       	ldd	r25, Y+4	; 0x04
    277c:	8a 31       	cpi	r24, 0x1A	; 26
    277e:	91 05       	cpc	r25, r1
    2780:	40 f0       	brcs	.+16     	; 0x2792 <Car_SM_Update+0x5a>
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	84 32       	cpi	r24, 0x24	; 36
    2788:	91 05       	cpc	r25, r1
    278a:	18 f4       	brcc	.+6      	; 0x2792 <Car_SM_Update+0x5a>
	{
		u8_state=INTERMEDIATE;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <Car_SM_Update+0x68>
	}
	else if(Distance>FAR_DISTANCE)
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	84 32       	cpi	r24, 0x24	; 36
    2798:	91 05       	cpc	r25, r1
    279a:	10 f0       	brcs	.+4      	; 0x27a0 <Car_SM_Update+0x68>
	{
		u8_state=FAR;
    279c:	82 e0       	ldi	r24, 0x02	; 2
    279e:	89 83       	std	Y+1, r24	; 0x01
	}

	switch(u8_state)
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3e 83       	std	Y+6, r19	; 0x06
    27a8:	2d 83       	std	Y+5, r18	; 0x05
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	89 f0       	breq	.+34     	; 0x27d6 <Car_SM_Update+0x9e>
    27b4:	2d 81       	ldd	r18, Y+5	; 0x05
    27b6:	3e 81       	ldd	r19, Y+6	; 0x06
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	d1 f0       	breq	.+52     	; 0x27f2 <Car_SM_Update+0xba>
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	e9 f4       	brne	.+58     	; 0x2800 <Car_SM_Update+0xc8>
	{
		case NEAR:
			u8_status |= Steering_SteerCar(CAR_FORWARD,LOW_SPEED);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	6e e1       	ldi	r22, 0x1E	; 30
    27ca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <Steering_SteerCar>
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	89 2b       	or	r24, r25
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	15 c0       	rjmp	.+42     	; 0x2800 <Car_SM_Update+0xc8>
			break;
		case INTERMEDIATE:
			u8_status |= Steering_SteerCar(CAR_RIGHT,FULL_SPEED);
    27d6:	83 e0       	ldi	r24, 0x03	; 3
    27d8:	64 e6       	ldi	r22, 0x64	; 100
    27da:	0e 94 ff 12 	call	0x25fe	; 0x25fe <Steering_SteerCar>
    27de:	9a 81       	ldd	r25, Y+2	; 0x02
    27e0:	89 2b       	or	r24, r25
    27e2:	8a 83       	std	Y+2, r24	; 0x02
			softwareDelayMs(DELAY_FOR_TURN);
    27e4:	64 ef       	ldi	r22, 0xF4	; 244
    27e6:	71 e0       	ldi	r23, 0x01	; 1
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 20 14 	call	0x2840	; 0x2840 <softwareDelayMs>
    27f0:	07 c0       	rjmp	.+14     	; 0x2800 <Car_SM_Update+0xc8>
			break;
		case FAR:
			u8_status |= Steering_SteerCar(CAR_BACKWARD,LOW_SPEED);
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	6e e1       	ldi	r22, 0x1E	; 30
    27f6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <Steering_SteerCar>
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	89 2b       	or	r24, r25
    27fe:	8a 83       	std	Y+2, r24	; 0x02
			break;
	}

	softwareDelayMs(DELAY_FOR_GET_NEW_READING);
    2800:	64 e6       	ldi	r22, 0x64	; 100
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 20 14 	call	0x2840	; 0x2840 <softwareDelayMs>

	if(u8_status == E_ok)
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	88 23       	and	r24, r24
    2810:	11 f4       	brne	.+4      	; 0x2816 <Car_SM_Update+0xde>
	{
		u8_status=E_ok;
    2812:	1a 82       	std	Y+2, r1	; 0x02
    2814:	02 c0       	rjmp	.+4      	; 0x281a <Car_SM_Update+0xe2>
	}
	else
	{
		u8_status = E_NOk;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_status;
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    281c:	26 96       	adiw	r28, 0x06	; 6
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <main>:




int main(void)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
	}
*/

	/****************************************************************************/

	Car_SM_Init();
    2836:	0e 94 77 13 	call	0x26ee	; 0x26ee <Car_SM_Init>

	while(TRUE)
	{
		Car_SM_Update();
    283a:	0e 94 9c 13 	call	0x2738	; 0x2738 <Car_SM_Update>
    283e:	fd cf       	rjmp	.-6      	; 0x283a <main+0xc>

00002840 <softwareDelayMs>:
#include "softwareDelay.h"
#define CLEAR 0


void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	2c 97       	sbiw	r28, 0x0c	; 12
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	69 87       	std	Y+9, r22	; 0x09
    2856:	7a 87       	std	Y+10, r23	; 0x0a
    2858:	8b 87       	std	Y+11, r24	; 0x0b
    285a:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t i;
	uint32_t j;
    for(i=CLEAR;i<u32_delay_in_ms;i++)
    285c:	1d 82       	std	Y+5, r1	; 0x05
    285e:	1e 82       	std	Y+6, r1	; 0x06
    2860:	1f 82       	std	Y+7, r1	; 0x07
    2862:	18 86       	std	Y+8, r1	; 0x08
    2864:	27 c0       	rjmp	.+78     	; 0x28b4 <softwareDelayMs+0x74>
    {
    	for(j=CLEAR;j<NUMBER_OF_ITERATIONS;j++)
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	1a 82       	std	Y+2, r1	; 0x02
    286a:	1b 82       	std	Y+3, r1	; 0x03
    286c:	1c 82       	std	Y+4, r1	; 0x04
    286e:	0b c0       	rjmp	.+22     	; 0x2886 <softwareDelayMs+0x46>
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	ab 81       	ldd	r26, Y+3	; 0x03
    2876:	bc 81       	ldd	r27, Y+4	; 0x04
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	a1 1d       	adc	r26, r1
    287c:	b1 1d       	adc	r27, r1
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	ab 83       	std	Y+3, r26	; 0x03
    2884:	bc 83       	std	Y+4, r27	; 0x04
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	ab 81       	ldd	r26, Y+3	; 0x03
    288c:	bc 81       	ldd	r27, Y+4	; 0x04
    288e:	81 3b       	cpi	r24, 0xB1	; 177
    2890:	21 e0       	ldi	r18, 0x01	; 1
    2892:	92 07       	cpc	r25, r18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	a2 07       	cpc	r26, r18
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	b2 07       	cpc	r27, r18
    289c:	48 f3       	brcs	.-46     	; 0x2870 <softwareDelayMs+0x30>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	uint32_t i;
	uint32_t j;
    for(i=CLEAR;i<u32_delay_in_ms;i++)
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	af 81       	ldd	r26, Y+7	; 0x07
    28a4:	b8 85       	ldd	r27, Y+8	; 0x08
    28a6:	01 96       	adiw	r24, 0x01	; 1
    28a8:	a1 1d       	adc	r26, r1
    28aa:	b1 1d       	adc	r27, r1
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	af 83       	std	Y+7, r26	; 0x07
    28b2:	b8 87       	std	Y+8, r27	; 0x08
    28b4:	2d 81       	ldd	r18, Y+5	; 0x05
    28b6:	3e 81       	ldd	r19, Y+6	; 0x06
    28b8:	4f 81       	ldd	r20, Y+7	; 0x07
    28ba:	58 85       	ldd	r21, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    28c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	4a 07       	cpc	r20, r26
    28ca:	5b 07       	cpc	r21, r27
    28cc:	60 f2       	brcs	.-104    	; 0x2866 <softwareDelayMs+0x26>
    	for(j=CLEAR;j<NUMBER_OF_ITERATIONS;j++)
    	{

    	}
    }
}
    28ce:	2c 96       	adiw	r28, 0x0c	; 12
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <__udivmodsi4>:
    28e0:	a1 e2       	ldi	r26, 0x21	; 33
    28e2:	1a 2e       	mov	r1, r26
    28e4:	aa 1b       	sub	r26, r26
    28e6:	bb 1b       	sub	r27, r27
    28e8:	fd 01       	movw	r30, r26
    28ea:	0d c0       	rjmp	.+26     	; 0x2906 <__udivmodsi4_ep>

000028ec <__udivmodsi4_loop>:
    28ec:	aa 1f       	adc	r26, r26
    28ee:	bb 1f       	adc	r27, r27
    28f0:	ee 1f       	adc	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	a2 17       	cp	r26, r18
    28f6:	b3 07       	cpc	r27, r19
    28f8:	e4 07       	cpc	r30, r20
    28fa:	f5 07       	cpc	r31, r21
    28fc:	20 f0       	brcs	.+8      	; 0x2906 <__udivmodsi4_ep>
    28fe:	a2 1b       	sub	r26, r18
    2900:	b3 0b       	sbc	r27, r19
    2902:	e4 0b       	sbc	r30, r20
    2904:	f5 0b       	sbc	r31, r21

00002906 <__udivmodsi4_ep>:
    2906:	66 1f       	adc	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	88 1f       	adc	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	1a 94       	dec	r1
    2910:	69 f7       	brne	.-38     	; 0x28ec <__udivmodsi4_loop>
    2912:	60 95       	com	r22
    2914:	70 95       	com	r23
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	bd 01       	movw	r22, r26
    2920:	cf 01       	movw	r24, r30
    2922:	08 95       	ret

00002924 <_exit>:
    2924:	f8 94       	cli

00002926 <__stop_program>:
    2926:	ff cf       	rjmp	.-2      	; 0x2926 <__stop_program>
